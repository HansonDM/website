import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  wixCliAction,
  wixCliAppFlowStepsAnswers
} from "./chunk-YFLJHEC7.js";
import {
  createPackageManager,
  getRepoType
} from "./chunk-ZW47BBFN.js";
import "./chunk-RWTQFIPN.js";
import "./chunk-W54PG6O5.js";
import {
  require_lodash
} from "./chunk-J5YVHTPQ.js";
import {
  BackOfficeHostingPlatforms,
  ComponentType,
  getExtensionPath,
  useProjectModel
} from "./chunk-UD7IBXRB.js";
import {
  useHttpClient
} from "./chunk-OHMQSHHI.js";
import {
  globby
} from "./chunk-PIXNEJ52.js";
import "./chunk-HWVLWVTF.js";
import {
  usePanoramaMethodLogger
} from "./chunk-IUJ26DW6.js";
import {
  isHttpApplicationError,
  isHttpError,
  pRetry,
  resolveUrl,
  serializer,
  toURLSearchParams,
  useBiLogger,
  useErrorReporter
} from "./chunk-KONVQLDI.js";
import "./chunk-WZOSCHKD.js";
import "./chunk-N2KKXUSW.js";
import "./chunk-KJ37XZQA.js";
import {
  AsyncCallbackStatus,
  Box_default,
  ConfirmInput,
  InputState,
  Key,
  Learn,
  Link,
  Notification,
  SelectGroupsInput,
  SelectInput,
  Spinner,
  Text,
  TextInput,
  UnorderedList,
  require_baseGetTag,
  require_isObject,
  require_root,
  useAsync,
  useAsyncCallback,
  use_input_default
} from "./chunk-AHOU27PT.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-Z4MHKCET.js";
import "./chunk-C4SUTB4O.js";
import "./chunk-IWQIW4GL.js";
import "./chunk-II7O6SCF.js";
import {
  getTestOverrides
} from "./chunk-RL7RA2JG.js";
import {
  outputDir,
  outputFile,
  pathExists,
  readJson,
  readPackageJson,
  toJsonString,
  writePackageJson
} from "./chunk-ZUSQSFTR.js";
import {
  external_exports
} from "./chunk-F43XHKVL.js";
import {
  CliError,
  CliErrorCode,
  require_lib
} from "./chunk-EW4XNYNT.js";
import {
  __commonJS,
  __dirname,
  __require,
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../../node_modules/ejs/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/ejs/lib/utils.js"(exports) {
    "use strict";
    init_esm_shims();
    var regExpChars = /[|\\{}()[\]^$+*?.]/g;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var hasOwn = function(obj, key) {
      return hasOwnProperty.apply(obj, [key]);
    };
    exports.escapeRegExpChars = function(string) {
      if (!string) {
        return "";
      }
      return String(string).replace(regExpChars, "\\$&");
    };
    var _ENCODE_HTML_RULES = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&#34;",
      "'": "&#39;"
    };
    var _MATCH_HTML = /[&<>'"]/g;
    function encode_char(c) {
      return _ENCODE_HTML_RULES[c] || c;
    }
    var escapeFuncStr = `var _ENCODE_HTML_RULES = {
      "&": "&amp;"
    , "<": "&lt;"
    , ">": "&gt;"
    , '"': "&#34;"
    , "'": "&#39;"
    }
  , _MATCH_HTML = /[&<>'"]/g;
function encode_char(c) {
  return _ENCODE_HTML_RULES[c] || c;
};
`;
    exports.escapeXML = function(markup) {
      return markup == void 0 ? "" : String(markup).replace(_MATCH_HTML, encode_char);
    };
    function escapeXMLToString() {
      return Function.prototype.toString.call(this) + ";\n" + escapeFuncStr;
    }
    try {
      if (typeof Object.defineProperty === "function") {
        Object.defineProperty(exports.escapeXML, "toString", { value: escapeXMLToString });
      } else {
        exports.escapeXML.toString = escapeXMLToString;
      }
    } catch (err) {
      console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)");
    }
    exports.shallowCopy = function(to, from) {
      from = from || {};
      if (to !== null && to !== void 0) {
        for (var p in from) {
          if (!hasOwn(from, p)) {
            continue;
          }
          if (p === "__proto__" || p === "constructor") {
            continue;
          }
          to[p] = from[p];
        }
      }
      return to;
    };
    exports.shallowCopyFromList = function(to, from, list) {
      list = list || [];
      from = from || {};
      if (to !== null && to !== void 0) {
        for (var i = 0; i < list.length; i++) {
          var p = list[i];
          if (typeof from[p] != "undefined") {
            if (!hasOwn(from, p)) {
              continue;
            }
            if (p === "__proto__" || p === "constructor") {
              continue;
            }
            to[p] = from[p];
          }
        }
      }
      return to;
    };
    exports.cache = {
      _data: {},
      set: function(key, val) {
        this._data[key] = val;
      },
      get: function(key) {
        return this._data[key];
      },
      remove: function(key) {
        delete this._data[key];
      },
      reset: function() {
        this._data = {};
      }
    };
    exports.hyphenToCamel = function(str) {
      return str.replace(/-[a-z]/g, function(match12) {
        return match12[1].toUpperCase();
      });
    };
    exports.createNullProtoObjWherePossible = function() {
      if (typeof Object.create == "function") {
        return function() {
          return /* @__PURE__ */ Object.create(null);
        };
      }
      if (!({ __proto__: null } instanceof Object)) {
        return function() {
          return { __proto__: null };
        };
      }
      return function() {
        return {};
      };
    }();
    exports.hasOwnOnlyObject = function(obj) {
      var o = exports.createNullProtoObjWherePossible();
      for (var p in obj) {
        if (hasOwn(obj, p)) {
          o[p] = obj[p];
        }
      }
      return o;
    };
  }
});

// ../../node_modules/ejs/package.json
var require_package = __commonJS({
  "../../node_modules/ejs/package.json"(exports, module) {
    module.exports = {
      name: "ejs",
      description: "Embedded JavaScript templates",
      keywords: [
        "template",
        "engine",
        "ejs"
      ],
      version: "3.1.10",
      author: "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",
      license: "Apache-2.0",
      bin: {
        ejs: "./bin/cli.js"
      },
      main: "./lib/ejs.js",
      jsdelivr: "ejs.min.js",
      unpkg: "ejs.min.js",
      repository: {
        type: "git",
        url: "git://github.com/mde/ejs.git"
      },
      bugs: "https://github.com/mde/ejs/issues",
      homepage: "https://github.com/mde/ejs",
      dependencies: {
        jake: "^10.8.5"
      },
      devDependencies: {
        browserify: "^16.5.1",
        eslint: "^6.8.0",
        "git-directory-deploy": "^1.5.1",
        jsdoc: "^4.0.2",
        "lru-cache": "^4.0.1",
        mocha: "^10.2.0",
        "uglify-js": "^3.3.16"
      },
      engines: {
        node: ">=0.10.0"
      },
      scripts: {
        test: "npx jake test"
      }
    };
  }
});

// ../../node_modules/ejs/lib/ejs.js
var require_ejs = __commonJS({
  "../../node_modules/ejs/lib/ejs.js"(exports) {
    "use strict";
    init_esm_shims();
    var fs = __require("fs");
    var path7 = __require("path");
    var utils = require_utils();
    var scopeOptionWarned = false;
    var _VERSION_STRING = require_package().version;
    var _DEFAULT_OPEN_DELIMITER = "<";
    var _DEFAULT_CLOSE_DELIMITER = ">";
    var _DEFAULT_DELIMITER = "%";
    var _DEFAULT_LOCALS_NAME = "locals";
    var _NAME = "ejs";
    var _REGEX_STRING = "(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";
    var _OPTS_PASSABLE_WITH_DATA = [
      "delimiter",
      "scope",
      "context",
      "debug",
      "compileDebug",
      "client",
      "_with",
      "rmWhitespace",
      "strict",
      "filename",
      "async"
    ];
    var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat("cache");
    var _BOM = /^\uFEFF/;
    var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;
    exports.cache = utils.cache;
    exports.fileLoader = fs.readFileSync;
    exports.localsName = _DEFAULT_LOCALS_NAME;
    exports.promiseImpl = new Function("return this;")().Promise;
    exports.resolveInclude = function(name, filename, isDir) {
      var dirname3 = path7.dirname;
      var extname2 = path7.extname;
      var resolve3 = path7.resolve;
      var includePath = resolve3(isDir ? filename : dirname3(filename), name);
      var ext = extname2(name);
      if (!ext) {
        includePath += ".ejs";
      }
      return includePath;
    };
    function resolvePaths(name, paths) {
      var filePath;
      if (paths.some(function(v) {
        filePath = exports.resolveInclude(name, v, true);
        return fs.existsSync(filePath);
      })) {
        return filePath;
      }
    }
    function getIncludePath(path8, options) {
      var includePath;
      var filePath;
      var views = options.views;
      var match12 = /^[A-Za-z]+:\\|^\//.exec(path8);
      if (match12 && match12.length) {
        path8 = path8.replace(/^\/*/, "");
        if (Array.isArray(options.root)) {
          includePath = resolvePaths(path8, options.root);
        } else {
          includePath = exports.resolveInclude(path8, options.root || "/", true);
        }
      } else {
        if (options.filename) {
          filePath = exports.resolveInclude(path8, options.filename);
          if (fs.existsSync(filePath)) {
            includePath = filePath;
          }
        }
        if (!includePath && Array.isArray(views)) {
          includePath = resolvePaths(path8, views);
        }
        if (!includePath && typeof options.includer !== "function") {
          throw new Error('Could not find the include file "' + options.escapeFunction(path8) + '"');
        }
      }
      return includePath;
    }
    function handleCache(options, template) {
      var func;
      var filename = options.filename;
      var hasTemplate = arguments.length > 1;
      if (options.cache) {
        if (!filename) {
          throw new Error("cache option requires a filename");
        }
        func = exports.cache.get(filename);
        if (func) {
          return func;
        }
        if (!hasTemplate) {
          template = fileLoader(filename).toString().replace(_BOM, "");
        }
      } else if (!hasTemplate) {
        if (!filename) {
          throw new Error("Internal EJS error: no file name or template provided");
        }
        template = fileLoader(filename).toString().replace(_BOM, "");
      }
      func = exports.compile(template, options);
      if (options.cache) {
        exports.cache.set(filename, func);
      }
      return func;
    }
    function tryHandleCache(options, data, cb) {
      var result;
      if (!cb) {
        if (typeof exports.promiseImpl == "function") {
          return new exports.promiseImpl(function(resolve3, reject) {
            try {
              result = handleCache(options)(data);
              resolve3(result);
            } catch (err) {
              reject(err);
            }
          });
        } else {
          throw new Error("Please provide a callback function");
        }
      } else {
        try {
          result = handleCache(options)(data);
        } catch (err) {
          return cb(err);
        }
        cb(null, result);
      }
    }
    function fileLoader(filePath) {
      return exports.fileLoader(filePath);
    }
    function includeFile(path8, options) {
      var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);
      opts.filename = getIncludePath(path8, opts);
      if (typeof options.includer === "function") {
        var includerResult = options.includer(path8, opts.filename);
        if (includerResult) {
          if (includerResult.filename) {
            opts.filename = includerResult.filename;
          }
          if (includerResult.template) {
            return handleCache(opts, includerResult.template);
          }
        }
      }
      return handleCache(opts);
    }
    function rethrow(err, str, flnm, lineno, esc) {
      var lines = str.split("\n");
      var start = Math.max(lineno - 3, 0);
      var end = Math.min(lines.length, lineno + 3);
      var filename = esc(flnm);
      var context = lines.slice(start, end).map(function(line, i) {
        var curr = i + start + 1;
        return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
      }).join("\n");
      err.path = filename;
      err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
      throw err;
    }
    function stripSemi(str) {
      return str.replace(/;(\s*$)/, "$1");
    }
    exports.compile = function compile(template, opts) {
      var templ;
      if (opts && opts.scope) {
        if (!scopeOptionWarned) {
          console.warn("`scope` option is deprecated and will be removed in EJS 3");
          scopeOptionWarned = true;
        }
        if (!opts.context) {
          opts.context = opts.scope;
        }
        delete opts.scope;
      }
      templ = new Template(template, opts);
      return templ.compile();
    };
    exports.render = function(template, d, o) {
      var data = d || utils.createNullProtoObjWherePossible();
      var opts = o || utils.createNullProtoObjWherePossible();
      if (arguments.length == 2) {
        utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
      }
      return handleCache(opts, template)(data);
    };
    exports.renderFile = function() {
      var args = Array.prototype.slice.call(arguments);
      var filename = args.shift();
      var cb;
      var opts = { filename };
      var data;
      var viewOpts;
      if (typeof arguments[arguments.length - 1] == "function") {
        cb = args.pop();
      }
      if (args.length) {
        data = args.shift();
        if (args.length) {
          utils.shallowCopy(opts, args.pop());
        } else {
          if (data.settings) {
            if (data.settings.views) {
              opts.views = data.settings.views;
            }
            if (data.settings["view cache"]) {
              opts.cache = true;
            }
            viewOpts = data.settings["view options"];
            if (viewOpts) {
              utils.shallowCopy(opts, viewOpts);
            }
          }
          utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
        }
        opts.filename = filename;
      } else {
        data = utils.createNullProtoObjWherePossible();
      }
      return tryHandleCache(opts, data, cb);
    };
    exports.Template = Template;
    exports.clearCache = function() {
      exports.cache.reset();
    };
    function Template(text, optsParam) {
      var opts = utils.hasOwnOnlyObject(optsParam);
      var options = utils.createNullProtoObjWherePossible();
      this.templateText = text;
      this.mode = null;
      this.truncate = false;
      this.currentLine = 1;
      this.source = "";
      options.client = opts.client || false;
      options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
      options.compileDebug = opts.compileDebug !== false;
      options.debug = !!opts.debug;
      options.filename = opts.filename;
      options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;
      options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
      options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
      options.strict = opts.strict || false;
      options.context = opts.context;
      options.cache = opts.cache || false;
      options.rmWhitespace = opts.rmWhitespace;
      options.root = opts.root;
      options.includer = opts.includer;
      options.outputFunctionName = opts.outputFunctionName;
      options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
      options.views = opts.views;
      options.async = opts.async;
      options.destructuredLocals = opts.destructuredLocals;
      options.legacyInclude = typeof opts.legacyInclude != "undefined" ? !!opts.legacyInclude : true;
      if (options.strict) {
        options._with = false;
      } else {
        options._with = typeof opts._with != "undefined" ? opts._with : true;
      }
      this.opts = options;
      this.regex = this.createRegex();
    }
    Template.modes = {
      EVAL: "eval",
      ESCAPED: "escaped",
      RAW: "raw",
      COMMENT: "comment",
      LITERAL: "literal"
    };
    Template.prototype = {
      createRegex: function() {
        var str = _REGEX_STRING;
        var delim = utils.escapeRegExpChars(this.opts.delimiter);
        var open = utils.escapeRegExpChars(this.opts.openDelimiter);
        var close = utils.escapeRegExpChars(this.opts.closeDelimiter);
        str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);
        return new RegExp(str);
      },
      compile: function() {
        var src;
        var fn;
        var opts = this.opts;
        var prepended = "";
        var appended = "";
        var escapeFn = opts.escapeFunction;
        var ctor;
        var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : "undefined";
        if (!this.source) {
          this.generateSource();
          prepended += '  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n';
          if (opts.outputFunctionName) {
            if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {
              throw new Error("outputFunctionName is not a valid JS identifier.");
            }
            prepended += "  var " + opts.outputFunctionName + " = __append;\n";
          }
          if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {
            throw new Error("localsName is not a valid JS identifier.");
          }
          if (opts.destructuredLocals && opts.destructuredLocals.length) {
            var destructuring = "  var __locals = (" + opts.localsName + " || {}),\n";
            for (var i = 0; i < opts.destructuredLocals.length; i++) {
              var name = opts.destructuredLocals[i];
              if (!_JS_IDENTIFIER.test(name)) {
                throw new Error("destructuredLocals[" + i + "] is not a valid JS identifier.");
              }
              if (i > 0) {
                destructuring += ",\n  ";
              }
              destructuring += name + " = __locals." + name;
            }
            prepended += destructuring + ";\n";
          }
          if (opts._with !== false) {
            prepended += "  with (" + opts.localsName + " || {}) {\n";
            appended += "  }\n";
          }
          appended += "  return __output;\n";
          this.source = prepended + this.source + appended;
        }
        if (opts.compileDebug) {
          src = "var __line = 1\n  , __lines = " + JSON.stringify(this.templateText) + "\n  , __filename = " + sanitizedFilename + ";\ntry {\n" + this.source + "} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n";
        } else {
          src = this.source;
        }
        if (opts.client) {
          src = "escapeFn = escapeFn || " + escapeFn.toString() + ";\n" + src;
          if (opts.compileDebug) {
            src = "rethrow = rethrow || " + rethrow.toString() + ";\n" + src;
          }
        }
        if (opts.strict) {
          src = '"use strict";\n' + src;
        }
        if (opts.debug) {
          console.log(src);
        }
        if (opts.compileDebug && opts.filename) {
          src = src + "\n//# sourceURL=" + sanitizedFilename + "\n";
        }
        try {
          if (opts.async) {
            try {
              ctor = new Function("return (async function(){}).constructor;")();
            } catch (e) {
              if (e instanceof SyntaxError) {
                throw new Error("This environment does not support async/await");
              } else {
                throw e;
              }
            }
          } else {
            ctor = Function;
          }
          fn = new ctor(opts.localsName + ", escapeFn, include, rethrow", src);
        } catch (e) {
          if (e instanceof SyntaxError) {
            if (opts.filename) {
              e.message += " in " + opts.filename;
            }
            e.message += " while compiling ejs\n\n";
            e.message += "If the above error is not helpful, you may want to try EJS-Lint:\n";
            e.message += "https://github.com/RyanZim/EJS-Lint";
            if (!opts.async) {
              e.message += "\n";
              e.message += "Or, if you meant to create an async function, pass `async: true` as an option.";
            }
          }
          throw e;
        }
        var returnedFn = opts.client ? fn : function anonymous(data) {
          var include = function(path8, includeData) {
            var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);
            if (includeData) {
              d = utils.shallowCopy(d, includeData);
            }
            return includeFile(path8, opts)(d);
          };
          return fn.apply(
            opts.context,
            [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]
          );
        };
        if (opts.filename && typeof Object.defineProperty === "function") {
          var filename = opts.filename;
          var basename = path7.basename(filename, path7.extname(filename));
          try {
            Object.defineProperty(returnedFn, "name", {
              value: basename,
              writable: false,
              enumerable: false,
              configurable: true
            });
          } catch (e) {
          }
        }
        return returnedFn;
      },
      generateSource: function() {
        var opts = this.opts;
        if (opts.rmWhitespace) {
          this.templateText = this.templateText.replace(/[\r\n]+/g, "\n").replace(/^\s+|\s+$/gm, "");
        }
        this.templateText = this.templateText.replace(/[ \t]*<%_/gm, "<%_").replace(/_%>[ \t]*/gm, "_%>");
        var self = this;
        var matches = this.parseTemplateText();
        var d = this.opts.delimiter;
        var o = this.opts.openDelimiter;
        var c = this.opts.closeDelimiter;
        if (matches && matches.length) {
          matches.forEach(function(line, index) {
            var closing;
            if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {
              closing = matches[index + 2];
              if (!(closing == d + c || closing == "-" + d + c || closing == "_" + d + c)) {
                throw new Error('Could not find matching close tag for "' + line + '".');
              }
            }
            self.scanLine(line);
          });
        }
      },
      parseTemplateText: function() {
        var str = this.templateText;
        var pat = this.regex;
        var result = pat.exec(str);
        var arr = [];
        var firstPos;
        while (result) {
          firstPos = result.index;
          if (firstPos !== 0) {
            arr.push(str.substring(0, firstPos));
            str = str.slice(firstPos);
          }
          arr.push(result[0]);
          str = str.slice(result[0].length);
          result = pat.exec(str);
        }
        if (str) {
          arr.push(str);
        }
        return arr;
      },
      _addOutput: function(line) {
        if (this.truncate) {
          line = line.replace(/^(?:\r\n|\r|\n)/, "");
          this.truncate = false;
        }
        if (!line) {
          return line;
        }
        line = line.replace(/\\/g, "\\\\");
        line = line.replace(/\n/g, "\\n");
        line = line.replace(/\r/g, "\\r");
        line = line.replace(/"/g, '\\"');
        this.source += '    ; __append("' + line + '")\n';
      },
      scanLine: function(line) {
        var self = this;
        var d = this.opts.delimiter;
        var o = this.opts.openDelimiter;
        var c = this.opts.closeDelimiter;
        var newLineCount = 0;
        newLineCount = line.split("\n").length - 1;
        switch (line) {
          case o + d:
          case o + d + "_":
            this.mode = Template.modes.EVAL;
            break;
          case o + d + "=":
            this.mode = Template.modes.ESCAPED;
            break;
          case o + d + "-":
            this.mode = Template.modes.RAW;
            break;
          case o + d + "#":
            this.mode = Template.modes.COMMENT;
            break;
          case o + d + d:
            this.mode = Template.modes.LITERAL;
            this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")\n';
            break;
          case d + d + c:
            this.mode = Template.modes.LITERAL;
            this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")\n';
            break;
          case d + c:
          case "-" + d + c:
          case "_" + d + c:
            if (this.mode == Template.modes.LITERAL) {
              this._addOutput(line);
            }
            this.mode = null;
            this.truncate = line.indexOf("-") === 0 || line.indexOf("_") === 0;
            break;
          default:
            if (this.mode) {
              switch (this.mode) {
                case Template.modes.EVAL:
                case Template.modes.ESCAPED:
                case Template.modes.RAW:
                  if (line.lastIndexOf("//") > line.lastIndexOf("\n")) {
                    line += "\n";
                  }
              }
              switch (this.mode) {
                // Just executing code
                case Template.modes.EVAL:
                  this.source += "    ; " + line + "\n";
                  break;
                // Exec, esc, and output
                case Template.modes.ESCAPED:
                  this.source += "    ; __append(escapeFn(" + stripSemi(line) + "))\n";
                  break;
                // Exec and output
                case Template.modes.RAW:
                  this.source += "    ; __append(" + stripSemi(line) + ")\n";
                  break;
                case Template.modes.COMMENT:
                  break;
                // Literal <%% mode, append as raw output
                case Template.modes.LITERAL:
                  this._addOutput(line);
                  break;
              }
            } else {
              this._addOutput(line);
            }
        }
        if (self.opts.compileDebug && newLineCount) {
          this.currentLine += newLineCount;
          this.source += "    ; __line = " + this.currentLine + "\n";
        }
      }
    };
    exports.escapeXML = utils.escapeXML;
    exports.__express = exports.renderFile;
    exports.VERSION = _VERSION_STRING;
    exports.name = _NAME;
    if (typeof window != "undefined") {
      window.ejs = exports;
    }
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js
var require_common = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence)) return sequence;
      else if (isNothing(sequence)) return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module.exports.isNothing = isNothing;
    module.exports.isObject = isObject;
    module.exports.toArray = toArray;
    module.exports.repeat = repeat;
    module.exports.isNegativeZero = isNegativeZero;
    module.exports.extend = extend;
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js
var require_exception = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      var result = this.name + ": ";
      result += this.reason || "(unknown reason)";
      if (!compact && this.mark) {
        result += " " + this.mark.toString();
      }
      return result;
    };
    module.exports = YAMLException;
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js
var require_mark = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common = require_common();
    function Mark(name, buffer, position, line, column) {
      this.name = name;
      this.buffer = buffer;
      this.position = position;
      this.line = line;
      this.column = column;
    }
    Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
      var head, start, tail, end, snippet;
      if (!this.buffer) return null;
      indent = indent || 4;
      maxLength = maxLength || 75;
      head = "";
      start = this.position;
      while (start > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
        start -= 1;
        if (this.position - start > maxLength / 2 - 1) {
          head = " ... ";
          start += 5;
          break;
        }
      }
      tail = "";
      end = this.position;
      while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
        end += 1;
        if (end - this.position > maxLength / 2 - 1) {
          tail = " ... ";
          end -= 5;
          break;
        }
      }
      snippet = this.buffer.slice(start, end);
      return common.repeat(" ", indent) + head + snippet + tail + "\n" + common.repeat(" ", indent + this.position - start + head.length) + "^";
    };
    Mark.prototype.toString = function toString(compact) {
      var snippet, where = "";
      if (this.name) {
        where += 'in "' + this.name + '" ';
      }
      where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
      if (!compact) {
        snippet = this.getSnippet();
        if (snippet) {
          where += ":\n" + snippet;
        }
      }
      return where;
    };
    module.exports = Mark;
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js
var require_type = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var YAMLException = require_exception();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type3(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module.exports = Type3;
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js
var require_schema = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common = require_common();
    var YAMLException = require_exception();
    var Type3 = require_type();
    function compileList(schema, name, result) {
      var exclude = [];
      schema.include.forEach(function(includedSchema) {
        result = compileList(includedSchema, name, result);
      });
      schema[name].forEach(function(currentType) {
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
            exclude.push(previousIndex);
          }
        });
        result.push(currentType);
      });
      return result.filter(function(type, index) {
        return exclude.indexOf(index) === -1;
      });
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      }, index, length;
      function collectType(type) {
        result[type.kind][type.tag] = result["fallback"][type.tag] = type;
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      this.include = definition.include || [];
      this.implicit = definition.implicit || [];
      this.explicit = definition.explicit || [];
      this.implicit.forEach(function(type) {
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
      });
      this.compiledImplicit = compileList(this, "implicit", []);
      this.compiledExplicit = compileList(this, "explicit", []);
      this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
    }
    Schema.DEFAULT = null;
    Schema.create = function createSchema() {
      var schemas, types;
      switch (arguments.length) {
        case 1:
          schemas = Schema.DEFAULT;
          types = arguments[0];
          break;
        case 2:
          schemas = arguments[0];
          types = arguments[1];
          break;
        default:
          throw new YAMLException("Wrong number of arguments for Schema.create function");
      }
      schemas = common.toArray(schemas);
      types = common.toArray(types);
      if (!schemas.every(function(schema) {
        return schema instanceof Schema;
      })) {
        throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
      }
      if (!types.every(function(type) {
        return type instanceof Type3;
      })) {
        throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
      }
      return new Schema({
        include: schemas,
        explicit: types
      });
    };
    module.exports = Schema;
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js
var require_str = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    module.exports = new Type3("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js
var require_seq = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    module.exports = new Type3("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js
var require_map = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    module.exports = new Type3("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js
var require_failsafe = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Schema = require_schema();
    module.exports = new Schema({
      explicit: [
        require_str(),
        require_seq(),
        require_map()
      ]
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js
var require_null = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    function resolveYamlNull(data) {
      if (data === null) return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module.exports = new Type3("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js
var require_bool = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    function resolveYamlBoolean(data) {
      if (data === null) return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module.exports = new Type3("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js
var require_int = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common = require_common();
    var Type3 = require_type();
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null) return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max) return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max) return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (ch !== "0" && ch !== "1") return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (!isHexCode(data.charCodeAt(index))) return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        for (; index < max; index++) {
          ch = data[index];
          if (ch === "_") continue;
          if (!isOctCode(data.charCodeAt(index))) return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "_") return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (ch === ":") break;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_") return false;
      if (ch !== ":") return true;
      return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch, base, digits = [];
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-") sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0") return 0;
      if (ch === "0") {
        if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x") return sign * parseInt(value, 16);
        return sign * parseInt(value, 8);
      }
      if (value.indexOf(":") !== -1) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseInt(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function(d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    module.exports = new Type3("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js
var require_float = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common = require_common();
    var Type3 = require_type();
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null) return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign, base, digits;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      digits = [];
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      } else if (value.indexOf(":") >= 0) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseFloat(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function(d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    module.exports = new Type3("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js
var require_json = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Schema = require_schema();
    module.exports = new Schema({
      include: [
        require_failsafe()
      ],
      implicit: [
        require_null(),
        require_bool(),
        require_int(),
        require_float()
      ]
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js
var require_core = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Schema = require_schema();
    module.exports = new Schema({
      include: [
        require_json()
      ]
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js
var require_timestamp = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null) return false;
      if (YAML_DATE_REGEXP.exec(data) !== null) return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match12, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match12 = YAML_DATE_REGEXP.exec(data);
      if (match12 === null) match12 = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match12 === null) throw new Error("Date resolve error");
      year = +match12[1];
      month = +match12[2] - 1;
      day = +match12[3];
      if (!match12[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match12[4];
      minute = +match12[5];
      second = +match12[6];
      if (match12[7]) {
        fraction = match12[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match12[9]) {
        tz_hour = +match12[10];
        tz_minute = +(match12[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match12[9] === "-") delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta) date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module.exports = new Type3("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js
var require_merge = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module.exports = new Type3("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js
var require_binary = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var NodeBuffer;
    try {
      _require = __require;
      NodeBuffer = _require("buffer").Buffer;
    } catch (__) {
    }
    var _require;
    var Type3 = require_type();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null) return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64) continue;
        if (code < 0) return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      if (NodeBuffer) {
        return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
      }
      return result;
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(object) {
      return NodeBuffer && NodeBuffer.isBuffer(object);
    }
    module.exports = new Type3("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js
var require_omap = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null) return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]") return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey) pairHasKey = true;
            else return false;
          }
        }
        if (!pairHasKey) return false;
        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
        else return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module.exports = new Type3("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js
var require_pairs = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null) return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]") return false;
        keys = Object.keys(pair);
        if (keys.length !== 1) return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null) return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module.exports = new Type3("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js
var require_set = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null) return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null) return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module.exports = new Type3("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js
var require_default_safe = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Schema = require_schema();
    module.exports = new Schema({
      include: [
        require_core()
      ],
      implicit: [
        require_timestamp(),
        require_merge()
      ],
      explicit: [
        require_binary(),
        require_omap(),
        require_pairs(),
        require_set()
      ]
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js
var require_undefined = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    function resolveJavascriptUndefined() {
      return true;
    }
    function constructJavascriptUndefined() {
      return void 0;
    }
    function representJavascriptUndefined() {
      return "";
    }
    function isUndefined(object) {
      return typeof object === "undefined";
    }
    module.exports = new Type3("tag:yaml.org,2002:js/undefined", {
      kind: "scalar",
      resolve: resolveJavascriptUndefined,
      construct: constructJavascriptUndefined,
      predicate: isUndefined,
      represent: representJavascriptUndefined
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js
var require_regexp = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type3 = require_type();
    function resolveJavascriptRegExp(data) {
      if (data === null) return false;
      if (data.length === 0) return false;
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
      if (regexp[0] === "/") {
        if (tail) modifiers = tail[1];
        if (modifiers.length > 3) return false;
        if (regexp[regexp.length - modifiers.length - 1] !== "/") return false;
      }
      return true;
    }
    function constructJavascriptRegExp(data) {
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
      if (regexp[0] === "/") {
        if (tail) modifiers = tail[1];
        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
      }
      return new RegExp(regexp, modifiers);
    }
    function representJavascriptRegExp(object) {
      var result = "/" + object.source + "/";
      if (object.global) result += "g";
      if (object.multiline) result += "m";
      if (object.ignoreCase) result += "i";
      return result;
    }
    function isRegExp(object) {
      return Object.prototype.toString.call(object) === "[object RegExp]";
    }
    module.exports = new Type3("tag:yaml.org,2002:js/regexp", {
      kind: "scalar",
      resolve: resolveJavascriptRegExp,
      construct: constructJavascriptRegExp,
      predicate: isRegExp,
      represent: representJavascriptRegExp
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js
var require_function = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var esprima;
    try {
      _require = __require;
      esprima = _require("esprima");
    } catch (_) {
      if (typeof window !== "undefined") esprima = window.esprima;
    }
    var _require;
    var Type3 = require_type();
    function resolveJavascriptFunction(data) {
      if (data === null) return false;
      try {
        var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
        if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    function constructJavascriptFunction(data) {
      var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
      if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
        throw new Error("Failed to resolve function");
      }
      ast.body[0].expression.params.forEach(function(param) {
        params.push(param.name);
      });
      body = ast.body[0].expression.body.range;
      if (ast.body[0].expression.body.type === "BlockStatement") {
        return new Function(params, source.slice(body[0] + 1, body[1] - 1));
      }
      return new Function(params, "return " + source.slice(body[0], body[1]));
    }
    function representJavascriptFunction(object) {
      return object.toString();
    }
    function isFunction(object) {
      return Object.prototype.toString.call(object) === "[object Function]";
    }
    module.exports = new Type3("tag:yaml.org,2002:js/function", {
      kind: "scalar",
      resolve: resolveJavascriptFunction,
      construct: constructJavascriptFunction,
      predicate: isFunction,
      represent: representJavascriptFunction
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js
var require_default_full = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Schema = require_schema();
    module.exports = Schema.DEFAULT = new Schema({
      include: [
        require_default_safe()
      ],
      explicit: [
        require_undefined(),
        require_regexp(),
        require_function()
      ]
    });
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js
var require_loader = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common = require_common();
    var YAMLException = require_exception();
    var Mark = require_mark();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode(
        (c - 65536 >> 10) + 55296,
        (c - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    function State3(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.documents = [];
    }
    function generateError(state, message) {
      return new YAMLException(
        message,
        new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart)
      );
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match12, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match12 = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match12 === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match12[1], 10);
        minor = parseInt(match12[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        _result[keyNode] = valueNode;
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        _pos = state.position;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        } else {
          break;
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if (state.lineIndent > nodeIndent && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33) return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38) return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42) return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag !== null && state.tag !== "!") {
        if (state.tag === "?") {
          if (state.result !== null && state.kind !== "scalar") {
            throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
          }
          for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
            type = state.implicitTypes[typeIndex];
            if (type.resolve(state.result)) {
              state.result = type.construct(state.result);
              state.tag = type.tag;
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
              break;
            }
          }
        } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
          if (state.result !== null && type.kind !== state.kind) {
            throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
          }
          if (!type.resolve(state.result)) {
            throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
          } else {
            state.result = type.construct(state.result);
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = {};
      state.anchorMap = {};
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch)) break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0) readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State3(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    function safeLoadAll(input, iterator, options) {
      if (typeof iterator === "object" && iterator !== null && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      return loadAll(input, iterator, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
    }
    function safeLoad(input, options) {
      return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
    }
    module.exports.loadAll = loadAll;
    module.exports.load = load;
    module.exports.safeLoadAll = safeLoadAll;
    module.exports.safeLoad = safeLoad;
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js
var require_dumper = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common = require_common();
    var YAMLException = require_exception();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null) return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    function State3(options) {
      this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n") result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
    }
    function isNsChar(c) {
      return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev) {
      return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
      var i;
      var char, prev_char;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
      if (singleLineOnly) {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
      } else {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    }
    function writeScalar(state, string, level, iskey) {
      state.dump = function() {
        if (string.length === 0) {
          return "''";
        }
        if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
          return "'" + string + "'";
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match12;
      while (match12 = lineRe.exec(string)) {
        var prefix = match12[1], line = match12[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ") return line;
      var breakRe = / [^ ]/g;
      var match12;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match12 = breakRe.exec(line)) {
        next = match12.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char, nextChar;
      var escapeSeq;
      for (var i = 0; i < string.length; i++) {
        char = string.charCodeAt(i);
        if (char >= 55296 && char <= 56319) {
          nextChar = string.charCodeAt(i + 1);
          if (nextChar >= 56320 && nextChar <= 57343) {
            result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
            i++;
            continue;
          }
        }
        escapeSeq = ESCAPE_SEQUENCES[char];
        result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length;
      for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level, object[index], false, false)) {
          if (index !== 0) _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length;
      for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level + 1, object[index], true, true)) {
          if (!compact || index !== 0) {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (index !== 0) pairBuffer += ", ";
        if (state.condenseFlow) pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024) pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || index !== 0) {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          state.tag = explicit ? type.tag : "?";
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
          if (block && state.dump.length !== 0) {
            writeBlockSequence(state, arrayLevel, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, arrayLevel, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey);
          }
        } else {
          if (state.skipInvalid) return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          state.dump = "!<" + state.tag + "> " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options) {
      options = options || {};
      var state = new State3(options);
      if (!state.noRefs) getDuplicateReferences(input, state);
      if (writeNode(state, 0, input, true, true)) return state.dump + "\n";
      return "";
    }
    function safeDump(input, options) {
      return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
    }
    module.exports.dump = dump;
    module.exports.safeDump = safeDump;
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js
var require_js_yaml = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var loader = require_loader();
    var dumper = require_dumper();
    function deprecated(name) {
      return function() {
        throw new Error("Function " + name + " is deprecated and cannot be used.");
      };
    }
    module.exports.Type = require_type();
    module.exports.Schema = require_schema();
    module.exports.FAILSAFE_SCHEMA = require_failsafe();
    module.exports.JSON_SCHEMA = require_json();
    module.exports.CORE_SCHEMA = require_core();
    module.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
    module.exports.DEFAULT_FULL_SCHEMA = require_default_full();
    module.exports.load = loader.load;
    module.exports.loadAll = loader.loadAll;
    module.exports.safeLoad = loader.safeLoad;
    module.exports.safeLoadAll = loader.safeLoadAll;
    module.exports.dump = dumper.dump;
    module.exports.safeDump = dumper.safeDump;
    module.exports.YAMLException = require_exception();
    module.exports.MINIMAL_SCHEMA = require_failsafe();
    module.exports.SAFE_SCHEMA = require_default_safe();
    module.exports.DEFAULT_SCHEMA = require_default_full();
    module.exports.scan = deprecated("scan");
    module.exports.parse = deprecated("parse");
    module.exports.compose = deprecated("compose");
    module.exports.addConstructor = deprecated("addConstructor");
  }
});

// ../../node_modules/front-matter/node_modules/js-yaml/index.js
var require_js_yaml2 = __commonJS({
  "../../node_modules/front-matter/node_modules/js-yaml/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var yaml = require_js_yaml();
    module.exports = yaml;
  }
});

// ../../node_modules/front-matter/index.js
var require_front_matter = __commonJS({
  "../../node_modules/front-matter/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var parser = require_js_yaml2();
    var optionalByteOrderMark = "\\ufeff?";
    var platform = typeof process !== "undefined" ? process.platform : "";
    var pattern = "^(" + optionalByteOrderMark + "(= yaml =|---)$([\\s\\S]*?)^(?:\\2|\\.\\.\\.)\\s*$" + (platform === "win32" ? "\\r?" : "") + "(?:\\n)?)";
    var regex = new RegExp(pattern, "m");
    module.exports = extractor;
    module.exports.test = test;
    function extractor(string, options) {
      string = string || "";
      var defaultOptions = { allowUnsafe: false };
      options = options instanceof Object ? { ...defaultOptions, ...options } : defaultOptions;
      options.allowUnsafe = Boolean(options.allowUnsafe);
      var lines = string.split(/(\r?\n)/);
      if (lines[0] && /= yaml =|---/.test(lines[0])) {
        return parse(string, options.allowUnsafe);
      } else {
        return {
          attributes: {},
          body: string,
          bodyBegin: 1
        };
      }
    }
    function computeLocation(match12, body) {
      var line = 1;
      var pos = body.indexOf("\n");
      var offset = match12.index + match12[0].length;
      while (pos !== -1) {
        if (pos >= offset) {
          return line;
        }
        line++;
        pos = body.indexOf("\n", pos + 1);
      }
      return line;
    }
    function parse(string, allowUnsafe) {
      var match12 = regex.exec(string);
      if (!match12) {
        return {
          attributes: {},
          body: string,
          bodyBegin: 1
        };
      }
      var loader = allowUnsafe ? parser.load : parser.safeLoad;
      var yaml = match12[match12.length - 1].replace(/^\s+|\s+$/g, "");
      var attributes = loader(yaml) || {};
      var body = string.replace(match12[0], "");
      var line = computeLocation(match12, string);
      return {
        attributes,
        body,
        bodyBegin: line,
        frontmatter: yaml
      };
    }
    function test(string) {
      string = string || "";
      return regex.test(string);
    }
  }
});

// ../../node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "../../node_modules/lodash/isFunction.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// ../../node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "../../node_modules/lodash/_coreJsData.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// ../../node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "../../node_modules/lodash/_isMasked.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// ../../node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "../../node_modules/lodash/_toSource.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// ../../node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "../../node_modules/lodash/_baseIsNative.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// ../../node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "../../node_modules/lodash/_getValue.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// ../../node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "../../node_modules/lodash/_getNative.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// ../../node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "../../node_modules/lodash/_nativeCreate.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// ../../node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "../../node_modules/lodash/_hashClear.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// ../../node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "../../node_modules/lodash/_hashDelete.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// ../../node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "../../node_modules/lodash/_hashGet.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// ../../node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "../../node_modules/lodash/_hashHas.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// ../../node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "../../node_modules/lodash/_hashSet.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// ../../node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "../../node_modules/lodash/_Hash.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// ../../node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "../../node_modules/lodash/_listCacheClear.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// ../../node_modules/lodash/eq.js
var require_eq = __commonJS({
  "../../node_modules/lodash/eq.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// ../../node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "../../node_modules/lodash/_assocIndexOf.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// ../../node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "../../node_modules/lodash/_listCacheDelete.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// ../../node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "../../node_modules/lodash/_listCacheGet.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// ../../node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "../../node_modules/lodash/_listCacheHas.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// ../../node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "../../node_modules/lodash/_listCacheSet.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// ../../node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "../../node_modules/lodash/_ListCache.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// ../../node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "../../node_modules/lodash/_Map.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var getNative = require_getNative();
    var root = require_root();
    var Map = getNative(root, "Map");
    module.exports = Map;
  }
});

// ../../node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "../../node_modules/lodash/_mapCacheClear.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// ../../node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "../../node_modules/lodash/_isKeyable.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// ../../node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "../../node_modules/lodash/_getMapData.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// ../../node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "../../node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// ../../node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "../../node_modules/lodash/_mapCacheGet.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// ../../node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "../../node_modules/lodash/_mapCacheHas.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// ../../node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "../../node_modules/lodash/_mapCacheSet.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// ../../node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "../../node_modules/lodash/_MapCache.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// ../../node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "../../node_modules/lodash/memoize.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// ../cli-astro-commands/src/components/GenerateCommand/index.ts
init_esm_shims();

// ../cli-astro-commands/src/components/GenerateCommand/GenerateCommand.tsx
init_esm_shims();
var import_react26 = __toESM(require_react(), 1);
var import_variant11 = __toESM(require_lib(), 1);

// ../cli-astro-commands/src/bi/index.ts
init_esm_shims();

// ../cli-astro-commands/src/bi/useWixCliAstroBi.ts
init_esm_shims();
var import_react = __toESM(require_react(), 1);

// ../cli-astro-commands/src/bi/events.ts
init_esm_shims();
var wixCliAstroBiEvents = (biLogger) => ({
  cliAction: ({
    questionKey,
    question,
    action,
    key,
    additionalInfo
  }) => {
    void biLogger.report(
      wixCliAction({
        flow: "Astro",
        questionKey,
        question,
        action,
        key,
        additionalInfo: JSON.stringify(additionalInfo)
      })
    );
  },
  cliStepBack: ({
    additionalInfo
  }) => {
    void biLogger.report(
      wixCliAction({
        flow: "Astro",
        action: "goToPreviousStep",
        key: "Esc",
        additionalInfo: JSON.stringify(additionalInfo)
      })
    );
  },
  cliFlowStepAnswered: ({
    question,
    questionKey,
    answer,
    additionalInfo
  }) => {
    void biLogger.report(
      wixCliAppFlowStepsAnswers({
        flow: "Astro",
        questionKey,
        question,
        answer,
        additionalInfo: JSON.stringify(additionalInfo)
      })
    );
  }
});

// ../cli-astro-commands/src/bi/useWixCliAstroBi.ts
function useWixCliAstroBi() {
  const biLogger = useBiLogger();
  return (0, import_react.useMemo)(() => wixCliAstroBiEvents(biLogger), [biLogger]);
}

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-page/DashboardPage.tsx
init_esm_shims();
var import_react8 = __toESM(require_react(), 1);

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-page/generate.ts
init_esm_shims();
import path from "node:path";
import { randomUUID } from "node:crypto";

// ../gena/src/index.ts
init_esm_shims();

// ../gena/src/generator.ts
init_esm_shims();
var import_ejs = __toESM(require_ejs(), 1);
var import_front_matter = __toESM(require_front_matter(), 1);
import { resolve, dirname, extname } from "node:path";
import { readFile, copyFile } from "node:fs/promises";

// ../gena/src/fs-extra.ts
init_esm_shims();
function getFiles(cwd) {
  return globby(["**"], { cwd, dot: true, onlyFiles: true });
}

// ../gena/src/generator.ts
var fm = import_front_matter.default;
function shouldSkipParsing(file) {
  return [".png", ".jpg", ".gif", ".astro"].includes(
    extname(file).toLowerCase()
  );
}
async function justCopy({
  cwd,
  template,
  path: path7
}) {
  const to = resolve(cwd, template);
  await outputDir(dirname(to));
  await copyFile(path7, to);
  return to;
}
async function generator(opts) {
  const { template: templateRoot, data, cwd } = opts;
  const templates = await getFiles(templateRoot);
  const generatedFiles = await Promise.all(
    templates.map(async (template) => {
      const path7 = resolve(templateRoot, template);
      if (shouldSkipParsing(path7)) {
        return justCopy({ cwd, template, path: path7 });
      }
      const raw = await readFile(path7, "utf8");
      const content = (0, import_ejs.render)(raw, data);
      const { attributes, body } = fm(content);
      if (attributes.skip_if === true) {
        return;
      }
      const file = resolve(cwd, attributes.to ?? template);
      await outputFile(file, body);
      return file;
    })
  );
  return generatedFiles.filter((file) => file !== void 0);
}

// ../gena/src/component-generator.ts
init_esm_shims();
import { join as join2 } from "node:path";

// ../gena/src/dependencies-updater.ts
init_esm_shims();
var dependenciesJsonSchema = external_exports.object({
  dependencies: external_exports.record(external_exports.string()).optional(),
  devDependencies: external_exports.record(external_exports.string()).optional()
});
async function readDependenciesJson(filePath) {
  const json = await readJson(filePath);
  const parsedJson = await dependenciesJsonSchema.safeParseAsync(json);
  if (!parsedJson.success) {
    throw new CliError({
      code: CliErrorCode.InvalidDependenciesJsonSchemaError({
        path: filePath,
        zodError: parsedJson.error
      }),
      cause: parsedJson.error
    });
  }
  return parsedJson.data;
}
async function dependenciesUpdater(opts) {
  const { projectFolder, dependenciesJsonPath, dynamicPackages } = opts;
  const addedDependencies = [];
  if (!await pathExists(dependenciesJsonPath)) {
    return addedDependencies;
  }
  const dependenciesConfig = await readDependenciesJson(dependenciesJsonPath);
  const packageJson = await readPackageJson(projectFolder);
  const packageJsonDependencies = {
    ...packageJson.dependencies,
    ...packageJson.devDependencies
  };
  if (dependenciesConfig.dependencies) {
    for (const [dependencyPackageName, version] of Object.entries(
      dependenciesConfig.dependencies
    )) {
      if (!packageJsonDependencies[dependencyPackageName]) {
        if (!packageJson.dependencies) {
          packageJson.dependencies = {};
        }
        packageJson.dependencies[dependencyPackageName] = version;
        addedDependencies.push(dependencyPackageName);
      }
    }
  }
  if (dynamicPackages) {
    for (const [dependencyPackageName, version] of Object.entries(
      dynamicPackages
    )) {
      if (!packageJsonDependencies[dependencyPackageName]) {
        if (!packageJson.dependencies) {
          packageJson.dependencies = {};
        }
        packageJson.dependencies[dependencyPackageName] = version;
        addedDependencies.push(dependencyPackageName);
      }
    }
  }
  if (dependenciesConfig.devDependencies) {
    for (const [dependencyPackageName, version] of Object.entries(
      dependenciesConfig.devDependencies
    )) {
      if (!packageJsonDependencies[dependencyPackageName]) {
        if (!packageJson.devDependencies) {
          packageJson.devDependencies = {};
        }
        packageJson.devDependencies[dependencyPackageName] = version;
        addedDependencies.push(dependencyPackageName);
      }
    }
  }
  if (addedDependencies.length) {
    await writePackageJson(projectFolder, packageJson);
  }
  return addedDependencies;
}

// ../gena/src/assets-generator.ts
init_esm_shims();
import { resolve as resolve2, join } from "node:path";
import { copyFile as copyFile2, mkdir } from "node:fs/promises";
async function assetsGenerator(opts) {
  const { templateRoot, projectFolder, outputPath } = opts;
  const assets = join(templateRoot, "assets");
  if (await pathExists(assets)) {
    const publicDir = join(projectFolder, "src/assets", outputPath ?? "");
    const publicFiles = await getFiles(assets);
    await mkdir(publicDir, { recursive: true });
    await Promise.all(
      publicFiles.map(async (file) => {
        const from = resolve2(assets, file);
        const to = resolve2(publicDir, file);
        await copyFile2(from, to);
      })
    );
  }
}

// ../gena/src/component-generator.ts
async function componentGenerator(opts) {
  const { template, projectFolder, assetsOutputPath, ...generatorOpts } = opts;
  const newFiles = await generator({
    ...generatorOpts,
    template: join2(template, "files")
  });
  await assetsGenerator({
    templateRoot: template,
    projectFolder,
    outputPath: assetsOutputPath
  });
  const newDependencies = await dependenciesUpdater({
    projectFolder,
    dependenciesJsonPath: join2(template, "dependencies.json"),
    ...opts.importData?.packageName ? {
      dynamicPackages: { [opts.importData.packageName]: "^1.0.0" }
    } : {}
  });
  return { newDependencies, newFiles };
}

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-page/generate.ts
var DASHBOARD_PAGE_TEMPLATE = path.resolve(
  __dirname,
  "../templates/astro/dashboard-page"
);
async function generateDashboardPage(projectFolder, route, title) {
  const component = {
    compId: randomUUID(),
    compType: ComponentType.BACK_OFFICE_PAGE,
    compName: title,
    compData: {
      backOfficePage: {
        hostingPlatform: BackOfficeHostingPlatforms.BUSINESS_MANAGER,
        routePath: route,
        title
      }
    }
  };
  const cwd = getExtensionPath(projectFolder, route);
  const pageConfigJSON = toJsonString(component, { spaces: 2 });
  const relativeRoutePath = path.join(cwd, "page.tsx");
  return await componentGenerator({
    template: DASHBOARD_PAGE_TEMPLATE,
    projectFolder,
    cwd,
    data: {
      route,
      title,
      relativeRoutePath,
      pageConfigJSON
    }
  });
}

// ../cli-astro-commands/src/components/GenerateCommand/hooks/use-generation-task.ts
init_esm_shims();
var import_react2 = __toESM(require_react(), 1);
var import_variant = __toESM(require_lib(), 1);
var import_memoize = __toESM(require_memoize(), 1);
var GenerationTaskResultVariant = (0, import_variant.variant)({
  Success: (0, import_variant.fields)(),
  Error: {},
  Loading: {},
  NotRequested: {}
});
var useGenerationTask = (fn, predicates) => {
  const generationTask = useAsyncCallback(fn);
  (0, import_react2.useEffect)(() => {
    if (predicates.every(Boolean) && (0, import_variant.isType)(generationTask.status, AsyncCallbackStatus.NotRequested)) {
      void generationTask.execute();
    }
  }, [generationTask, predicates]);
  const successResult = (0, import_react2.useCallback)(
    (0, import_memoize.default)(
      (hasUpdatedDependencies, newFiles) => {
        return GenerationTaskResultVariant.Success({
          hasUpdatedDependencies,
          newFiles
        });
      }
    ),
    []
  );
  return (0, import_variant.match)(generationTask.status, {
    Success: ({ result }) => {
      return successResult(
        (result?.newDependencies.length ?? 0) > 0,
        result?.newFiles ?? []
      );
    },
    Error: () => GenerationTaskResultVariant.Error(),
    Loading: () => GenerationTaskResultVariant.Loading(),
    NotRequested: () => GenerationTaskResultVariant.NotRequested()
  });
};

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-page/steps.tsx
init_esm_shims();
var import_react4 = __toESM(require_react(), 1);
var import_lodash = __toESM(require_lodash(), 1);

// ../cli-astro-commands/src/components/GenerateCommand/Wizard.tsx
init_esm_shims();
var import_react3 = __toESM(require_react(), 1);
var WizardStepContext = (0, import_react3.createContext)(null);
function useWizardStep() {
  const context = (0, import_react3.useContext)(WizardStepContext);
  if (context == null) {
    throw new Error(
      "useWizardStep() cannot be used without an <WizardStepContext.Provider>"
    );
  }
  return context;
}
var WizardStep = ({ children, isActive, goToNextStep, completeWizard }) => /* @__PURE__ */ import_react3.default.createElement(
  WizardStepContext.Provider,
  {
    value: { isActive, goToNextStep, completeWizard }
  },
  children
);
var Wizard = ({ steps, name }) => {
  const bi = useWixCliAstroBi();
  const [activeStep, setActiveStep] = (0, import_react3.useState)(0);
  const [wizardCompleted, setWizardCompleted] = (0, import_react3.useState)(false);
  const stepCount = steps.length;
  const hasNextStep = activeStep < stepCount - 1;
  const hasPreviousStep = activeStep > 0;
  const goToNextStep = (0, import_react3.useCallback)(() => {
    if (hasNextStep && !wizardCompleted) {
      setActiveStep(activeStep + 1);
    }
  }, [activeStep, hasNextStep, wizardCompleted]);
  const goToPreviousStep = (0, import_react3.useCallback)(() => {
    if (hasPreviousStep) {
      setActiveStep(activeStep - 1);
      bi.cliStepBack({
        additionalInfo: {
          activeStep,
          name
        }
      });
    }
  }, [activeStep, hasPreviousStep, bi, name]);
  use_input_default(
    (_, key) => {
      if (key.escape) {
        goToPreviousStep();
      }
    },
    { isActive: !wizardCompleted }
  );
  const completeWizard = (0, import_react3.useCallback)(() => {
    setWizardCompleted(true);
  }, []);
  return /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, steps.slice(0, activeStep + 1).map((step, idx) => /* @__PURE__ */ import_react3.default.createElement(
    WizardStep,
    {
      key: idx,
      isActive: idx === activeStep,
      goToNextStep,
      completeWizard
    },
    step
  )), !wizardCompleted && hasPreviousStep && /* @__PURE__ */ import_react3.default.createElement(Box_default, { marginTop: 1 }, /* @__PURE__ */ import_react3.default.createElement(Text, { skin: "secondary" }, "Press ", /* @__PURE__ */ import_react3.default.createElement(Key, { value: "Esc", skin: "secondary" }), " to go back to the previous step")));
};

// ../cli-astro-commands/src/dev-center/components/validations/common.ts
init_esm_shims();
import { existsSync } from "node:fs";
var VALID_PATH_REGEX = /^[a-z0-9\-/]+$/;
var VALID_UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
function pathValidation(path7) {
  return VALID_PATH_REGEX.test(path7);
}
function pathAvailableValidation(projectFolder) {
  return function(folder) {
    return !existsSync(getExtensionPath(projectFolder, folder));
  };
}
function uuidValidation(id) {
  return VALID_UUID_REGEX.test(id);
}
function composeValidations(validations) {
  return (value) => {
    for (const [validation, reason] of validations) {
      if (!validation(value)) {
        return { valid: false, reason };
      }
    }
    return { valid: true };
  };
}
function useValidation(fn) {
  return (value) => {
    const result = fn(value);
    return result.valid || result.reason;
  };
}

// ../cli-astro-commands/src/dev-center/components/validations/dashboard-page.ts
init_esm_shims();
var PATH_INVALID_MESSAGE = "The page route must be a valid URL path ([a-z0-9-/]+) and must not start with a dot.";
var ROUTE_EXISTS_MESSAGE = "The page route must be unique, please choose a route that has not been used yet in your application.";
function createDashboardRouteValidation(projectFolder) {
  return composeValidations([
    [pathAvailableValidation(projectFolder), ROUTE_EXISTS_MESSAGE],
    [pathValidation, PATH_INVALID_MESSAGE]
  ]);
}

// ../cli-astro-commands/src/dev-center/components/validations/dashboard-plugin.ts
init_esm_shims();
function createDashboardPluginValidation(projectFolder) {
  return composeValidations([
    [
      pathAvailableValidation(projectFolder),
      "The plugin folder must be unique, please choose a name that has not been used yet in your application."
    ],
    [
      pathValidation,
      "The plugin folder must be a valid path ([a-z0-9-/]+) and must not start with a dot."
    ]
  ]);
}

// ../cli-astro-commands/src/dev-center/components/validations/dashboard-menu-plugin.ts
init_esm_shims();
function createDashboardMenuPluginValidation(projectFolder) {
  return composeValidations([
    [
      pathAvailableValidation(projectFolder),
      "The menu plugin folder must be unique, please choose a name that has not been used yet in your application."
    ],
    [
      pathValidation,
      "The menu plugin folder must be a valid path ([a-z0-9-/]+) and must not start with a dot."
    ]
  ]);
}

// ../cli-astro-commands/src/dev-center/components/validations/service-plugin.ts
init_esm_shims();
function createServicePluginValidation(projectFolder) {
  return composeValidations([
    [pathAvailableValidation(projectFolder), "Plugin name must be unique"],
    [
      (path7) => path7.length < 20,
      "Plugin name must be shorter than 20 characters"
    ],
    [
      pathValidation,
      "The plugin folder must be a valid path ([a-z0-9-/]+) and must not start with a dot."
    ]
  ]);
}

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-page/steps.tsx
var TitleStep = ({ onSubmit, pageTitle }) => {
  const bi = useWixCliAstroBi();
  const { isActive, goToNextStep } = useWizardStep();
  return /* @__PURE__ */ import_react4.default.createElement(
    TextInput,
    {
      isActive,
      label: "Page title:",
      placeholder: pageTitle ?? "My Page",
      onSubmit: (pageTitle2) => {
        bi.cliFlowStepAnswered({
          question: "Page title:",
          questionKey: "generate_command.dashboard_page.choose_title",
          answer: pageTitle2,
          additionalInfo: { extensionType: "dashboard page" }
        });
        onSubmit(pageTitle2);
        goToNextStep();
      }
    }
  );
};
var RouteStep = ({ pageRoute, pageTitle, onSubmit }) => {
  const { model } = useProjectModel();
  const bi = useWixCliAstroBi();
  const defaultPageRoute = (0, import_lodash.kebabCase)(pageTitle);
  const validateDashboardRoute = useValidation(
    createDashboardRouteValidation(model.projectFolder)
  );
  const { isActive, goToNextStep } = useWizardStep();
  return /* @__PURE__ */ import_react4.default.createElement(
    TextInput,
    {
      isActive,
      label: "Enter the route for the new page:",
      placeholder: pageRoute ?? defaultPageRoute,
      onSubmit: (value) => {
        bi.cliFlowStepAnswered({
          question: "Enter the route for the new page:",
          questionKey: "generate_command.dashboard_page.choose_route",
          answer: value,
          additionalInfo: { extensionType: "dashboard page" }
        });
        onSubmit(value);
        goToNextStep();
      },
      validate: validateDashboardRoute
    }
  );
};

// ../cli-astro-commands/src/components/GenerateCommand/CompleteGeneration.tsx
init_esm_shims();
var import_react7 = __toESM(require_react(), 1);
var import_variant3 = __toESM(require_lib(), 1);

// ../cli-astro-commands/src/components/GenerateCommand/InstallDependencies.tsx
init_esm_shims();
var import_react5 = __toESM(require_react(), 1);
var import_variant2 = __toESM(require_lib(), 1);
var InstallationStateVariant = (0, import_variant2.variant)({
  NotStarted: {},
  Skipped: (0, import_variant2.fields)(),
  Installing: {},
  Failure: {},
  Success: {}
});
var InstallDependencies = ({
  onFinish,
  onSubmit
}) => {
  const { model } = useProjectModel();
  const [installState, setInstallState] = (0, import_react5.useState)(
    InstallationStateVariant.NotStarted()
  );
  return /* @__PURE__ */ import_react5.default.createElement(import_react5.default.Fragment, null, /* @__PURE__ */ import_react5.default.createElement(Box_default, { marginBottom: 1 }, /* @__PURE__ */ import_react5.default.createElement(
    ConfirmInput,
    {
      label: "Would you like to install dependencies now?",
      initialValue: true,
      onSubmit: async (confirmed) => {
        const { projectFolder } = model;
        const repoType = await getRepoType(projectFolder);
        const pkgManager = await createPackageManager(repoType);
        onSubmit?.();
        if (confirmed) {
          setInstallState(InstallationStateVariant.Installing());
          try {
            await pkgManager.runInstall(projectFolder);
          } catch (e) {
            setInstallState(InstallationStateVariant.Failure());
            throw e;
          }
          setInstallState(InstallationStateVariant.Success());
        } else {
          setInstallState(
            InstallationStateVariant.Skipped({
              pkgManagerName: pkgManager.name
            })
          );
        }
        onFinish();
      }
    }
  )), (0, import_variant2.match)(installState, {
    NotStarted: () => null,
    Failure: () => null,
    Skipped: ({ pkgManagerName }) => /* @__PURE__ */ import_react5.default.createElement(Box_default, { flexDirection: "column" }, /* @__PURE__ */ import_react5.default.createElement(Text, { skin: "warning" }, "\u26A0\uFE0F New app dependencies have been added. Please run", " ", /* @__PURE__ */ import_react5.default.createElement(Text, { skin: "info" }, pkgManagerName, " install"), " before continuing to work.")),
    Installing: () => /* @__PURE__ */ import_react5.default.createElement(Spinner, { text: "Loading..." }),
    Success: () => /* @__PURE__ */ import_react5.default.createElement(Box_default, { flexDirection: "column" }, /* @__PURE__ */ import_react5.default.createElement(Text, null, "\u2705 Dependencies installed"))
  }));
};

// ../cli-astro-commands/src/components/GenerateCommand/GenerationSuccessMessage.tsx
init_esm_shims();
var import_react6 = __toESM(require_react(), 1);
import { dirname as dirname2 } from "node:path";
var GenerationSuccessMessage = ({
  extensionType,
  generatedFiles,
  learnMoreUrl,
  children
}) => {
  const folders = generatedFiles.reduce(
    (acc, file) => {
      const dir = dirname2(file);
      acc[dir] = [...acc[dir] ?? [], file];
      return acc;
    },
    {}
  );
  return /* @__PURE__ */ import_react6.default.createElement(
    Box_default,
    {
      borderColor: "blue",
      borderStyle: "round",
      flexDirection: "column",
      paddingY: 1,
      paddingX: 3,
      gap: 1,
      marginTop: 1
    },
    /* @__PURE__ */ import_react6.default.createElement(Box_default, { marginTop: -2, marginLeft: 0 }, /* @__PURE__ */ import_react6.default.createElement(Text, { skin: "question", bold: true }, "Generated Successfully")),
    /* @__PURE__ */ import_react6.default.createElement(Text, null, "\u{1F680} The new ", extensionType, " has been generated successfully."),
    children,
    Object.entries(folders).map(([folder, files]) => /* @__PURE__ */ import_react6.default.createElement(Folder, { key: folder, folderName: folder, files })),
    /* @__PURE__ */ import_react6.default.createElement(Text, null, /* @__PURE__ */ import_react6.default.createElement(Learn, null), " Learn more about Wix headless: ", /* @__PURE__ */ import_react6.default.createElement(Link, { url: learnMoreUrl }))
  );
};
var Folder = ({
  folderName,
  files
}) => {
  const { model } = useProjectModel();
  const relativeFilePath = (absolutePath) => absolutePath.replace(model.projectFolder, ".");
  return /* @__PURE__ */ import_react6.default.createElement(Box_default, { flexDirection: "column" }, /* @__PURE__ */ import_react6.default.createElement(Text, null, "\u{1F4C1} ", folderName), /* @__PURE__ */ import_react6.default.createElement(Box_default, { flexDirection: "column", marginLeft: 3, marginTop: 1 }, files.map((file) => /* @__PURE__ */ import_react6.default.createElement(Text, { key: file }, relativeFilePath(file)))));
};

// ../cli-astro-commands/src/components/GenerateCommand/CompleteGeneration.tsx
var CompleteGenerationMessage = (0, import_variant3.variant)({
  SuccessMessage: (0, import_variant3.fields)(),
  CustomSuccessMessage: (0, import_variant3.fields)()
});
var CompleteGeneration = ({
  generationTask,
  extensionType,
  route,
  successMessage
}) => {
  const { completeWizard } = useWizardStep();
  const [finishedInstallation, setFinishedInstallation] = (0, import_react7.useState)(false);
  const isInstallationNotNeeded = (0, import_variant3.isType)(generationTask, "Success") && !generationTask.hasUpdatedDependencies;
  (0, import_react7.useEffect)(() => {
    if (isInstallationNotNeeded) {
      completeWizard();
      setFinishedInstallation(true);
    }
  }, [isInstallationNotNeeded, completeWizard]);
  return (0, import_react7.useMemo)(
    () => (0, import_variant3.match)(generationTask, {
      Success: ({ hasUpdatedDependencies, newFiles }) => /* @__PURE__ */ import_react7.default.createElement(import_react7.default.Fragment, null, hasUpdatedDependencies && /* @__PURE__ */ import_react7.default.createElement(
        InstallDependencies,
        {
          onSubmit: () => completeWizard(),
          onFinish: () => setFinishedInstallation(true)
        }
      ), finishedInstallation && (0, import_variant3.match)(successMessage, {
        CustomSuccessMessage: ({ comp }) => comp,
        SuccessMessage: ({ learnMoreUrl }) => /* @__PURE__ */ import_react7.default.createElement(
          GenerationSuccessMessage,
          {
            extensionType,
            generatedFiles: newFiles,
            learnMoreUrl
          }
        )
      })),
      Error: () => null,
      Loading: () => /* @__PURE__ */ import_react7.default.createElement(Spinner, { text: `Generating ${extensionType} ${route}...` }),
      NotRequested: () => null
    }),
    [
      generationTask,
      extensionType,
      route,
      finishedInstallation,
      setFinishedInstallation,
      completeWizard,
      successMessage
    ]
  );
};

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-page/DashboardPage.tsx
var useGenerateDashboardPage = () => {
  const { model } = useProjectModel();
  const [pageTitle, setPageTitle] = (0, import_react8.useState)();
  const [pageRoute, setPageRoute] = (0, import_react8.useState)();
  const pageQuestionsAnswered = pageRoute && pageTitle;
  const generationTask = useGenerationTask(async () => {
    if (!pageQuestionsAnswered) {
      return;
    }
    return generateDashboardPage(model.projectFolder, pageRoute, pageTitle);
  }, [pageQuestionsAnswered]);
  return [
    /* @__PURE__ */ import_react8.default.createElement(TitleStep, { pageTitle, onSubmit: setPageTitle }),
    /* @__PURE__ */ import_react8.default.createElement(
      RouteStep,
      {
        pageTitle,
        pageRoute,
        onSubmit: setPageRoute
      }
    ),
    /* @__PURE__ */ import_react8.default.createElement(
      CompleteGeneration,
      {
        generationTask,
        extensionType: "dashboard page",
        successMessage: CompleteGenerationMessage.SuccessMessage({
          learnMoreUrl: "https://dev.wix.com/docs/go-headless"
        }),
        route: pageRoute
      }
    )
  ];
};

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-modal/DashboardModal.tsx
init_esm_shims();
var import_react10 = __toESM(require_react(), 1);

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-modal/generate.ts
init_esm_shims();
import path2 from "node:path";
import { randomUUID as randomUUID2 } from "node:crypto";
var DASHBOARD_MODAL_TEMPLATE = path2.resolve(
  __dirname,
  "../templates/astro/dashboard-modal"
);
async function generateDashboardModal(projectFolder, route, title) {
  const component = {
    compId: randomUUID2(),
    compType: ComponentType.BACK_OFFICE_MODAL,
    compName: title,
    compData: {
      backOfficeModal: {
        hostingPlatform: BackOfficeHostingPlatforms.BUSINESS_MANAGER,
        title,
        width: 550,
        height: 600
      }
    }
  };
  const cwd = getExtensionPath(projectFolder, route);
  const modalConfigJSON = toJsonString(component, { spaces: 2 });
  return await componentGenerator({
    template: DASHBOARD_MODAL_TEMPLATE,
    projectFolder,
    cwd,
    data: {
      modalId: component.compId,
      route,
      title,
      modalConfigJSON
    }
  });
}

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-modal/steps.tsx
init_esm_shims();
var import_react9 = __toESM(require_react(), 1);
var import_lodash2 = __toESM(require_lodash(), 1);
var ChooseTitleStep = ({
  onSubmit
}) => {
  const bi = useWixCliAstroBi();
  const { isActive, goToNextStep } = useWizardStep();
  return /* @__PURE__ */ import_react9.default.createElement(
    TextInput,
    {
      isActive,
      label: "Modal title:",
      placeholder: "My Modal",
      onSubmit: (modalTitle) => {
        bi.cliFlowStepAnswered({
          question: "Modal title:",
          questionKey: "generate_command.dashboard_modal.choose_title",
          answer: modalTitle,
          additionalInfo: { extensionType: "dashboard modal" }
        });
        onSubmit(modalTitle);
        goToNextStep();
      }
    }
  );
};
var ChooseFolderStep = ({ onSubmit, modalTitle, modalFolder }) => {
  const bi = useWixCliAstroBi();
  const { model } = useProjectModel();
  const { isActive, goToNextStep } = useWizardStep();
  const defaultModalFolder = (0, import_lodash2.kebabCase)(modalTitle);
  const validateDashboardFolder = useValidation(
    composeValidations([
      [
        pathAvailableValidation(model.projectFolder),
        "The modal folder must be unique, please choose a folder name that has not been used yet in your application."
      ],
      [
        pathValidation,
        "The modal folder must be a valid path ([a-z0-9-/]+) and must not start with a dot."
      ]
    ])
  );
  return /* @__PURE__ */ import_react9.default.createElement(
    TextInput,
    {
      isActive,
      label: "Enter the folder name for the new modal:",
      placeholder: modalFolder ?? defaultModalFolder,
      onSubmit: (value) => {
        bi.cliFlowStepAnswered({
          question: "Enter the folder name for the new modal:",
          questionKey: "generate_command.dashboard_modal.choose_folder",
          answer: value,
          additionalInfo: { extensionType: "dashboard modal" }
        });
        onSubmit(value);
        goToNextStep();
      },
      validate: validateDashboardFolder
    }
  );
};

// ../cli-astro-commands/src/components/GenerateCommand/dashboard-modal/DashboardModal.tsx
var useGenerateDashboardModal = () => {
  const { model } = useProjectModel();
  const [modalFolder, setModalFolder] = (0, import_react10.useState)();
  const [modalTitle, setModalTitle] = (0, import_react10.useState)();
  const modalQuestionsAnswered = modalFolder && modalTitle;
  const generationTask = useGenerationTask(async () => {
    if (!modalQuestionsAnswered) {
      return;
    }
    return generateDashboardModal(model.projectFolder, modalFolder, modalTitle);
  }, [modalQuestionsAnswered]);
  return [
    /* @__PURE__ */ import_react10.default.createElement(ChooseTitleStep, { onSubmit: setModalTitle }),
    /* @__PURE__ */ import_react10.default.createElement(
      ChooseFolderStep,
      {
        onSubmit: setModalFolder,
        modalTitle,
        modalFolder
      }
    ),
    /* @__PURE__ */ import_react10.default.createElement(
      CompleteGeneration,
      {
        generationTask,
        extensionType: "dashboard modal",
        successMessage: CompleteGenerationMessage.SuccessMessage({
          learnMoreUrl: "https://dev.wix.com/docs/go-headless"
        }),
        route: modalFolder
      }
    )
  ];
};

// ../cli-astro-commands/src/components/GenerateCommand/service-plugin/index.ts
init_esm_shims();

// ../cli-astro-commands/src/components/GenerateCommand/service-plugin/ServicePlugin.tsx
init_esm_shims();
var import_react12 = __toESM(require_react(), 1);

// ../cli-astro-commands/src/components/GenerateCommand/service-plugin/generate.ts
init_esm_shims();
import path3 from "node:path";
import { randomUUID as randomUUID3 } from "node:crypto";
var import_variant4 = __toESM(require_lib(), 1);
var SERVICE_PLUGIN_TEMPLATE = path3.resolve(
  __dirname,
  "../templates/astro/service-plugin"
);
async function generateServicePlugin(projectFolder, servicePluginType, name) {
  const cwd = getExtensionPath(projectFolder, name);
  const servicePluginConfig = (0, import_variant4.match)(servicePluginType, {
    ECOM_ADDITIONAL_FEES: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.ECOM_ADDITIONAL_FEES,
      compData: {
        ecomAdditionalFees: {}
      }
    }),
    ECOM_SHIPPING_RATES: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.ECOM_SHIPPING_RATES,
      compData: {
        ecomShippingRates: {
          name: "Shipping Rates Provider",
          description: "Short description about this shipping provider",
          fallbackDefinitionMandatory: false
        }
      }
    }),
    ECOM_DISCOUNTS_TRIGGER: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.ECOM_DISCOUNTS_TRIGGER,
      compData: {
        ecomDiscountsTrigger: {}
      }
    }),
    ECOM_VALIDATIONS: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.ECOM_VALIDATIONS,
      compData: {
        ecomValidations: {
          validateInCart: false
        }
      }
    }),
    ECOM_PAYMENT_SETTINGS: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.ECOM_PAYMENT_SETTINGS,
      compData: {
        ecomPaymentSettings: {
          fallbackValueForRequires3dSecure: false
        }
      }
    }),
    ECOM_RECOMMENDATIONS_PROVIDER: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.ECOM_RECOMMENDATIONS_PROVIDER,
      compData: {
        ecomRecommendationsProvider: {}
      }
    }),
    EXTERNAL_DATABASE_PROVIDER: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.EXTERNAL_DATABASE_PROVIDER,
      compData: {
        externalDatabaseProvider: {}
      }
    }),
    SEO_KEYWORDS_SUGGESTIONS: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.SEO_KEYWORDS_SUGGESTIONS,
      compData: {
        seoKeywordsSuggestions: {}
      }
    }),
    PREMIUM_CUSTOM_CHARGES: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.PREMIUM_CUSTOM_CHARGES,
      compData: {
        premiumCustomCharges: {}
      }
    }),
    GIFT_CARDS_PROVIDER: () => ({
      compName: name,
      compId: randomUUID3(),
      compType: ComponentType.GIFT_CARDS_PROVIDER,
      compData: {
        giftCardsProvider: {}
      }
    })
  });
  const servicePluginConfigJSON = toJsonString(servicePluginConfig, {
    spaces: 2
  });
  const servicePluginTypeLower = servicePluginType.toLowerCase().replaceAll("_", "-");
  return await componentGenerator({
    template: path3.join(SERVICE_PLUGIN_TEMPLATE, servicePluginTypeLower),
    projectFolder,
    cwd,
    data: {
      servicePluginConfigJSON
    }
  });
}

// ../cli-astro-commands/src/components/GenerateCommand/service-plugin/steps.tsx
init_esm_shims();
var import_react11 = __toESM(require_react(), 1);
var SelectServicePluginStep = ({ onSubmit, typeOption }) => {
  const bi = useWixCliAstroBi();
  const { isActive, goToNextStep } = useWizardStep();
  const generateServicePluginOptions = (0, import_react11.useMemo)(
    () => [
      {
        title: "Stores",
        items: [
          {
            title: "Ecom Additional Fees",
            value: ComponentType.ECOM_ADDITIONAL_FEES
          },
          {
            title: "Ecom Shipping Rates",
            value: ComponentType.ECOM_SHIPPING_RATES
          },
          {
            title: "Ecom Discount Triggers",
            value: ComponentType.ECOM_DISCOUNTS_TRIGGER
          },
          {
            title: "Ecom Validations",
            value: ComponentType.ECOM_VALIDATIONS
          },
          {
            title: "Ecom Payment Settings",
            value: ComponentType.ECOM_PAYMENT_SETTINGS
          },
          {
            title: "Ecom Gift Cards Provider",
            value: ComponentType.GIFT_CARDS_PROVIDER
          },
          {
            title: "Ecom Recommendations Provider",
            value: ComponentType.ECOM_RECOMMENDATIONS_PROVIDER
          }
        ]
      },
      {
        title: "Billing",
        items: [
          {
            title: "Custom Charges",
            value: ComponentType.PREMIUM_CUSTOM_CHARGES
          }
        ]
      },
      {
        title: "Data",
        items: [
          {
            title: "External Database Provider",
            value: ComponentType.EXTERNAL_DATABASE_PROVIDER
          }
        ]
      },
      {
        title: "Marketing",
        items: [
          {
            title: "Seo Keyword Suggestions",
            value: ComponentType.SEO_KEYWORDS_SUGGESTIONS
          }
        ]
      }
    ],
    []
  );
  const selectSupportedServicePlugin = (0, import_react11.useCallback)(
    (supportedServicePlugin) => {
      bi.cliFlowStepAnswered({
        question: "Which service plugin do you want to create",
        questionKey: "generate_command.service_plugin.choose_type",
        answer: supportedServicePlugin.title
      });
      onSubmit(supportedServicePlugin);
      goToNextStep();
    },
    [bi, onSubmit, goToNextStep]
  );
  return /* @__PURE__ */ import_react11.default.createElement(
    SelectGroupsInput,
    {
      value: !isActive && typeOption ? InputState.Submitted(typeOption) : InputState.NotSubmitted(typeOption),
      label: "Which service plugin do you want to create",
      groups: generateServicePluginOptions,
      onSubmit: selectSupportedServicePlugin,
      maxHeight: 14
    }
  );
};
var ChooseNameStep = ({ onSubmit, type, name }) => {
  const bi = useWixCliAstroBi();
  const { isActive, goToNextStep } = useWizardStep();
  const { model } = useProjectModel();
  const validateServicePluginFolder = useValidation(
    createServicePluginValidation(model.projectFolder)
  );
  return /* @__PURE__ */ import_react11.default.createElement(
    TextInput,
    {
      isActive,
      label: "How would you like to name your service plugin",
      placeholder: name ?? "my-service-plugin",
      onSubmit: (value) => {
        bi.cliFlowStepAnswered({
          question: "How would you like to name your service plugin",
          questionKey: "generate_command.service_plugin.choose_name",
          answer: value,
          additionalInfo: { servicePluginType: type }
        });
        onSubmit(value);
        goToNextStep();
      },
      validate: validateServicePluginFolder
    }
  );
};

// ../cli-astro-commands/src/components/GenerateCommand/service-plugin/ServicePlugin.tsx
var useGenerateServicePlugin = () => {
  const { model } = useProjectModel();
  const [typeOption, setTypeOption] = (0, import_react12.useState)();
  const [name, setName] = (0, import_react12.useState)();
  const generationTask = useGenerationTask(async () => {
    if (name && typeOption) {
      const result = await generateServicePlugin(
        model.projectFolder,
        typeOption.value,
        name
      );
      return result;
    }
  }, [name, typeOption]);
  return [
    /* @__PURE__ */ import_react12.default.createElement(
      SelectServicePluginStep,
      {
        onSubmit: setTypeOption,
        typeOption
      }
    ),
    /* @__PURE__ */ import_react12.default.createElement(ChooseNameStep, { onSubmit: setName, name, type: typeOption?.value }),
    /* @__PURE__ */ import_react12.default.createElement(
      CompleteGeneration,
      {
        generationTask,
        extensionType: "service plugin",
        successMessage: CompleteGenerationMessage.SuccessMessage({
          learnMoreUrl: "https://dev.wix.com/docs/go-headless"
        })
      }
    )
  ];
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/DashboardPlugin.tsx
init_esm_shims();
var import_react23 = __toESM(require_react(), 1);
var import_variant10 = __toESM(require_lib(), 1);

// ../extensions-data-client/src/index.ts
init_esm_shims();

// ../extensions-data-client/src/client.ts
init_esm_shims();

// ../extensions-data-client/src/data/ecom-required-apps.ts
init_esm_shims();
var ecomRequiredApps = {
  appId: "1380b703-ce81-ff05-f115-39571d94dfcd",
  requiredApps: [
    {
      appName: "Wix Stores",
      appId: "215238eb-22a5-4c36-9e7b-e7c08025e04e"
    },
    {
      appName: "Wix Bookings",
      appId: "13d21c63-b5ec-5912-8397-c3a5ddb27a97"
    },
    {
      appName: "Wix Restaurants Orders",
      appId: "9a5d83fd-8570-482e-81ab-cfa88942ee60"
    },
    {
      appName: "Wix Table Reservations",
      appId: "f9c07de2-5341-40c6-b096-8eb39de391fb"
    }
  ]
};

// ../extensions-data-client/src/client.ts
var getEcomRequiredApps = async () => {
  return ecomRequiredApps;
};

// ../extensions-data-client/src/useExtensionDataClient.tsx
init_esm_shims();
var import_react13 = __toESM(require_react(), 1);

// ../extensions-data-client/src/extension-data-client.ts
init_esm_shims();

// ../../node_modules/@wix/ambassador-auto-api-info-v1-sdk-slot-data/build/es/http.impl.js
init_esm_shims();
var _getSdkSlotDataRequest = {};
var _getSdkSlotDataResponse = {};
function resolveWixAutoApiInfoV1SdkSlotDataServiceUrl(opts) {
  var domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/_serverless/auto-api-info-service",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_serverless/auto-api-info-service",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_serverless/auto-api-info-service",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_serverless/auto-api-info-service",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_serverless/auto-api-info-service",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function getSdkSlotData(payload) {
  var _a = serializer(_getSdkSlotDataRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_getSdkSlotDataResponse, {}).fromJSON;
  function __getSdkSlotData(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.auto_api_info.v1.sdk_slot_data",
      method: "GET",
      methodFqn: "wix.auto_api_info.v1.SdkSlotDataService.GetSdkSlotData",
      url: resolveWixAutoApiInfoV1SdkSlotDataServiceUrl({
        protoPath: "/v1/sdk-slot-data/{appId}/{slotId}",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes
    };
    return metadata;
  }
  __getSdkSlotData.fromReq = fromReq;
  __getSdkSlotData.__isAmbassador = true;
  return __getSdkSlotData;
}

// ../../node_modules/@wix/ambassador-devcenter-components-search-v1-components-search/build/es/http.impl.js
init_esm_shims();
var __Array = {
  checkboxGroupOptions: "_checkboxGroup",
  tagsOptions: "_tags",
  validation: "_arrayType"
};
var __Boolean = { checkboxOptions: "_checkbox" };
var __Number = {
  numberInputOptions: "_numberInput",
  ratingInputOptions: "_ratingInput",
  validation: "_numberType"
};
var __Object = { validation: "_objectType" };
var __String = {
  textInputOptions: "_textInput",
  radioGroupOptions: "_radioGroup",
  dropdownOptions: "_dropdown",
  dateTimeOptions: "_dateTimeInput",
  phoneInputOptions: "_phoneInput",
  dateInputOptions: "_dateInput",
  timeInputOptions: "_timeInput",
  datePickerOptions: "_datePicker"
};
var _actionProviderSPIConfig = { actionConfig: "_actionSPIConfig" };
var _actionSPIConfig = { icon: "_commonImage" };
var _address = { multilineAddressOptions: "_multilineAddress" };
var _adminConfigurableTextInput = {
  requiredSettings: "google.protobuf.FieldMask",
  adminConfigurableSettings: "google.protobuf.FieldMask"
};
var _andCondition = { conditions: "_conditionNode" };
var _api_Number = {
  minimum: "google.protobuf.FloatValue",
  maximum: "google.protobuf.FloatValue",
  multipleOf: "google.protobuf.FloatValue"
};
var _apiArrayItems = { data: "_dataItems", dataItem: "_dataItem" };
var _appEmbedData = { image: "_media" };
var _appointment = { description: "_richContent" };
var _arrayItems = {
  numberOptions: "_numberType",
  objectOptions: "_objectType"
};
var _arrayType = { items: "_arrayItems" };
var _audioData = { audio: "_media", coverImage: "_media" };
var _authenticatorConfig = { expectedInputs: "_expectedInputs" };
var _background = { image: "_media" };
var _breakPoint = { items: "_itemLayout" };
var _breakpointPresetStyleOverrides = {
  default: "_presetStyleOverrides",
  small: "_presetStyleOverrides"
};
var _checkbox = { label: "_richContent" };
var _checkboxGroup = {
  description: "_richContent",
  options: "_option",
  media: "_mediaItem"
};
var _commonImage = {
  urlExpirationDate: "google.protobuf.Timestamp",
  focalPoint: "_focalPoint"
};
var _componentData = {
  widgetComponentData: "_widgetComponentData",
  widgetOutOfIframeData: "_widgetOutOfIframeComponentData",
  studioWidgetComponentData: "_studioWidgetComponentData",
  shippingLabelCarrier: "_shippingLabelCarrierSpiConfig",
  fictionalShippingProvider: "_shippingProviderConfig",
  automationsActionProvider: "_actionProviderSPIConfig",
  identityAuthenticator: "_authenticatorConfig",
  devCenterTestingComponent: "_devCenterTestingComponentData",
  multilingualTranslationSchema: "_multilingualTranslationSchema",
  formTemplate: "_formTemplate",
  functionsShopPriceProvider: "_functionsShopPriceSpiConfig",
  function: "_function",
  papiProvider: "_pluginConfig",
  multilingualTranslationSchemaGroup: "_schemaGroup",
  editorReactComponent: "_editorReactComponent"
};
var _componentResult = { component: "_runtimeComponent" };
var _conditionNode = { and: "_andCondition", or: "_orCondition" };
var _cssCustomPropertyItem = { number: "_cssNumber" };
var _cssNumber = {
  minimum: "google.protobuf.FloatValue",
  maximum: "google.protobuf.FloatValue",
  multipleOf: "google.protobuf.FloatValue"
};
var _dataItem = {
  number: "_api_Number",
  arrayItems: "_apiArrayItems",
  data: "_dataItems"
};
var _dataItems = { items: "Map#_dataItem" };
var _dateInput = { description: "_richContent", media: "_mediaItem" };
var _datePicker = { description: "_richContent", media: "_mediaItem" };
var _dateTimeInput = { description: "_richContent", media: "_mediaItem" };
var _description = { representativeImage: "_commonImage" };
var _design = { poll: "_pollDesign" };
var _devCenterTestingComponentData = {
  translatableMessageInOneOf: "_messageContainingTranslatables",
  translatableMessage: "_messageContainingTranslatables",
  mapOfTranslatableMessages: "Map#_messageContainingTranslatables",
  translatableRichContent: "_richContent",
  nonTranslatableRichContent: "_richContent",
  richContentMap: "Map#_richContent"
};
var _displayField = { richContentOptions: "_richContentOptions" };
var _donationInput = { description: "_richContent", media: "_mediaItem" };
var _dropdown = { description: "_richContent", media: "_mediaItem" };
var _editorElement = {
  style: "Map#_styleItem",
  data: "Map#_dataItem",
  elements: "Map#_elementItem",
  presets: "Map#_presetItem",
  cssCustomProperties: "Map#_cssCustomPropertyItem"
};
var _editorPresence = { presetsEditorPresence: "_presetEditorPresence" };
var _editorReactComponent = { editorElement: "_editorElement" };
var _elementItem = {
  inlineElement: "_inlineElement",
  refElement: "_refElement"
};
var _elementStyleDefaults = { elements: "Map#_elementStyleDefaults" };
var _elementStyleOverrides = { elements: "Map#_elementStyleOverrides" };
var _expectedInputs = {
  expectedStartInputs: "_predefinedExpectedInput",
  expectedVerifyInputs: "_predefinedExpectedInput"
};
var _field = { inputOptions: "_inputField", displayOptions: "_displayField" };
var _fileUpload = { description: "_richContent", media: "_mediaItem" };
var _fixedPayment = { description: "_richContent", media: "_mediaItem" };
var _focalPoint = { x: "DOUBLE", y: "DOUBLE" };
var _formLayout = {
  large: "_breakPoint",
  medium: "_breakPoint",
  small: "_breakPoint"
};
var _formTemplate = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp",
  fields: "_field",
  deletedFields: "_field",
  steps: "_step",
  rules: "_v2Rule",
  submitSettings: "_submitSettings"
};
var _function = { description: "_description" };
var _functionsShopPriceSpiConfig = {
  shopNumber: "google.protobuf.DoubleValue"
};
var _galleryData = { items: "_item", options: "_galleryOptions" };
var _galleryOptions = { item: "_itemStyle" };
var _group = { items: "_itemLayout" };
var _image = { urlExpirationDate: "google.protobuf.Timestamp" };
var _imageData = { image: "_media" };
var _inlineElement = {
  style: "Map#_styleItem",
  data: "Map#_dataItem",
  elements: "Map#_elementItem",
  presets: "Map#_presetItem",
  cssCustomProperties: "Map#_cssCustomPropertyItem"
};
var _inputField = {
  stringOptions: "__String",
  numberOptions: "__Number",
  booleanOptions: "__Boolean",
  arrayOptions: "__Array",
  objectOptions: "__Object",
  wixFileOptions: "_wixFile",
  paymentOptions: "_payment",
  multilineAddressOptions: "_address",
  schedulingOptions: "_scheduling",
  addressOptions: "_address"
};
var _item = { image: "_itemImage", video: "_video" };
var _itemImage = { media: "_media" };
var _itemLayout = { group: "_group" };
var _itemStyle = { ratio: "google.protobuf.DoubleValue" };
var _listComponentByComponentTypeRequest = {};
var _listComponentByComponentTypeResponse = {
  components: "_componentResult"
};
var _mapData = { mapSettings: "_mapSettings" };
var _mapSettings = {
  lat: "google.protobuf.DoubleValue",
  lng: "google.protobuf.DoubleValue"
};
var _media = { duration: "google.protobuf.DoubleValue" };
var _mediaItem = { image: "_upstreamWixCommonImage" };
var _messageContainingTranslatables = {
  innerTranslatableRichContent: "_richContent"
};
var _multilineAddress = { description: "_richContent" };
var _multilingualTranslationSchema = { referenceData: "_schema" };
var _node = {
  galleryData: "_galleryData",
  imageData: "_imageData",
  mapData: "_mapData",
  pollData: "_pollData",
  appEmbedData: "_appEmbedData",
  videoData: "_videoData",
  audioData: "_audioData",
  nodes: "_node"
};
var _numberInput = {
  default: "google.protobuf.DoubleValue",
  description: "_richContent",
  media: "_mediaItem"
};
var _numberType = {
  maximum: "google.protobuf.DoubleValue",
  minimum: "google.protobuf.DoubleValue",
  multipleOf: "google.protobuf.DoubleValue",
  enum: "google.protobuf.DoubleValue"
};
var _objectType = { properties: "Map#_propertiesType" };
var _option = { media: "_mediaItem" };
var _orCondition = { conditions: "_conditionNode" };
var _packageDimension = {
  width: "DOUBLE",
  length: "DOUBLE",
  height: "google.protobuf.DoubleValue"
};
var _packageType = { dimension: "_packageDimension", image: "_image" };
var _payment = {
  checkboxGroupOptions: "_productCheckboxGroup",
  donationInputOptions: "_donationInput",
  paymentInputOptions: "_paymentInput",
  fixedPaymentOptions: "_fixedPayment"
};
var _paymentInput = {
  default: "google.protobuf.DoubleValue",
  description: "_richContent",
  media: "_mediaItem"
};
var _phoneInput = { description: "_richContent", media: "_mediaItem" };
var _pluginConfig = { startingEnforcementDate: "google.protobuf.Timestamp" };
var _poll = { image: "_media", options: "_pollOption" };
var _pollData = { poll: "_poll", design: "_design" };
var _pollDesign = { background: "_background" };
var _pollOption = { image: "_media" };
var _predefinedExpectedInput = {
  configuration: "_predefinedExpectedInputConfiguration"
};
var _predefinedExpectedInputConfiguration = {
  textInput: "_adminConfigurableTextInput"
};
var _presetEditorPresence = { wixMediaThumbnail: "_commonImage" };
var _presetElementDefaults = { elements: "Map#_presetInnerElementDefaults" };
var _presetInnerElementDefaults = {
  elements: "Map#_presetInnerElementDefaults"
};
var _presetItem = {
  styleDefaults: "_presetStyleDefaults",
  styleOverrides: "_breakpointPresetStyleOverrides",
  presetDefaults: "_presetElementDefaults"
};
var _presetStyleDefaults = { elements: "Map#_elementStyleDefaults" };
var _presetStyleOverrides = { elements: "Map#_elementStyleOverrides" };
var _productCheckboxGroup = {
  description: "_richContent",
  options: "_productCheckboxGroupOption",
  media: "_mediaItem"
};
var _productCheckboxGroupOption = { media: "_mediaItem" };
var _propertiesType = {
  numberOptions: "_numberType",
  arrayOptions: "_arrayType"
};
var _radioGroup = { description: "_richContent", media: "_mediaItem" };
var _ratingInput = { description: "_richContent", media: "_mediaItem" };
var _refElement = {
  resolvedElement: "_inlineElement",
  elementsDefaults: "Map#_refInnerElementDefaults",
  elements: "Map#_refInnerElementDefaults"
};
var _refInnerElementDefaults = { elements: "Map#_refInnerElementDefaults" };
var _richContent = { nodes: "_node", metadata: "_v1Metadata" };
var _richContentOptions = { richContent: "_richContent" };
var _runtimeComponent = { data: "_componentData" };
var _scheduling = { appointmentOptions: "_appointment" };
var _schema = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp",
  fields: "Map#_v1SchemaField"
};
var _schemaGroup = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
var _shippingLabelCarrierSpiConfig = { packageTypes: "_packageType" };
var _shippingProviderConfig = { shippingPrice: "DOUBLE" };
var _signature = { description: "_richContent", media: "_mediaItem" };
var _step = { layout: "_formLayout" };
var _studioWidgetComponentData = {
  widgetDisplay: "_widgetDisplay",
  editorPresence: "_editorPresence"
};
var _styleItem = { number: "_cssNumber" };
var _submitSettings = { thankYouMessageOptions: "_thankYouMessageOptions" };
var _tags = {
  description: "_richContent",
  options: "_tagsOption",
  media: "_mediaItem"
};
var _tagsOption = { media: "_mediaItem" };
var _textInput = { description: "_richContent", media: "_mediaItem" };
var _thankYouMessageOptions = { richContent: "_richContent" };
var _timeInput = { description: "_richContent", media: "_mediaItem" };
var _upstreamWixCommonImage = {
  urlExpirationDate: "google.protobuf.Timestamp"
};
var _v1Metadata = {
  createdTimestamp: "google.protobuf.Timestamp",
  updatedTimestamp: "google.protobuf.Timestamp"
};
var _v1SchemaField = { index: "google.protobuf.DoubleValue" };
var _v2Rule = { expression: "_conditionNode" };
var _video = { media: "_media", thumbnail: "_media" };
var _videoData = { video: "_media", thumbnail: "_media" };
var _widgetComponentData = { widgetDisplay: "_widgetDisplay" };
var _widgetDisplay = { price: "google.protobuf.FloatValue" };
var _widgetOutOfIframeComponentData = { widgetData: "_widgetComponentData" };
var _wixFile = {
  fileUploadOptions: "_fileUpload",
  signatureOptions: "_signature"
};
function resolveWixDevcenterComponentsSearchV1ComponentsSearchServiceUrl(opts) {
  var domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/components-search",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/components-search",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/components-search",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/components-search",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function listComponentByComponentType(payload) {
  var _a = serializer(_listComponentByComponentTypeRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_listComponentByComponentTypeResponse, {
    __Array,
    __Boolean,
    __Number,
    __Object,
    __String,
    _actionProviderSPIConfig,
    _actionSPIConfig,
    _address,
    _adminConfigurableTextInput,
    _andCondition,
    _apiArrayItems,
    _api_Number,
    _appEmbedData,
    _appointment,
    _arrayItems,
    _arrayType,
    _audioData,
    _authenticatorConfig,
    _background,
    _breakPoint,
    _breakpointPresetStyleOverrides,
    _checkbox,
    _checkboxGroup,
    _commonImage,
    _componentData,
    _componentResult,
    _conditionNode,
    _cssCustomPropertyItem,
    _cssNumber,
    _dataItem,
    _dataItems,
    _dateInput,
    _datePicker,
    _dateTimeInput,
    _description,
    _design,
    _devCenterTestingComponentData,
    _displayField,
    _donationInput,
    _dropdown,
    _editorElement,
    _editorPresence,
    _editorReactComponent,
    _elementItem,
    _elementStyleDefaults,
    _elementStyleOverrides,
    _expectedInputs,
    _field,
    _fileUpload,
    _fixedPayment,
    _focalPoint,
    _formLayout,
    _formTemplate,
    _function,
    _functionsShopPriceSpiConfig,
    _galleryData,
    _galleryOptions,
    _group,
    _image,
    _imageData,
    _inlineElement,
    _inputField,
    _item,
    _itemImage,
    _itemLayout,
    _itemStyle,
    _mapData,
    _mapSettings,
    _media,
    _mediaItem,
    _messageContainingTranslatables,
    _multilineAddress,
    _multilingualTranslationSchema,
    _node,
    _numberInput,
    _numberType,
    _objectType,
    _option,
    _orCondition,
    _packageDimension,
    _packageType,
    _payment,
    _paymentInput,
    _phoneInput,
    _pluginConfig,
    _poll,
    _pollData,
    _pollDesign,
    _pollOption,
    _predefinedExpectedInput,
    _predefinedExpectedInputConfiguration,
    _presetEditorPresence,
    _presetElementDefaults,
    _presetInnerElementDefaults,
    _presetItem,
    _presetStyleDefaults,
    _presetStyleOverrides,
    _productCheckboxGroup,
    _productCheckboxGroupOption,
    _propertiesType,
    _radioGroup,
    _ratingInput,
    _refElement,
    _refInnerElementDefaults,
    _richContent,
    _richContentOptions,
    _runtimeComponent,
    _scheduling,
    _schema,
    _schemaGroup,
    _shippingLabelCarrierSpiConfig,
    _shippingProviderConfig,
    _signature,
    _step,
    _studioWidgetComponentData,
    _styleItem,
    _submitSettings,
    _tags,
    _tagsOption,
    _textInput,
    _thankYouMessageOptions,
    _timeInput,
    _upstreamWixCommonImage,
    _v1Metadata,
    _v1SchemaField,
    _v2Rule,
    _video,
    _videoData,
    _widgetComponentData,
    _widgetDisplay,
    _widgetOutOfIframeComponentData,
    _wixFile
  }).fromJSON;
  function __listComponentByComponentType(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.components_search.v1.components_search",
      method: "POST",
      methodFqn: "wix.devcenter.components.search.v1.ComponentsSearchService.ListComponentByComponentType",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixDevcenterComponentsSearchV1ComponentsSearchServiceUrl({
        protoPath: "/v1/component-search/list-by-component-type",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __listComponentByComponentType.fromReq = fromReq;
  __listComponentByComponentType.__isAmbassador = true;
  return __listComponentByComponentType;
}

// ../../node_modules/@wix/ambassador-devcenter-components-search-v1-components-search/build/es/types.impl.js
init_esm_shims();
var VersioningMode;
(function(VersioningMode2) {
  VersioningMode2["DEFAULT"] = "DEFAULT";
  VersioningMode2["GREATER_THAN"] = "GREATER_THAN";
  VersioningMode2["GREATER_OR_EQUAL"] = "GREATER_OR_EQUAL";
})(VersioningMode || (VersioningMode = {}));
var ComponentType2;
(function(ComponentType4) {
  ComponentType4["NONE"] = "NONE";
  ComponentType4["STUDIO"] = "STUDIO";
  ComponentType4["PLATFORM"] = "PLATFORM";
  ComponentType4["WORKER"] = "WORKER";
  ComponentType4["DASHBOARD"] = "DASHBOARD";
  ComponentType4["WIDGET"] = "WIDGET";
  ComponentType4["PAGE"] = "PAGE";
  ComponentType4["DASHBOARD_PLATFORM"] = "DASHBOARD_PLATFORM";
  ComponentType4["STUDIO_WIDGET"] = "STUDIO_WIDGET";
  ComponentType4["EMBEDDED_SCRIPT"] = "EMBEDDED_SCRIPT";
  ComponentType4["EXTENSION"] = "EXTENSION";
  ComponentType4["SNIPPET_SOLUTION"] = "SNIPPET_SOLUTION";
  ComponentType4["DATA_COMPONENT"] = "DATA_COMPONENT";
  ComponentType4["WEB"] = "WEB";
  ComponentType4["DC_CONFIG"] = "DC_CONFIG";
  ComponentType4["WIDGET_OUT_OF_IFRAME"] = "WIDGET_OUT_OF_IFRAME";
  ComponentType4["PAGE_OUT_OF_IFRAME"] = "PAGE_OUT_OF_IFRAME";
  ComponentType4["STATIC_FILE"] = "STATIC_FILE";
  ComponentType4["APP_CONFIG"] = "APP_CONFIG";
  ComponentType4["MULTIPLE_DASHBOARDS"] = "MULTIPLE_DASHBOARDS";
  ComponentType4["PAYMENTS_GATEWAY"] = "PAYMENTS_GATEWAY";
  ComponentType4["CODE_PACKAGE"] = "CODE_PACKAGE";
  ComponentType4["AUTOMATION_TRIGGER"] = "AUTOMATION_TRIGGER";
  ComponentType4["INVOICES_ACTIONS"] = "INVOICES_ACTIONS";
  ComponentType4["DASHBOARD_APPLICATION"] = "DASHBOARD_APPLICATION";
  ComponentType4["CONTACT_LABELS"] = "CONTACT_LABELS";
  ComponentType4["WIDGET_PLUGIN"] = "WIDGET_PLUGIN";
  ComponentType4["CROSS_SELL"] = "CROSS_SELL";
  ComponentType4["LOCAL_DELIVERY"] = "LOCAL_DELIVERY";
  ComponentType4["PAYMENT_PROVIDER"] = "PAYMENT_PROVIDER";
  ComponentType4["ECOM_MEMBERSHIPS"] = "ECOM_MEMBERSHIPS";
  ComponentType4["ECOM_LINE_ITEMS_ENRICHER"] = "ECOM_LINE_ITEMS_ENRICHER";
  ComponentType4["ECOM_SHIPPING_RATES"] = "ECOM_SHIPPING_RATES";
  ComponentType4["SHIPPING_LABEL_CARRIER"] = "SHIPPING_LABEL_CARRIER";
  ComponentType4["RESTAURANTS_POS"] = "RESTAURANTS_POS";
  ComponentType4["FICTIONAL_SHIPPING_PROVIDER"] = "FICTIONAL_SHIPPING_PROVIDER";
  ComponentType4["ALERT_ENRICHER"] = "ALERT_ENRICHER";
  ComponentType4["DATA_EXTENSIONS"] = "DATA_EXTENSIONS";
  ComponentType4["GENERIC_HOOKS"] = "GENERIC_HOOKS";
  ComponentType4["AUTOMATIONS_ACTION_PROVIDER"] = "AUTOMATIONS_ACTION_PROVIDER";
  ComponentType4["ECOM_CATALOG"] = "ECOM_CATALOG";
  ComponentType4["BACK_OFFICE_EXTENSION_CONTAINER"] = "BACK_OFFICE_EXTENSION_CONTAINER";
  ComponentType4["BACK_OFFICE_EXTENSION"] = "BACK_OFFICE_EXTENSION";
  ComponentType4["AUTOMATIONS_TRIGGER_PROVIDER"] = "AUTOMATIONS_TRIGGER_PROVIDER";
  ComponentType4["IDENTITY_PRE_REGISTRATION"] = "IDENTITY_PRE_REGISTRATION";
  ComponentType4["PREMIUM_PRODUCTS_PATHS"] = "PREMIUM_PRODUCTS_PATHS";
  ComponentType4["ECOM_CUSTOM_SCOPE"] = "ECOM_CUSTOM_SCOPE";
  ComponentType4["GIFT_CARDS_PROVIDER"] = "GIFT_CARDS_PROVIDER";
  ComponentType4["DEALER_EXTERNAL_FILTER_PROVIDER"] = "DEALER_EXTERNAL_FILTER_PROVIDER";
  ComponentType4["ECOM_DROPSHIPPING_PROVIDER"] = "ECOM_DROPSHIPPING_PROVIDER";
  ComponentType4["INVOICES_PROVIDER"] = "INVOICES_PROVIDER";
  ComponentType4["SEO_KEYWORDS_SUGGESTIONS"] = "SEO_KEYWORDS_SUGGESTIONS";
  ComponentType4["ECOM_DISCOUNTS_TRIGGER"] = "ECOM_DISCOUNTS_TRIGGER";
  ComponentType4["MULTILINGUAL_CONTENT_PROVIDER"] = "MULTILINGUAL_CONTENT_PROVIDER";
  ComponentType4["APPLICATION_AUTOMATION"] = "APPLICATION_AUTOMATION";
  ComponentType4["BACK_OFFICE_SIDEBAR_CATEGORY"] = "BACK_OFFICE_SIDEBAR_CATEGORY";
  ComponentType4["BACK_OFFICE_PAGE"] = "BACK_OFFICE_PAGE";
  ComponentType4["ECOM_ADDITIONAL_FEES"] = "ECOM_ADDITIONAL_FEES";
  ComponentType4["PING_USER_NOTIFICATION"] = "PING_USER_NOTIFICATION";
  ComponentType4["ECOM_RECOMMENDATIONS_PROVIDER"] = "ECOM_RECOMMENDATIONS_PROVIDER";
  ComponentType4["BOOKINGS_PRICING_PROVIDER"] = "BOOKINGS_PRICING_PROVIDER";
  ComponentType4["IDENTITY_AUTHENTICATOR"] = "IDENTITY_AUTHENTICATOR";
  ComponentType4["IDENTITY_IDP_CONNECTOR"] = "IDENTITY_IDP_CONNECTOR";
  ComponentType4["ITEMS_SELECTION_PROVIDER"] = "ITEMS_SELECTION_PROVIDER";
  ComponentType4["PORTFOLIO_SYNCED_PROJECTS_PROVIDER"] = "PORTFOLIO_SYNCED_PROJECTS_PROVIDER";
  ComponentType4["COMMUNICATION_CHANNEL"] = "COMMUNICATION_CHANNEL";
  ComponentType4["IDENTITY_POST_LOGIN"] = "IDENTITY_POST_LOGIN";
  ComponentType4["BACK_OFFICE_WIDGET"] = "BACK_OFFICE_WIDGET";
  ComponentType4["SOCIAL_MARKETING_DESIGN"] = "SOCIAL_MARKETING_DESIGN";
  ComponentType4["FORMS_SUBMISSIONS_PROVIDER"] = "FORMS_SUBMISSIONS_PROVIDER";
  ComponentType4["WIX_OFFERING"] = "WIX_OFFERING";
  ComponentType4["DEV_CENTER_TESTING_COMPONENT"] = "DEV_CENTER_TESTING_COMPONENT";
  ComponentType4["COMPONENTS_VALIDATOR_PROVIDER"] = "COMPONENTS_VALIDATOR_PROVIDER";
  ComponentType4["COMPONENTS_TRANSLATIONS_ADDITIONAL_FIELDS_PROVIDER"] = "COMPONENTS_TRANSLATIONS_ADDITIONAL_FIELDS_PROVIDER";
  ComponentType4["FORMS_SCHEMA_PROVIDER"] = "FORMS_SCHEMA_PROVIDER";
  ComponentType4["BOOKINGS_EXTERNAL_CALENDAR_PROVIDER"] = "BOOKINGS_EXTERNAL_CALENDAR_PROVIDER";
  ComponentType4["ECOM_DEFAULT_TAXATION_CATEGORY"] = "ECOM_DEFAULT_TAXATION_CATEGORY";
  ComponentType4["VIEWER_DYNAMIC_SITE_STRUCTURE_PROVIDER"] = "VIEWER_DYNAMIC_SITE_STRUCTURE_PROVIDER";
  ComponentType4["PING_UOU_NOTIFICATION"] = "PING_UOU_NOTIFICATION";
  ComponentType4["HEADLESS_OAUTH"] = "HEADLESS_OAUTH";
  ComponentType4["ECOM_TAX_CALCULATOR_SPI"] = "ECOM_TAX_CALCULATOR_SPI";
  ComponentType4["COMMENTS_MODERATION_PROVIDER"] = "COMMENTS_MODERATION_PROVIDER";
  ComponentType4["GRID_APP_FILES_TRANSFORMER"] = "GRID_APP_FILES_TRANSFORMER";
  ComponentType4["BENEFIT_PROGRAMS_POLICY_PROVIDER"] = "BENEFIT_PROGRAMS_POLICY_PROVIDER";
  ComponentType4["PREMIUM_CUSTOM_CHARGES"] = "PREMIUM_CUSTOM_CHARGES";
  ComponentType4["ECOM_VALIDATIONS"] = "ECOM_VALIDATIONS";
  ComponentType4["COMPONENT_REFERENCE_DATA_PROVIDER"] = "COMPONENT_REFERENCE_DATA_PROVIDER";
  ComponentType4["WIX_REVIEWS_PRODUCT_CATALOG"] = "WIX_REVIEWS_PRODUCT_CATALOG";
  ComponentType4["SOCIAL_MARKETING_DESIGNS_PROVIDER"] = "SOCIAL_MARKETING_DESIGNS_PROVIDER";
  ComponentType4["GOOGLE_BUSINESS_PROFILE_FEATURE_PROVIDER"] = "GOOGLE_BUSINESS_PROFILE_FEATURE_PROVIDER";
  ComponentType4["COMMENTS_FILTER_PROVIDER"] = "COMMENTS_FILTER_PROVIDER";
  ComponentType4["BILLING_TAX_ID_VALIDATOR"] = "BILLING_TAX_ID_VALIDATOR";
  ComponentType4["PING_SETTINGS_GROUP"] = "PING_SETTINGS_GROUP";
  ComponentType4["FORMS_SPAM_SUBMISSIONS_PROVIDER"] = "FORMS_SPAM_SUBMISSIONS_PROVIDER";
  ComponentType4["EDITOR_ADDON"] = "EDITOR_ADDON";
  ComponentType4["EXTERNAL_DATABASE_PROVIDER"] = "EXTERNAL_DATABASE_PROVIDER";
  ComponentType4["ECOM_PAYMENT_SETTINGS"] = "ECOM_PAYMENT_SETTINGS";
  ComponentType4["NOTIFICATION_TOPIC"] = "NOTIFICATION_TOPIC";
  ComponentType4["NOTIFICATION_PREFERENCES_FILTER_PROVIDER"] = "NOTIFICATION_PREFERENCES_FILTER_PROVIDER";
  ComponentType4["BOOKINGS_RESOURCE_TYPES_PROVIDER"] = "BOOKINGS_RESOURCE_TYPES_PROVIDER";
  ComponentType4["PRICING_PLANS_FORM_CONFIGURATION"] = "PRICING_PLANS_FORM_CONFIGURATION";
  ComponentType4["USER_NOTIFICATION"] = "USER_NOTIFICATION";
  ComponentType4["CONTACT_NOTIFICATION"] = "CONTACT_NOTIFICATION";
  ComponentType4["UNIFIED_PAGE"] = "UNIFIED_PAGE";
  ComponentType4["AVAILABILITY_TIME_SLOTS_CONFIGURATION_PROVIDER"] = "AVAILABILITY_TIME_SLOTS_CONFIGURATION_PROVIDER";
  ComponentType4["PROPOSAL_EDITOR_PROVIDER"] = "PROPOSAL_EDITOR_PROVIDER";
  ComponentType4["CUSTOM_TABLE_RESERVATIONS_PROVIDER"] = "CUSTOM_TABLE_RESERVATIONS_PROVIDER";
  ComponentType4["COMMENTS_CONTEXT_PROVIDER"] = "COMMENTS_CONTEXT_PROVIDER";
  ComponentType4["FORMS_SPAM_SUBMISSION_REPORTS_PROVIDER"] = "FORMS_SPAM_SUBMISSION_REPORTS_PROVIDER";
  ComponentType4["AUTOMATIONS_VELO_ACTION_PROVIDER"] = "AUTOMATIONS_VELO_ACTION_PROVIDER";
  ComponentType4["CALENDAR_EVENT_TYPE_PROVIDER"] = "CALENDAR_EVENT_TYPE_PROVIDER";
  ComponentType4["RESERVED"] = "RESERVED";
  ComponentType4["SMS_ACTION_MESSAGE"] = "SMS_ACTION_MESSAGE";
  ComponentType4["BOOKING_POLICY_PROVIDER"] = "BOOKING_POLICY_PROVIDER";
  ComponentType4["MULTI_SERVICE_BOOKING_POLICY_PROVIDER"] = "MULTI_SERVICE_BOOKING_POLICY_PROVIDER";
  ComponentType4["AI_ASSISTANT"] = "AI_ASSISTANT";
  ComponentType4["FORMS_SUBMISSIONS_EXTENSION_PROVIDER"] = "FORMS_SUBMISSIONS_EXTENSION_PROVIDER";
  ComponentType4["MULTILINGUAL_TRANSLATION_SCHEMA"] = "MULTILINGUAL_TRANSLATION_SCHEMA";
  ComponentType4["TAX_CALCULATION_PROVIDER"] = "TAX_CALCULATION_PROVIDER";
  ComponentType4["TAX_GROUPS_PROVIDER"] = "TAX_GROUPS_PROVIDER";
  ComponentType4["BACK_OFFICE_MODAL"] = "BACK_OFFICE_MODAL";
  ComponentType4["DEPLOYMENT_PIPELINE_PROVIDER"] = "DEPLOYMENT_PIPELINE_PROVIDER";
  ComponentType4["CUSTOM_ELEMENT_WIDGET"] = "CUSTOM_ELEMENT_WIDGET";
  ComponentType4["BACK_OFFICE_EXTENSION_WIDGET"] = "BACK_OFFICE_EXTENSION_WIDGET";
  ComponentType4["BACK_OFFICE_EXTENSION_MENU_ITEM"] = "BACK_OFFICE_EXTENSION_MENU_ITEM";
  ComponentType4["FORM_TEMPLATE"] = "FORM_TEMPLATE";
  ComponentType4["NOTIFICATION_CONTENT"] = "NOTIFICATION_CONTENT";
  ComponentType4["BROADCAST_LIST"] = "BROADCAST_LIST";
  ComponentType4["PARTNERS_PAYOUTS"] = "PARTNERS_PAYOUTS";
  ComponentType4["WIX_REVIEWS_ENTITY_CATALOG"] = "WIX_REVIEWS_ENTITY_CATALOG";
  ComponentType4["VELO_PUBLISH_PIPELINE_TASK_PROVIDER"] = "VELO_PUBLISH_PIPELINE_TASK_PROVIDER";
  ComponentType4["FUNCTIONS_SHOP_PRICE_PROVIDER"] = "FUNCTIONS_SHOP_PRICE_PROVIDER";
  ComponentType4["FUNCTION"] = "FUNCTION";
  ComponentType4["ECOM_CHECKOUT_CONTENT"] = "ECOM_CHECKOUT_CONTENT";
  ComponentType4["COMMUNICATION_CHANNEL_PROVIDER"] = "COMMUNICATION_CHANNEL_PROVIDER";
  ComponentType4["WEBHOOK"] = "WEBHOOK";
  ComponentType4["TOPOLOGY"] = "TOPOLOGY";
  ComponentType4["LOYALTY_CUSTOM_REWARDS"] = "LOYALTY_CUSTOM_REWARDS";
  ComponentType4["FUNCTION_RECIPE"] = "FUNCTION_RECIPE";
  ComponentType4["BACK_OFFICE_EXTERNAL_URL"] = "BACK_OFFICE_EXTERNAL_URL";
  ComponentType4["IDENTITY_FACTOR"] = "IDENTITY_FACTOR";
  ComponentType4["ECOM_DISCOUNTS"] = "ECOM_DISCOUNTS";
  ComponentType4["VELO_CUSTOM_CSS"] = "VELO_CUSTOM_CSS";
  ComponentType4["DEALER_ADAPTIVE_COMPONENT_PROVIDER"] = "DEALER_ADAPTIVE_COMPONENT_PROVIDER";
  ComponentType4["AI_ASSISTANT_ACTION"] = "AI_ASSISTANT_ACTION";
  ComponentType4["ECOM_INVENTORY"] = "ECOM_INVENTORY";
  ComponentType4["MONITORING"] = "MONITORING";
  ComponentType4["PAPI_PROVIDER"] = "PAPI_PROVIDER";
  ComponentType4["UNIFIED_LIGHTBOX"] = "UNIFIED_LIGHTBOX";
  ComponentType4["FORMS_EXTENSION_PROVIDER"] = "FORMS_EXTENSION_PROVIDER";
  ComponentType4["MULTILINGUAL_TRANSLATION_SCHEMA_GROUP"] = "MULTILINGUAL_TRANSLATION_SCHEMA_GROUP";
  ComponentType4["PANEL"] = "PANEL";
  ComponentType4["PREMIUM_PURCHASE_VALIDATIONS"] = "PREMIUM_PURCHASE_VALIDATIONS";
  ComponentType4["BROWSER_STORAGE"] = "BROWSER_STORAGE";
  ComponentType4["SDK_DEFINITION"] = "SDK_DEFINITION";
  ComponentType4["SITE_WIDGET_SLOT"] = "SITE_WIDGET_SLOT";
  ComponentType4["CALENDAR_EVENT_VALIDATION_PROVIDER"] = "CALENDAR_EVENT_VALIDATION_PROVIDER";
  ComponentType4["CLIENT_SIDE_SERVICE"] = "CLIENT_SIDE_SERVICE";
  ComponentType4["BILLING_SETTINGS"] = "BILLING_SETTINGS";
  ComponentType4["PATTERNS_WIZARD"] = "PATTERNS_WIZARD";
  ComponentType4["APPLICATION_PROFILE"] = "APPLICATION_PROFILE";
  ComponentType4["TEXT_TO_SPEECH_ACTION_MESSAGE"] = "TEXT_TO_SPEECH_ACTION_MESSAGE";
  ComponentType4["AUDIENCE_PROVIDER"] = "AUDIENCE_PROVIDER";
  ComponentType4["PRICING_PLANS_PRICE"] = "PRICING_PLANS_PRICE";
  ComponentType4["PRICING_PLAN_START_DATE_LIMITS"] = "PRICING_PLAN_START_DATE_LIMITS";
  ComponentType4["PRICING_PLAN_START_DATE_RULES"] = "PRICING_PLAN_START_DATE_RULES";
  ComponentType4["EVENTS_TICKET_RESERVATIONS"] = "EVENTS_TICKET_RESERVATIONS";
  ComponentType4["PAYMENTS_DISPUTE_SERVICE_PLUGIN"] = "PAYMENTS_DISPUTE_SERVICE_PLUGIN";
  ComponentType4["PRICING_PLANS_FEES"] = "PRICING_PLANS_FEES";
  ComponentType4["EDITOR_REACT_COMPONENT"] = "EDITOR_REACT_COMPONENT";
  ComponentType4["SUPPLIERS_HUB_MARKETPLACE"] = "SUPPLIERS_HUB_MARKETPLACE";
  ComponentType4["FORM_SCHEMA_DYNAMIC_VALUES"] = "FORM_SCHEMA_DYNAMIC_VALUES";
  ComponentType4["BLOG_PAYWALL_PROVIDER"] = "BLOG_PAYWALL_PROVIDER";
  ComponentType4["LOYALTY_CUSTOM_REWARDS_V2"] = "LOYALTY_CUSTOM_REWARDS_V2";
  ComponentType4["STORES_PRODUCT_RESTRICTIONS"] = "STORES_PRODUCT_RESTRICTIONS";
  ComponentType4["FORM_SUBMISSION_MODERATION"] = "FORM_SUBMISSION_MODERATION";
  ComponentType4["EVENTS_EVENT_BADGES"] = "EVENTS_EVENT_BADGES";
  ComponentType4["BILLING_OPERATION"] = "BILLING_OPERATION";
  ComponentType4["BACK_OFFICE_CUSTOMIZATION"] = "BACK_OFFICE_CUSTOMIZATION";
  ComponentType4["COMPONENT_ENRICHER_PROVIDER"] = "COMPONENT_ENRICHER_PROVIDER";
  ComponentType4["BACK_OFFICE_RESTRICTED_CUSTOMIZATION"] = "BACK_OFFICE_RESTRICTED_CUSTOMIZATION";
  ComponentType4["EDITOR_APP_PREVIEWS_POC"] = "EDITOR_APP_PREVIEWS_POC";
  ComponentType4["LEGENDS_PERSONA_CONFIGURATION"] = "LEGENDS_PERSONA_CONFIGURATION";
  ComponentType4["WIX_HOSTING_APP_DEPLOYMENT_PROVIDER"] = "WIX_HOSTING_APP_DEPLOYMENT_PROVIDER";
  ComponentType4["BACKEND_WORKER"] = "BACKEND_WORKER";
  ComponentType4["EVENT_TIME_SLOTS_CONFIGURATION_PROVIDER"] = "EVENT_TIME_SLOTS_CONFIGURATION_PROVIDER";
  ComponentType4["WIX_HOSTING_APP_ENVIRONMENT_PROVIDER"] = "WIX_HOSTING_APP_ENVIRONMENT_PROVIDER";
  ComponentType4["SDK_EXPORTS"] = "SDK_EXPORTS";
  ComponentType4["VIEWER_SERVICE"] = "VIEWER_SERVICE";
  ComponentType4["WIX_PAYMENTS_PROVIDER_ACCOUNT_SERVICE_PLUGIN"] = "WIX_PAYMENTS_PROVIDER_ACCOUNT_SERVICE_PLUGIN";
  ComponentType4["CONTACTS_SEGMENTS_V2_FILTER_PROVIDER"] = "CONTACTS_SEGMENTS_V2_FILTER_PROVIDER";
  ComponentType4["ANALYTICS_PRODUCT_CATALOG"] = "ANALYTICS_PRODUCT_CATALOG";
  ComponentType4["SITE_MIGRATION"] = "SITE_MIGRATION";
  ComponentType4["RESTAURANTS_POS_PROVIDER_SETTINGS_SERVICE_PLUGIN"] = "RESTAURANTS_POS_PROVIDER_SETTINGS_SERVICE_PLUGIN";
  ComponentType4["WIX_VIBE_CODING_INSTRUCTIONS"] = "WIX_VIBE_CODING_INSTRUCTIONS";
  ComponentType4["TAX_EXEMPT_GROUPS_PROVIDER"] = "TAX_EXEMPT_GROUPS_PROVIDER";
  ComponentType4["BOOKING_AUTOMATIONS_CONFIGURATION"] = "BOOKING_AUTOMATIONS_CONFIGURATION";
  ComponentType4["WIX_VIBE_COMPONENT"] = "WIX_VIBE_COMPONENT";
  ComponentType4["WIXEL"] = "WIXEL";
  ComponentType4["STAFF_SORTING_PROVIDER"] = "STAFF_SORTING_PROVIDER";
  ComponentType4["FUNCTION_ECOM_DISCOUNT_TRIGGER_ELIGIBILITY_PROVIDER"] = "FUNCTION_ECOM_DISCOUNT_TRIGGER_ELIGIBILITY_PROVIDER";
})(ComponentType2 || (ComponentType2 = {}));
var ExtensionExposureExposure;
(function(ExtensionExposureExposure3) {
  ExtensionExposureExposure3["PRIVATE"] = "PRIVATE";
  ExtensionExposureExposure3["INTERNAL"] = "INTERNAL";
  ExtensionExposureExposure3["PUBLIC"] = "PUBLIC";
})(ExtensionExposureExposure || (ExtensionExposureExposure = {}));
var Maturity;
(function(Maturity3) {
  Maturity3["ALPHA"] = "ALPHA";
  Maturity3["BETA"] = "BETA";
  Maturity3["GA"] = "GA";
  Maturity3["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
})(Maturity || (Maturity = {}));
var WidgetVertical;
(function(WidgetVertical3) {
  WidgetVertical3["NONE_VERTICAL"] = "NONE_VERTICAL";
  WidgetVertical3["TOP"] = "TOP";
  WidgetVertical3["CENTER_VERTICAL"] = "CENTER_VERTICAL";
  WidgetVertical3["BOTTOM"] = "BOTTOM";
})(WidgetVertical || (WidgetVertical = {}));
var WidgetHorizontal;
(function(WidgetHorizontal3) {
  WidgetHorizontal3["NONE_HORIZONTAL"] = "NONE_HORIZONTAL";
  WidgetHorizontal3["LEFT"] = "LEFT";
  WidgetHorizontal3["CENTER_HORIZONTAL"] = "CENTER_HORIZONTAL";
  WidgetHorizontal3["RIGHT"] = "RIGHT";
})(WidgetHorizontal || (WidgetHorizontal = {}));
var WidgetWidthType;
(function(WidgetWidthType3) {
  WidgetWidthType3["NONE_TYPE"] = "NONE_TYPE";
  WidgetWidthType3["CUSTOM"] = "CUSTOM";
  WidgetWidthType3["FULL"] = "FULL";
})(WidgetWidthType || (WidgetWidthType = {}));
var Region;
(function(Region3) {
  Region3["no_region"] = "no_region";
  Region3["header"] = "header";
  Region3["pageContainer"] = "pageContainer";
  Region3["footer"] = "footer";
})(Region || (Region = {}));
var UnitType;
(function(UnitType3) {
  UnitType3["NO_UNIT"] = "NO_UNIT";
  UnitType3["AUTO"] = "AUTO";
  UnitType3["PX"] = "PX";
  UnitType3["VH"] = "VH";
  UnitType3["VW"] = "VW";
  UnitType3["PERCENTAGE"] = "PERCENTAGE";
})(UnitType || (UnitType = {}));
var HorizontalDocking;
(function(HorizontalDocking3) {
  HorizontalDocking3["NO_HDOCKING"] = "NO_HDOCKING";
  HorizontalDocking3["LEFT_DOCKING"] = "LEFT_DOCKING";
  HorizontalDocking3["HCENTER"] = "HCENTER";
  HorizontalDocking3["RIGHT_DOCKING"] = "RIGHT_DOCKING";
})(HorizontalDocking || (HorizontalDocking = {}));
var VerticalDocking;
(function(VerticalDocking3) {
  VerticalDocking3["NO_VDOCKING"] = "NO_VDOCKING";
  VerticalDocking3["TOP_DOCKING"] = "TOP_DOCKING";
  VerticalDocking3["VCENTER"] = "VCENTER";
  VerticalDocking3["BOTTOM_DOCKING"] = "BOTTOM_DOCKING";
})(VerticalDocking || (VerticalDocking = {}));
var SiteMembersSsrCaching;
(function(SiteMembersSsrCaching3) {
  SiteMembersSsrCaching3["UNKNOWN_SITE_MEMBERS_SSR_CACHING"] = "UNKNOWN_SITE_MEMBERS_SSR_CACHING";
  SiteMembersSsrCaching3["CACHING_ALLOWED"] = "CACHING_ALLOWED";
  SiteMembersSsrCaching3["CACHING_NOT_ALLOWED"] = "CACHING_NOT_ALLOWED";
})(SiteMembersSsrCaching || (SiteMembersSsrCaching = {}));
var ReplacementType;
(function(ReplacementType3) {
  ReplacementType3["UNKNOWN_REPLACEMENT"] = "UNKNOWN_REPLACEMENT";
  ReplacementType3["REPLACING"] = "REPLACING";
  ReplacementType3["REPLACEABLE"] = "REPLACEABLE";
})(ReplacementType || (ReplacementType = {}));
var PluginInterface;
(function(PluginInterface3) {
  PluginInterface3["NONE_INTERFACE"] = "NONE_INTERFACE";
  PluginInterface3["REVIEWS"] = "REVIEWS";
  PluginInterface3["RATINGS_SUMMARY"] = "RATINGS_SUMMARY";
  PluginInterface3["RATINGS_SUMMARY_OOI_LIST"] = "RATINGS_SUMMARY_OOI_LIST";
  PluginInterface3["BOOKINGS_SERVICE"] = "BOOKINGS_SERVICE";
  PluginInterface3["BOOKINGS_FORM"] = "BOOKINGS_FORM";
  PluginInterface3["BASE"] = "BASE";
  PluginInterface3["EVENT"] = "EVENT";
  PluginInterface3["PRODUCT"] = "PRODUCT";
  PluginInterface3["CHECKOUT"] = "CHECKOUT";
  PluginInterface3["CATEGORY"] = "CATEGORY";
  PluginInterface3["BOOKINGS_CALENDAR"] = "BOOKINGS_CALENDAR";
  PluginInterface3["CART"] = "CART";
})(PluginInterface || (PluginInterface = {}));
var HTTPMethod;
(function(HTTPMethod3) {
  HTTPMethod3["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  HTTPMethod3["GET"] = "GET";
  HTTPMethod3["POST"] = "POST";
})(HTTPMethod || (HTTPMethod = {}));
var InstallPage;
(function(InstallPage3) {
  InstallPage3["NO_PAGE"] = "NO_PAGE";
  InstallPage3["CURRENT"] = "CURRENT";
  InstallPage3["PAGE"] = "PAGE";
  InstallPage3["LIGHTBOX"] = "LIGHTBOX";
})(InstallPage || (InstallPage = {}));
var RegionType;
(function(RegionType3) {
  RegionType3["HEADER"] = "HEADER";
  RegionType3["BODY"] = "BODY";
  RegionType3["FOOTER"] = "FOOTER";
})(RegionType || (RegionType = {}));
var StaticContainer;
(function(StaticContainer3) {
  StaticContainer3["UNKNOWN_CONTAINER"] = "UNKNOWN_CONTAINER";
  StaticContainer3["HOMEPAGE"] = "HOMEPAGE";
})(StaticContainer || (StaticContainer = {}));
var EmbeddedScriptPages;
(function(EmbeddedScriptPages3) {
  EmbeddedScriptPages3["NONE_PAGES"] = "NONE_PAGES";
  EmbeddedScriptPages3["ONCE"] = "ONCE";
  EmbeddedScriptPages3["SPECIFIC_PAGES"] = "SPECIFIC_PAGES";
})(EmbeddedScriptPages || (EmbeddedScriptPages = {}));
var EmbeddedScriptPlacement;
(function(EmbeddedScriptPlacement3) {
  EmbeddedScriptPlacement3["NONE_PLACEMENT"] = "NONE_PLACEMENT";
  EmbeddedScriptPlacement3["HEAD"] = "HEAD";
  EmbeddedScriptPlacement3["BODY_START"] = "BODY_START";
  EmbeddedScriptPlacement3["BODY_END"] = "BODY_END";
})(EmbeddedScriptPlacement || (EmbeddedScriptPlacement = {}));
var EmbedCategory;
(function(EmbedCategory3) {
  EmbedCategory3["UNKNOWN"] = "UNKNOWN";
  EmbedCategory3["ESSENTIAL"] = "ESSENTIAL";
  EmbedCategory3["FUNCTIONAL"] = "FUNCTIONAL";
  EmbedCategory3["ANALYTICS"] = "ANALYTICS";
  EmbedCategory3["ADVERTISING"] = "ADVERTISING";
})(EmbedCategory || (EmbedCategory = {}));
var TemplateDefaultColor;
(function(TemplateDefaultColor3) {
  TemplateDefaultColor3["BACKGROUND"] = "BACKGROUND";
  TemplateDefaultColor3["SECONDARY_TEXTS"] = "SECONDARY_TEXTS";
  TemplateDefaultColor3["MAIN_TEXT_AND_ICONS"] = "MAIN_TEXT_AND_ICONS";
  TemplateDefaultColor3["BORDERS_AND_DIVIDERS"] = "BORDERS_AND_DIVIDERS";
  TemplateDefaultColor3["BUTTONS_AND_LINKS"] = "BUTTONS_AND_LINKS";
})(TemplateDefaultColor || (TemplateDefaultColor = {}));
var ThumbnailsSize;
(function(ThumbnailsSize3) {
  ThumbnailsSize3["SMALL"] = "SMALL";
  ThumbnailsSize3["MEDIUM"] = "MEDIUM";
  ThumbnailsSize3["LARGE"] = "LARGE";
  ThumbnailsSize3["XLARGE"] = "XLARGE";
})(ThumbnailsSize || (ThumbnailsSize = {}));
var BarAlignmentSelected;
(function(BarAlignmentSelected3) {
  BarAlignmentSelected3["ALIGN_LEFT"] = "ALIGN_LEFT";
  BarAlignmentSelected3["ALIGN_CENTER"] = "ALIGN_CENTER";
  BarAlignmentSelected3["ALIGN_RIGHT"] = "ALIGN_RIGHT";
})(BarAlignmentSelected || (BarAlignmentSelected = {}));
var DefaultTextStyle;
(function(DefaultTextStyle3) {
  DefaultTextStyle3["TITLE"] = "TITLE";
  DefaultTextStyle3["PARAGRAPH"] = "PARAGRAPH";
  DefaultTextStyle3["LOWER_HIERARCHY_TEXTS"] = "LOWER_HIERARCHY_TEXTS";
})(DefaultTextStyle || (DefaultTextStyle = {}));
var ElementType;
(function(ElementType3) {
  ElementType3["WIDGET"] = "WIDGET";
  ElementType3["PAGE"] = "PAGE";
})(ElementType || (ElementType = {}));
var ScriptType;
(function(ScriptType3) {
  ScriptType3["NO_SCRIPT_TYPE"] = "NO_SCRIPT_TYPE";
  ScriptType3["MODULE"] = "MODULE";
})(ScriptType || (ScriptType = {}));
var ExtensionType;
(function(ExtensionType3) {
  ExtensionType3["NONE_EXTENSION"] = "NONE_EXTENSION";
  ExtensionType3["PAYMENTS_GATEWAY_EXTENSION"] = "PAYMENTS_GATEWAY_EXTENSION";
  ExtensionType3["COUPONS_EXTENSION"] = "COUPONS_EXTENSION";
  ExtensionType3["DROPSHIPPING_EXTENSION"] = "DROPSHIPPING_EXTENSION";
  ExtensionType3["FULFILMENT_EXTENSION"] = "FULFILMENT_EXTENSION";
  ExtensionType3["DROPSHIPPING_SUPPLIER_EXTENSION"] = "DROPSHIPPING_SUPPLIER_EXTENSION";
  ExtensionType3["FULFILLMENT_CENTER_EXTENSION"] = "FULFILLMENT_CENTER_EXTENSION";
  ExtensionType3["RESTAURANTS_POS_EXTENSION"] = "RESTAURANTS_POS_EXTENSION";
  ExtensionType3["ART_STORE_EXTENSION"] = "ART_STORE_EXTENSION";
  ExtensionType3["ASCEND_AUTOMATION_EXTENSION"] = "ASCEND_AUTOMATION_EXTENSION";
  ExtensionType3["CONTACT_LABELS_EXTENSION"] = "CONTACT_LABELS_EXTENSION";
})(ExtensionType || (ExtensionType = {}));
var PrimitiveType;
(function(PrimitiveType3) {
  PrimitiveType3["UNKNOWN_PRIMITIVE_TYPE"] = "UNKNOWN_PRIMITIVE_TYPE";
  PrimitiveType3["TEXT"] = "TEXT";
  PrimitiveType3["BOOLEAN"] = "BOOLEAN";
  PrimitiveType3["NUMBER"] = "NUMBER";
})(PrimitiveType || (PrimitiveType = {}));
var SimpleType;
(function(SimpleType3) {
  SimpleType3["UNKNOWN_SIMPLE_TYPE"] = "UNKNOWN_SIMPLE_TYPE";
  SimpleType3["MONEY"] = "MONEY";
  SimpleType3["LINK"] = "LINK";
  SimpleType3["BACKOFFICE_LINK"] = "BACKOFFICE_LINK";
  SimpleType3["LIVESITE_LINK"] = "LIVESITE_LINK";
  SimpleType3["MULTILINGUAL"] = "MULTILINGUAL";
  SimpleType3["IMAGE_LINK"] = "IMAGE_LINK";
  SimpleType3["GUID"] = "GUID";
  SimpleType3["EMAIL"] = "EMAIL";
  SimpleType3["PHONE"] = "PHONE";
  SimpleType3["CONTACT_ID"] = "CONTACT_ID";
})(SimpleType || (SimpleType = {}));
var Exposure;
(function(Exposure3) {
  Exposure3["UNKNOWN_EXPOSURE"] = "UNKNOWN_EXPOSURE";
  Exposure3["SETUP"] = "SETUP";
  Exposure3["HIDDEN"] = "HIDDEN";
  Exposure3["EXPOSED"] = "EXPOSED";
})(Exposure || (Exposure = {}));
var PartialPaymentRestriction;
(function(PartialPaymentRestriction3) {
  PartialPaymentRestriction3["UNDEFINED"] = "UNDEFINED";
  PartialPaymentRestriction3["ALLOW"] = "ALLOW";
  PartialPaymentRestriction3["DISALLOW"] = "DISALLOW";
})(PartialPaymentRestriction || (PartialPaymentRestriction = {}));
var HostContainerId;
(function(HostContainerId3) {
  HostContainerId3["BUSINESS_MANAGER"] = "BUSINESS_MANAGER";
  HostContainerId3["BUSINESS_DASHBOARD_HOST"] = "BUSINESS_DASHBOARD_HOST";
  HostContainerId3["SIDEBAR_FOOTER"] = "SIDEBAR_FOOTER";
})(HostContainerId || (HostContainerId = {}));
var MandatoryField;
(function(MandatoryField3) {
  MandatoryField3["ZIPCODE"] = "ZIPCODE";
  MandatoryField3["CITY"] = "CITY";
  MandatoryField3["STATE"] = "STATE";
  MandatoryField3["ADDRESS"] = "ADDRESS";
  MandatoryField3["COUNTRY_CODE"] = "COUNTRY_CODE";
  MandatoryField3["EMAIL"] = "EMAIL";
  MandatoryField3["PHONE"] = "PHONE";
  MandatoryField3["FIRST_NAME"] = "FIRST_NAME";
  MandatoryField3["LAST_NAME"] = "LAST_NAME";
  MandatoryField3["STREET"] = "STREET";
  MandatoryField3["HOUSE_NUMBER"] = "HOUSE_NUMBER";
  MandatoryField3["TAX_IDENTIFIER"] = "TAX_IDENTIFIER";
})(MandatoryField || (MandatoryField = {}));
var MeasurementSystem;
(function(MeasurementSystem3) {
  MeasurementSystem3["Metric"] = "Metric";
  MeasurementSystem3["Imperial"] = "Imperial";
})(MeasurementSystem || (MeasurementSystem = {}));
var Default;
(function(Default3) {
  Default3["WIX"] = "WIX";
  Default3["POS"] = "POS";
})(Default || (Default = {}));
var HookType;
(function(HookType3) {
  HookType3["UNDEFINED"] = "UNDEFINED";
  HookType3["BEFORE_BLOCKING"] = "BEFORE_BLOCKING";
  HookType3["BEFORE"] = "BEFORE";
  HookType3["AFTER"] = "AFTER";
})(HookType || (HookType = {}));
var InterfaceConfigurationType;
(function(InterfaceConfigurationType3) {
  InterfaceConfigurationType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  InterfaceConfigurationType3["WIDGET_COMPONENT"] = "WIDGET_COMPONENT";
  InterfaceConfigurationType3["GENERIC"] = "GENERIC";
})(InterfaceConfigurationType || (InterfaceConfigurationType = {}));
var SourceType;
(function(SourceType3) {
  SourceType3["UNKNOWN_SOURCE_TYPE"] = "UNKNOWN_SOURCE_TYPE";
  SourceType3["DEV_CENTER"] = "DEV_CENTER";
  SourceType3["WIX_API"] = "WIX_API";
})(SourceType || (SourceType = {}));
var ExecutionType;
(function(ExecutionType3) {
  ExecutionType3["UNKNOWN_EXECUTION_TYPE"] = "UNKNOWN_EXECUTION_TYPE";
  ExecutionType3["SYNC"] = "SYNC";
  ExecutionType3["ASYNC"] = "ASYNC";
})(ExecutionType || (ExecutionType = {}));
var ExtendingComponentType;
(function(ExtendingComponentType3) {
  ExtendingComponentType3["INVALID"] = "INVALID";
  ExtendingComponentType3["BACK_OFFICE_MENU_ITEM"] = "BACK_OFFICE_MENU_ITEM";
  ExtendingComponentType3["BACK_OFFICE_EXTENSION_WIDGET"] = "BACK_OFFICE_EXTENSION_WIDGET";
})(ExtendingComponentType || (ExtendingComponentType = {}));
var BackOfficeHostingPlatforms2;
(function(BackOfficeHostingPlatforms4) {
  BackOfficeHostingPlatforms4["NO_HOSTING_PLATFORM"] = "NO_HOSTING_PLATFORM";
  BackOfficeHostingPlatforms4["BUSINESS_MANAGER"] = "BUSINESS_MANAGER";
  BackOfficeHostingPlatforms4["ACCOUNT_MANAGER"] = "ACCOUNT_MANAGER";
  BackOfficeHostingPlatforms4["DEV_CENTER"] = "DEV_CENTER";
  BackOfficeHostingPlatforms4["ENTERPRISE"] = "ENTERPRISE";
  BackOfficeHostingPlatforms4["PARTNERS_DASHBOARD"] = "PARTNERS_DASHBOARD";
  BackOfficeHostingPlatforms4["FINANCIALS_INTERNAL_BO"] = "FINANCIALS_INTERNAL_BO";
  BackOfficeHostingPlatforms4["FED_GUILD_POC"] = "FED_GUILD_POC";
  BackOfficeHostingPlatforms4["STUDIO_DASHBOARD"] = "STUDIO_DASHBOARD";
  BackOfficeHostingPlatforms4["CHANNELS"] = "CHANNELS";
  BackOfficeHostingPlatforms4["DATA_TOOLS"] = "DATA_TOOLS";
  BackOfficeHostingPlatforms4["PSP_BACKOFFICE"] = "PSP_BACKOFFICE";
  BackOfficeHostingPlatforms4["RISE_PLATFORM_ACCOUNT_DASHBOARD"] = "RISE_PLATFORM_ACCOUNT_DASHBOARD";
  BackOfficeHostingPlatforms4["DEMO_DASHBOARD_ENTERPRISE"] = "DEMO_DASHBOARD_ENTERPRISE";
  BackOfficeHostingPlatforms4["AI_SCHEDULING_ASSISTANT_DASHBOARD"] = "AI_SCHEDULING_ASSISTANT_DASHBOARD";
  BackOfficeHostingPlatforms4["GETTING_PAID"] = "GETTING_PAID";
  BackOfficeHostingPlatforms4["DATA"] = "DATA";
  BackOfficeHostingPlatforms4["LITE_DASHBOARD"] = "LITE_DASHBOARD";
  BackOfficeHostingPlatforms4["PICASSO_EDITOR"] = "PICASSO_EDITOR";
  BackOfficeHostingPlatforms4["BASE44_DASHBOARD_POC"] = "BASE44_DASHBOARD_POC";
  BackOfficeHostingPlatforms4["WIXEL_EDITOR"] = "WIXEL_EDITOR";
  BackOfficeHostingPlatforms4["BASE44_PLATFORM"] = "BASE44_PLATFORM";
})(BackOfficeHostingPlatforms2 || (BackOfficeHostingPlatforms2 = {}));
var DtsDefinitionType;
(function(DtsDefinitionType3) {
  DtsDefinitionType3["UNKNOWN"] = "UNKNOWN";
  DtsDefinitionType3["DTS_HTTP_LINK"] = "DTS_HTTP_LINK";
  DtsDefinitionType3["DTS_CONTENT"] = "DTS_CONTENT";
})(DtsDefinitionType || (DtsDefinitionType = {}));
var SlotDataType;
(function(SlotDataType3) {
  SlotDataType3["UNKNOWN"] = "UNKNOWN";
  SlotDataType3["WIDGET"] = "WIDGET";
  SlotDataType3["MENU"] = "MENU";
})(SlotDataType || (SlotDataType = {}));
var BackOfficeScriptAssetType;
(function(BackOfficeScriptAssetType3) {
  BackOfficeScriptAssetType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  BackOfficeScriptAssetType3["MODULE"] = "MODULE";
})(BackOfficeScriptAssetType || (BackOfficeScriptAssetType = {}));
var ViewMode;
(function(ViewMode3) {
  ViewMode3["PAGE"] = "PAGE";
  ViewMode3["MODAL"] = "MODAL";
})(ViewMode || (ViewMode = {}));
var AlgorithmType;
(function(AlgorithmType3) {
  AlgorithmType3["UNSPECIFIED"] = "UNSPECIFIED";
  AlgorithmType3["RELATED_ITEMS"] = "RELATED_ITEMS";
  AlgorithmType3["GLOBAL"] = "GLOBAL";
})(AlgorithmType || (AlgorithmType = {}));
var LockableOperation;
(function(LockableOperation3) {
  LockableOperation3["UNSPECIFIED_LOCKABLE"] = "UNSPECIFIED_LOCKABLE";
  LockableOperation3["LOCKED"] = "LOCKED";
  LockableOperation3["UNLOCKED"] = "UNLOCKED";
})(LockableOperation || (LockableOperation = {}));
var RestrictedOperation;
(function(RestrictedOperation3) {
  RestrictedOperation3["UNSPECIFIED_RESTRICTED"] = "UNSPECIFIED_RESTRICTED";
  RestrictedOperation3["ALLOW"] = "ALLOW";
  RestrictedOperation3["WARN"] = "WARN";
})(RestrictedOperation || (RestrictedOperation = {}));
var BlockType;
(function(BlockType3) {
  BlockType3["UNKNOWN"] = "UNKNOWN";
  BlockType3["OR"] = "OR";
  BlockType3["AND"] = "AND";
})(BlockType || (BlockType = {}));
var Domain;
(function(Domain3) {
  Domain3["USER"] = "USER";
  Domain3["WIX"] = "WIX";
})(Domain || (Domain = {}));
var Status;
(function(Status4) {
  Status4["ACTIVE"] = "ACTIVE";
  Status4["INACTIVE"] = "INACTIVE";
})(Status || (Status = {}));
var LayoutMode;
(function(LayoutMode3) {
  LayoutMode3["STANDARD_VIEW"] = "STANDARD_VIEW";
  LayoutMode3["BUILDER_VIEW"] = "BUILDER_VIEW";
  LayoutMode3["EXPANDED_VIEW"] = "EXPANDED_VIEW";
})(LayoutMode || (LayoutMode = {}));
var TextInputDisplayType;
(function(TextInputDisplayType3) {
  TextInputDisplayType3["TEXT"] = "TEXT";
  TextInputDisplayType3["PASSWORD"] = "PASSWORD";
  TextInputDisplayType3["CODE"] = "CODE";
})(TextInputDisplayType || (TextInputDisplayType = {}));
var ThumbnailType;
(function(ThumbnailType3) {
  ThumbnailType3["UNKNOWN_THUMBNAIL_TYPE"] = "UNKNOWN_THUMBNAIL_TYPE";
  ThumbnailType3["IMAGE"] = "IMAGE";
  ThumbnailType3["AVATAR"] = "AVATAR";
})(ThumbnailType || (ThumbnailType = {}));
var ImageShape;
(function(ImageShape3) {
  ImageShape3["UNKNOWN_SHAPE"] = "UNKNOWN_SHAPE";
  ImageShape3["CIRCLE"] = "CIRCLE";
  ImageShape3["SQUARE"] = "SQUARE";
  ImageShape3["RECTANGLE"] = "RECTANGLE";
})(ImageShape || (ImageShape = {}));
var AvatarShape;
(function(AvatarShape3) {
  AvatarShape3["UNKNOWN_SHAPE"] = "UNKNOWN_SHAPE";
  AvatarShape3["CIRCLE"] = "CIRCLE";
  AvatarShape3["SQUARE"] = "SQUARE";
})(AvatarShape || (AvatarShape = {}));
var Tag;
(function(Tag3) {
  Tag3["UNKNOWN_TAG"] = "UNKNOWN_TAG";
  Tag3["EMBEDDABLE"] = "EMBEDDABLE";
  Tag3["ECOM_EDIT_ORDER"] = "ECOM_EDIT_ORDER";
  Tag3["ECOM_CREATE_ORDER"] = "ECOM_CREATE_ORDER";
  Tag3["INBOX"] = "INBOX";
  Tag3["ECOM_CREATE_PAY_LINK"] = "ECOM_CREATE_PAY_LINK";
  Tag3["ECOM_DELIVERY_PROFILES"] = "ECOM_DELIVERY_PROFILES";
  Tag3["ADD_TO_CATEGORY"] = "ADD_TO_CATEGORY";
  Tag3["MY_BUSINESS"] = "MY_BUSINESS";
  Tag3["PIPELINE_LINKED_ENTITY"] = "PIPELINE_LINKED_ENTITY";
  Tag3["GET_PAID"] = "GET_PAID";
  Tag3["PIPELINE_CARD_CATALOG_ITEM"] = "PIPELINE_CARD_CATALOG_ITEM";
})(Tag || (Tag = {}));
var FilterSelectionType;
(function(FilterSelectionType3) {
  FilterSelectionType3["UNKNOWN_SELECTION"] = "UNKNOWN_SELECTION";
  FilterSelectionType3["SINGLE_SELECTION"] = "SINGLE_SELECTION";
  FilterSelectionType3["MULTIPLE_SELECTION"] = "MULTIPLE_SELECTION";
})(FilterSelectionType || (FilterSelectionType = {}));
var FilterOptionsType;
(function(FilterOptionsType3) {
  FilterOptionsType3["UNKNOWN_FILTER_OPTIONS"] = "UNKNOWN_FILTER_OPTIONS";
  FilterOptionsType3["STATIC"] = "STATIC";
  FilterOptionsType3["PROVIDER"] = "PROVIDER";
})(FilterOptionsType || (FilterOptionsType = {}));
var PaginationMode;
(function(PaginationMode3) {
  PaginationMode3["UNKNOWN_PAGINATION_MODE"] = "UNKNOWN_PAGINATION_MODE";
  PaginationMode3["CURSOR"] = "CURSOR";
  PaginationMode3["OFFSET"] = "OFFSET";
})(PaginationMode || (PaginationMode = {}));
var ChannelType;
(function(ChannelType3) {
  ChannelType3["UNKNOWN_CHANNEL_TYPE"] = "UNKNOWN_CHANNEL_TYPE";
  ChannelType3["DIRECT_MESSAGING"] = "DIRECT_MESSAGING";
  ChannelType3["EMAIL"] = "EMAIL";
  ChannelType3["SMS"] = "SMS";
})(ChannelType || (ChannelType = {}));
var AcceptedDirectMessageType;
(function(AcceptedDirectMessageType3) {
  AcceptedDirectMessageType3["TEXT"] = "TEXT";
  AcceptedDirectMessageType3["MEDIA"] = "MEDIA";
  AcceptedDirectMessageType3["CARD"] = "CARD";
  AcceptedDirectMessageType3["ANNOUNCEMENT"] = "ANNOUNCEMENT";
  AcceptedDirectMessageType3["FORM"] = "FORM";
})(AcceptedDirectMessageType || (AcceptedDirectMessageType = {}));
var MediaMimeType;
(function(MediaMimeType3) {
  MediaMimeType3["UNKNOWN_MIME_TYPE"] = "UNKNOWN_MIME_TYPE";
  MediaMimeType3["IMAGE_JPEG"] = "IMAGE_JPEG";
  MediaMimeType3["IMAGE_PNG"] = "IMAGE_PNG";
  MediaMimeType3["IMAGE_WEBP"] = "IMAGE_WEBP";
  MediaMimeType3["VIDEO_MPEG"] = "VIDEO_MPEG";
  MediaMimeType3["VIDEO_MP4"] = "VIDEO_MP4";
  MediaMimeType3["VIDEO_3GP"] = "VIDEO_3GP";
  MediaMimeType3["AUDIO_AAC"] = "AUDIO_AAC";
  MediaMimeType3["AUDIO_MP4"] = "AUDIO_MP4";
  MediaMimeType3["AUDIO_MPEG"] = "AUDIO_MPEG";
  MediaMimeType3["AUDIO_OGG"] = "AUDIO_OGG";
  MediaMimeType3["AUDIO_OPUS"] = "AUDIO_OPUS";
  MediaMimeType3["APPLICATION_PDF"] = "APPLICATION_PDF";
  MediaMimeType3["APPLICATION_OCTET_STREAM"] = "APPLICATION_OCTET_STREAM";
})(MediaMimeType || (MediaMimeType = {}));
var AcceptedSmsMessageType;
(function(AcceptedSmsMessageType3) {
  AcceptedSmsMessageType3["SMS"] = "SMS";
  AcceptedSmsMessageType3["MMS"] = "MMS";
})(AcceptedSmsMessageType || (AcceptedSmsMessageType = {}));
var InitDirection;
(function(InitDirection3) {
  InitDirection3["UNKNOWN_INIT_DIRECTION"] = "UNKNOWN_INIT_DIRECTION";
  InitDirection3["BUSINESS"] = "BUSINESS";
  InitDirection3["CUSTOMER"] = "CUSTOMER";
  InitDirection3["BOTH"] = "BOTH";
})(InitDirection || (InitDirection = {}));
var NodeType;
(function(NodeType3) {
  NodeType3["PARAGRAPH"] = "PARAGRAPH";
  NodeType3["TEXT"] = "TEXT";
  NodeType3["HEADING"] = "HEADING";
  NodeType3["BULLETED_LIST"] = "BULLETED_LIST";
  NodeType3["ORDERED_LIST"] = "ORDERED_LIST";
  NodeType3["LIST_ITEM"] = "LIST_ITEM";
  NodeType3["BLOCKQUOTE"] = "BLOCKQUOTE";
  NodeType3["CODE_BLOCK"] = "CODE_BLOCK";
  NodeType3["VIDEO"] = "VIDEO";
  NodeType3["DIVIDER"] = "DIVIDER";
  NodeType3["FILE"] = "FILE";
  NodeType3["GALLERY"] = "GALLERY";
  NodeType3["GIF"] = "GIF";
  NodeType3["HTML"] = "HTML";
  NodeType3["IMAGE"] = "IMAGE";
  NodeType3["LINK_PREVIEW"] = "LINK_PREVIEW";
  NodeType3["MAP"] = "MAP";
  NodeType3["POLL"] = "POLL";
  NodeType3["APP_EMBED"] = "APP_EMBED";
  NodeType3["BUTTON"] = "BUTTON";
  NodeType3["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
  NodeType3["TABLE"] = "TABLE";
  NodeType3["EMBED"] = "EMBED";
  NodeType3["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
  NodeType3["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
  NodeType3["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
  NodeType3["TABLE_CELL"] = "TABLE_CELL";
  NodeType3["TABLE_ROW"] = "TABLE_ROW";
  NodeType3["EXTERNAL"] = "EXTERNAL";
  NodeType3["AUDIO"] = "AUDIO";
  NodeType3["CAPTION"] = "CAPTION";
  NodeType3["LAYOUT"] = "LAYOUT";
  NodeType3["LAYOUT_CELL"] = "LAYOUT_CELL";
})(NodeType || (NodeType = {}));
var WidthType;
(function(WidthType3) {
  WidthType3["CONTENT"] = "CONTENT";
  WidthType3["SMALL"] = "SMALL";
  WidthType3["ORIGINAL"] = "ORIGINAL";
  WidthType3["FULL_WIDTH"] = "FULL_WIDTH";
})(WidthType || (WidthType = {}));
var PluginContainerDataAlignment;
(function(PluginContainerDataAlignment3) {
  PluginContainerDataAlignment3["CENTER"] = "CENTER";
  PluginContainerDataAlignment3["LEFT"] = "LEFT";
  PluginContainerDataAlignment3["RIGHT"] = "RIGHT";
})(PluginContainerDataAlignment || (PluginContainerDataAlignment = {}));
var ButtonDataType;
(function(ButtonDataType3) {
  ButtonDataType3["LINK"] = "LINK";
  ButtonDataType3["ACTION"] = "ACTION";
})(ButtonDataType || (ButtonDataType = {}));
var LinkTarget;
(function(LinkTarget3) {
  LinkTarget3["SELF"] = "SELF";
  LinkTarget3["BLANK"] = "BLANK";
  LinkTarget3["PARENT"] = "PARENT";
  LinkTarget3["TOP"] = "TOP";
})(LinkTarget || (LinkTarget = {}));
var TextAlignment;
(function(TextAlignment3) {
  TextAlignment3["AUTO"] = "AUTO";
  TextAlignment3["LEFT"] = "LEFT";
  TextAlignment3["RIGHT"] = "RIGHT";
  TextAlignment3["CENTER"] = "CENTER";
  TextAlignment3["JUSTIFY"] = "JUSTIFY";
})(TextAlignment || (TextAlignment = {}));
var LineStyle;
(function(LineStyle3) {
  LineStyle3["SINGLE"] = "SINGLE";
  LineStyle3["DOUBLE"] = "DOUBLE";
  LineStyle3["DASHED"] = "DASHED";
  LineStyle3["DOTTED"] = "DOTTED";
})(LineStyle || (LineStyle = {}));
var DividerDataWidth;
(function(DividerDataWidth3) {
  DividerDataWidth3["LARGE"] = "LARGE";
  DividerDataWidth3["MEDIUM"] = "MEDIUM";
  DividerDataWidth3["SMALL"] = "SMALL";
})(DividerDataWidth || (DividerDataWidth = {}));
var Alignment;
(function(Alignment3) {
  Alignment3["CENTER"] = "CENTER";
  Alignment3["LEFT"] = "LEFT";
  Alignment3["RIGHT"] = "RIGHT";
})(Alignment || (Alignment = {}));
var PDFSettingsViewMode;
(function(PDFSettingsViewMode3) {
  PDFSettingsViewMode3["NONE"] = "NONE";
  PDFSettingsViewMode3["FULL"] = "FULL";
  PDFSettingsViewMode3["MINI"] = "MINI";
})(PDFSettingsViewMode || (PDFSettingsViewMode = {}));
var LayoutType;
(function(LayoutType3) {
  LayoutType3["COLLAGE"] = "COLLAGE";
  LayoutType3["MASONRY"] = "MASONRY";
  LayoutType3["GRID"] = "GRID";
  LayoutType3["THUMBNAIL"] = "THUMBNAIL";
  LayoutType3["SLIDER"] = "SLIDER";
  LayoutType3["SLIDESHOW"] = "SLIDESHOW";
  LayoutType3["PANORAMA"] = "PANORAMA";
  LayoutType3["COLUMN"] = "COLUMN";
  LayoutType3["MAGIC"] = "MAGIC";
  LayoutType3["FULLSIZE"] = "FULLSIZE";
})(LayoutType || (LayoutType = {}));
var Orientation;
(function(Orientation3) {
  Orientation3["ROWS"] = "ROWS";
  Orientation3["COLUMNS"] = "COLUMNS";
})(Orientation || (Orientation = {}));
var Crop;
(function(Crop3) {
  Crop3["FILL"] = "FILL";
  Crop3["FIT"] = "FIT";
})(Crop || (Crop = {}));
var ThumbnailsAlignment;
(function(ThumbnailsAlignment3) {
  ThumbnailsAlignment3["TOP"] = "TOP";
  ThumbnailsAlignment3["RIGHT"] = "RIGHT";
  ThumbnailsAlignment3["BOTTOM"] = "BOTTOM";
  ThumbnailsAlignment3["LEFT"] = "LEFT";
  ThumbnailsAlignment3["NONE"] = "NONE";
})(ThumbnailsAlignment || (ThumbnailsAlignment = {}));
var GIFType;
(function(GIFType3) {
  GIFType3["NORMAL"] = "NORMAL";
  GIFType3["STICKER"] = "STICKER";
})(GIFType || (GIFType = {}));
var Source;
(function(Source3) {
  Source3["HTML"] = "HTML";
  Source3["ADSENSE"] = "ADSENSE";
})(Source || (Source = {}));
var StylesPosition;
(function(StylesPosition3) {
  StylesPosition3["START"] = "START";
  StylesPosition3["END"] = "END";
  StylesPosition3["TOP"] = "TOP";
  StylesPosition3["HIDDEN"] = "HIDDEN";
})(StylesPosition || (StylesPosition = {}));
var MapType;
(function(MapType3) {
  MapType3["ROADMAP"] = "ROADMAP";
  MapType3["SATELITE"] = "SATELITE";
  MapType3["HYBRID"] = "HYBRID";
  MapType3["TERRAIN"] = "TERRAIN";
})(MapType || (MapType = {}));
var ViewRole;
(function(ViewRole3) {
  ViewRole3["CREATOR"] = "CREATOR";
  ViewRole3["VOTERS"] = "VOTERS";
  ViewRole3["EVERYONE"] = "EVERYONE";
})(ViewRole || (ViewRole = {}));
var VoteRole;
(function(VoteRole3) {
  VoteRole3["SITE_MEMBERS"] = "SITE_MEMBERS";
  VoteRole3["ALL"] = "ALL";
})(VoteRole || (VoteRole = {}));
var PollLayoutType;
(function(PollLayoutType3) {
  PollLayoutType3["LIST"] = "LIST";
  PollLayoutType3["GRID"] = "GRID";
})(PollLayoutType || (PollLayoutType = {}));
var PollLayoutDirection;
(function(PollLayoutDirection3) {
  PollLayoutDirection3["LTR"] = "LTR";
  PollLayoutDirection3["RTL"] = "RTL";
})(PollLayoutDirection || (PollLayoutDirection = {}));
var BackgroundType;
(function(BackgroundType3) {
  BackgroundType3["COLOR"] = "COLOR";
  BackgroundType3["IMAGE"] = "IMAGE";
  BackgroundType3["GRADIENT"] = "GRADIENT";
})(BackgroundType || (BackgroundType = {}));
var DecorationType;
(function(DecorationType3) {
  DecorationType3["BOLD"] = "BOLD";
  DecorationType3["ITALIC"] = "ITALIC";
  DecorationType3["UNDERLINE"] = "UNDERLINE";
  DecorationType3["SPOILER"] = "SPOILER";
  DecorationType3["ANCHOR"] = "ANCHOR";
  DecorationType3["MENTION"] = "MENTION";
  DecorationType3["LINK"] = "LINK";
  DecorationType3["COLOR"] = "COLOR";
  DecorationType3["FONT_SIZE"] = "FONT_SIZE";
  DecorationType3["EXTERNAL"] = "EXTERNAL";
  DecorationType3["STRIKETHROUGH"] = "STRIKETHROUGH";
  DecorationType3["SUPERSCRIPT"] = "SUPERSCRIPT";
  DecorationType3["SUBSCRIPT"] = "SUBSCRIPT";
})(DecorationType || (DecorationType = {}));
var FontType;
(function(FontType3) {
  FontType3["PX"] = "PX";
  FontType3["EM"] = "EM";
})(FontType || (FontType = {}));
var ImageStylesPosition;
(function(ImageStylesPosition3) {
  ImageStylesPosition3["START"] = "START";
  ImageStylesPosition3["END"] = "END";
  ImageStylesPosition3["TOP"] = "TOP";
})(ImageStylesPosition || (ImageStylesPosition = {}));
var AspectRatio;
(function(AspectRatio3) {
  AspectRatio3["SQUARE"] = "SQUARE";
  AspectRatio3["RECTANGLE"] = "RECTANGLE";
})(AspectRatio || (AspectRatio = {}));
var Resizing;
(function(Resizing3) {
  Resizing3["FILL"] = "FILL";
  Resizing3["FIT"] = "FIT";
})(Resizing || (Resizing = {}));
var Placement;
(function(Placement3) {
  Placement3["IMAGE"] = "IMAGE";
  Placement3["PRODUCT_INFO"] = "PRODUCT_INFO";
})(Placement || (Placement = {}));
var CardStylesType;
(function(CardStylesType3) {
  CardStylesType3["CONTAINED"] = "CONTAINED";
  CardStylesType3["FRAMELESS"] = "FRAMELESS";
})(CardStylesType || (CardStylesType = {}));
var CardStylesAlignment;
(function(CardStylesAlignment3) {
  CardStylesAlignment3["START"] = "START";
  CardStylesAlignment3["CENTER"] = "CENTER";
  CardStylesAlignment3["END"] = "END";
})(CardStylesAlignment || (CardStylesAlignment = {}));
var CardStylesLayout;
(function(CardStylesLayout3) {
  CardStylesLayout3["STACKED"] = "STACKED";
  CardStylesLayout3["SIDE_BY_SIDE"] = "SIDE_BY_SIDE";
})(CardStylesLayout || (CardStylesLayout = {}));
var AppType;
(function(AppType4) {
  AppType4["PRODUCT"] = "PRODUCT";
  AppType4["EVENT"] = "EVENT";
  AppType4["BOOKING"] = "BOOKING";
})(AppType || (AppType = {}));
var InitialExpandedItems;
(function(InitialExpandedItems3) {
  InitialExpandedItems3["FIRST"] = "FIRST";
  InitialExpandedItems3["ALL"] = "ALL";
  InitialExpandedItems3["NONE"] = "NONE";
})(InitialExpandedItems || (InitialExpandedItems = {}));
var Direction;
(function(Direction3) {
  Direction3["LTR"] = "LTR";
  Direction3["RTL"] = "RTL";
})(Direction || (Direction = {}));
var VerticalAlignment;
(function(VerticalAlignment3) {
  VerticalAlignment3["TOP"] = "TOP";
  VerticalAlignment3["MIDDLE"] = "MIDDLE";
  VerticalAlignment3["BOTTOM"] = "BOTTOM";
})(VerticalAlignment || (VerticalAlignment = {}));
var NullValue;
(function(NullValue3) {
  NullValue3["NULL_VALUE"] = "NULL_VALUE";
})(NullValue || (NullValue = {}));
var CalendarType;
(function(CalendarType3) {
  CalendarType3["UNDEFINED"] = "UNDEFINED";
  CalendarType3["GOOGLE"] = "GOOGLE";
  CalendarType3["I_CAL"] = "I_CAL";
  CalendarType3["MICROSOFT"] = "MICROSOFT";
  CalendarType3["OTHER"] = "OTHER";
})(CalendarType || (CalendarType = {}));
var ConnectMethod;
(function(ConnectMethod3) {
  ConnectMethod3["OAUTH"] = "OAUTH";
  ConnectMethod3["CREDENTIALS"] = "CREDENTIALS";
})(ConnectMethod || (ConnectMethod = {}));
var ListEventFromCalendars;
(function(ListEventFromCalendars3) {
  ListEventFromCalendars3["LIST_NOT_SUPPORTED"] = "LIST_NOT_SUPPORTED";
  ListEventFromCalendars3["LIST_FROM_PRIMARY_CALENDAR_ONLY"] = "LIST_FROM_PRIMARY_CALENDAR_ONLY";
  ListEventFromCalendars3["LIST_FROM_SPECIFIC_CALENDARS"] = "LIST_FROM_SPECIFIC_CALENDARS";
})(ListEventFromCalendars || (ListEventFromCalendars = {}));
var SyncToCalendar;
(function(SyncToCalendar3) {
  SyncToCalendar3["SYNC_NOT_SUPPORTED"] = "SYNC_NOT_SUPPORTED";
  SyncToCalendar3["SYNC_TO_PRIMARY_CALENDAR_ONLY"] = "SYNC_TO_PRIMARY_CALENDAR_ONLY";
  SyncToCalendar3["SYNC_TO_DEDICATED_CALENDAR"] = "SYNC_TO_DEDICATED_CALENDAR";
})(SyncToCalendar || (SyncToCalendar = {}));
var OAuthAppType;
(function(OAuthAppType3) {
  OAuthAppType3["OAUTH_APP_TYPE_UNSPECIFIED"] = "OAUTH_APP_TYPE_UNSPECIFIED";
  OAuthAppType3["WEB_APP"] = "WEB_APP";
  OAuthAppType3["MOBILE"] = "MOBILE";
  OAuthAppType3["OTHER"] = "OTHER";
  OAuthAppType3["SYSTEM"] = "SYSTEM";
})(OAuthAppType || (OAuthAppType = {}));
var OAuthTechnologies;
(function(OAuthTechnologies3) {
  OAuthTechnologies3["OAUTH_TECHNOLOGY_UNSPECIFIED"] = "OAUTH_TECHNOLOGY_UNSPECIFIED";
  OAuthTechnologies3["JAVASCRIPT"] = "JAVASCRIPT";
  OAuthTechnologies3["ANGULAR"] = "ANGULAR";
  OAuthTechnologies3["VUE"] = "VUE";
  OAuthTechnologies3["REACT"] = "REACT";
  OAuthTechnologies3["REACT_NATIVE"] = "REACT_NATIVE";
  OAuthTechnologies3["IOS"] = "IOS";
  OAuthTechnologies3["ANDROID"] = "ANDROID";
  OAuthTechnologies3["OTHER_TECHNOLOGY"] = "OTHER_TECHNOLOGY";
})(OAuthTechnologies || (OAuthTechnologies = {}));
var NavigationType;
(function(NavigationType3) {
  NavigationType3["NAVIGATE"] = "NAVIGATE";
  NavigationType3["MODAL"] = "MODAL";
})(NavigationType || (NavigationType = {}));
var PingSettingsGroupComponentDataState;
(function(PingSettingsGroupComponentDataState2) {
  PingSettingsGroupComponentDataState2["UNKNOWN_STATE"] = "UNKNOWN_STATE";
  PingSettingsGroupComponentDataState2["DEFAULT_ON"] = "DEFAULT_ON";
  PingSettingsGroupComponentDataState2["DEFAULT_OFF"] = "DEFAULT_OFF";
  PingSettingsGroupComponentDataState2["ALWAYS_ON"] = "ALWAYS_ON";
})(PingSettingsGroupComponentDataState || (PingSettingsGroupComponentDataState = {}));
var State;
(function(State3) {
  State3["UNKNOWN_STATE"] = "UNKNOWN_STATE";
  State3["DEFAULT_ON"] = "DEFAULT_ON";
  State3["DEFAULT_OFF"] = "DEFAULT_OFF";
  State3["ALWAYS_ON"] = "ALWAYS_ON";
})(State || (State = {}));
var NotificationTopicType;
(function(NotificationTopicType3) {
  NotificationTopicType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  NotificationTopicType3["PROMOTIONAL"] = "PROMOTIONAL";
  NotificationTopicType3["TRANSACTIONAL"] = "TRANSACTIONAL";
})(NotificationTopicType || (NotificationTopicType = {}));
var RecipientType;
(function(RecipientType3) {
  RecipientType3["UNKNOWN_RECIPIENT_TYPE"] = "UNKNOWN_RECIPIENT_TYPE";
  RecipientType3["WIX_USER"] = "WIX_USER";
  RecipientType3["CONTACT"] = "CONTACT";
})(RecipientType || (RecipientType = {}));
var PlanFormPricingOption;
(function(PlanFormPricingOption3) {
  PlanFormPricingOption3["UNKNOWN_OPTION"] = "UNKNOWN_OPTION";
  PlanFormPricingOption3["FREE"] = "FREE";
  PlanFormPricingOption3["ONE_TIME"] = "ONE_TIME";
  PlanFormPricingOption3["RECURRING"] = "RECURRING";
})(PlanFormPricingOption || (PlanFormPricingOption = {}));
var PlanFormPricingType;
(function(PlanFormPricingType3) {
  PlanFormPricingType3["UNKNOWN_OPTION"] = "UNKNOWN_OPTION";
  PlanFormPricingType3["FREE"] = "FREE";
  PlanFormPricingType3["ONE_TIME"] = "ONE_TIME";
  PlanFormPricingType3["RECURRING"] = "RECURRING";
})(PlanFormPricingType || (PlanFormPricingType = {}));
var PlanFormDefaultSection;
(function(PlanFormDefaultSection3) {
  PlanFormDefaultSection3["UNKNWON_PLAN_FORM_SECTION"] = "UNKNWON_PLAN_FORM_SECTION";
  PlanFormDefaultSection3["INFO"] = "INFO";
  PlanFormDefaultSection3["BENEFITS"] = "BENEFITS";
  PlanFormDefaultSection3["PAGE_PERMISSIONS"] = "PAGE_PERMISSIONS";
  PlanFormDefaultSection3["PRICING_AND_DURATION"] = "PRICING_AND_DURATION";
  PlanFormDefaultSection3["ADVANCED_SETTINGS"] = "ADVANCED_SETTINGS";
  PlanFormDefaultSection3["PRICING"] = "PRICING";
  PlanFormDefaultSection3["DURATION"] = "DURATION";
})(PlanFormDefaultSection || (PlanFormDefaultSection = {}));
var PlanPeriodUnit;
(function(PlanPeriodUnit3) {
  PlanPeriodUnit3["UNDEFINED"] = "UNDEFINED";
  PlanPeriodUnit3["DAY"] = "DAY";
  PlanPeriodUnit3["WEEK"] = "WEEK";
  PlanPeriodUnit3["MONTH"] = "MONTH";
  PlanPeriodUnit3["YEAR"] = "YEAR";
})(PlanPeriodUnit || (PlanPeriodUnit = {}));
var TypedDynamicParamType;
(function(TypedDynamicParamType3) {
  TypedDynamicParamType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  TypedDynamicParamType3["STRING"] = "STRING";
  TypedDynamicParamType3["ARRAY"] = "ARRAY";
})(TypedDynamicParamType || (TypedDynamicParamType = {}));
var UserNotificationDataRecipientFilterType;
(function(UserNotificationDataRecipientFilterType3) {
  UserNotificationDataRecipientFilterType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  UserNotificationDataRecipientFilterType3["WIX_USERS"] = "WIX_USERS";
  UserNotificationDataRecipientFilterType3["SITE_CONTRIBUTORS"] = "SITE_CONTRIBUTORS";
})(UserNotificationDataRecipientFilterType || (UserNotificationDataRecipientFilterType = {}));
var InitiatorType;
(function(InitiatorType3) {
  InitiatorType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  InitiatorType3["WIX_USER"] = "WIX_USER";
  InitiatorType3["WIX_APP"] = "WIX_APP";
})(InitiatorType || (InitiatorType = {}));
var Level;
(function(Level3) {
  Level3["UNKNOWN_LEVEL"] = "UNKNOWN_LEVEL";
  Level3["ACCOUNT"] = "ACCOUNT";
  Level3["USER"] = "USER";
  Level3["SITE"] = "SITE";
})(Level || (Level = {}));
var IconType;
(function(IconType3) {
  IconType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  IconType3["URL"] = "URL";
  IconType3["SPOUT"] = "SPOUT";
  IconType3["INITIATOR"] = "INITIATOR";
})(IconType || (IconType = {}));
var MobileApplication;
(function(MobileApplication3) {
  MobileApplication3["UNKNOWN_MOBILE_APPLICATION"] = "UNKNOWN_MOBILE_APPLICATION";
  MobileApplication3["OWNER"] = "OWNER";
  MobileApplication3["SPACES"] = "SPACES";
  MobileApplication3["DINE"] = "DINE";
  MobileApplication3["FITNESS"] = "FITNESS";
  MobileApplication3["WIX_LIFE"] = "WIX_LIFE";
  MobileApplication3["WIX_PARTNERS"] = "WIX_PARTNERS";
  MobileApplication3["BRANDED"] = "BRANDED";
  MobileApplication3["WIX_STUDIO"] = "WIX_STUDIO";
  MobileApplication3["NO_SPECIFIC_TARGET_APP"] = "NO_SPECIFIC_TARGET_APP";
})(MobileApplication || (MobileApplication = {}));
var AndroidStyle;
(function(AndroidStyle3) {
  AndroidStyle3["UNKNOWN_ANDROID_STYLE"] = "UNKNOWN_ANDROID_STYLE";
  AndroidStyle3["BIG_TEXT"] = "BIG_TEXT";
  AndroidStyle3["MESSAGING"] = "MESSAGING";
  AndroidStyle3["INBOX"] = "INBOX";
})(AndroidStyle || (AndroidStyle = {}));
var ExposureRuleType;
(function(ExposureRuleType3) {
  ExposureRuleType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  ExposureRuleType3["OPEN_TO_ALL"] = "OPEN_TO_ALL";
  ExposureRuleType3["OPEN_TO_NONE"] = "OPEN_TO_NONE";
  ExposureRuleType3["BOOLEAN_EXPERIMENT"] = "BOOLEAN_EXPERIMENT";
  ExposureRuleType3["CUSTOM_EXPERIMENT"] = "CUSTOM_EXPERIMENT";
})(ExposureRuleType || (ExposureRuleType = {}));
var Intent;
(function(Intent3) {
  Intent3["UNKNOWN_INTENT"] = "UNKNOWN_INTENT";
  Intent3["MARKETING"] = "MARKETING";
  Intent3["TRANSACTIONAL"] = "TRANSACTIONAL";
})(Intent || (Intent = {}));
var UserNotificationDataType;
(function(UserNotificationDataType3) {
  UserNotificationDataType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  UserNotificationDataType3["REGULAR"] = "REGULAR";
  UserNotificationDataType3["ALERT_WARNING"] = "ALERT_WARNING";
  UserNotificationDataType3["ALERT_INFO"] = "ALERT_INFO";
})(UserNotificationDataType || (UserNotificationDataType = {}));
var RecipientFilterType;
(function(RecipientFilterType3) {
  RecipientFilterType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  RecipientFilterType3["CONTACTS"] = "CONTACTS";
})(RecipientFilterType || (RecipientFilterType = {}));
var Type;
(function(Type3) {
  Type3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  Type3["CONTACT"] = "CONTACT";
  Type3["SITE_MEMBER"] = "SITE_MEMBER";
})(Type || (Type = {}));
var Environment;
(function(Environment3) {
  Environment3["LIVE_SITE"] = "LIVE_SITE";
  Environment3["BUSINESS_MANAGER"] = "BUSINESS_MANAGER";
})(Environment || (Environment = {}));
var SchemaScope;
(function(SchemaScope3) {
  SchemaScope3["UNKNOWN_SCOPE"] = "UNKNOWN_SCOPE";
  SchemaScope3["GLOBAL"] = "GLOBAL";
  SchemaScope3["SITE"] = "SITE";
})(SchemaScope || (SchemaScope = {}));
var FieldType;
(function(FieldType3) {
  FieldType3["UNDEFINED_TYPE"] = "UNDEFINED_TYPE";
  FieldType3["SHORT_TEXT"] = "SHORT_TEXT";
  FieldType3["LONG_TEXT"] = "LONG_TEXT";
  FieldType3["HTML"] = "HTML";
  FieldType3["RICH_CONTENT"] = "RICH_CONTENT";
  FieldType3["IMAGE"] = "IMAGE";
  FieldType3["IMAGE_LINK"] = "IMAGE_LINK";
  FieldType3["JSON"] = "JSON";
  FieldType3["VIDEO"] = "VIDEO";
  FieldType3["DOCUMENT"] = "DOCUMENT";
})(FieldType || (FieldType = {}));
var CustomElementScriptType;
(function(CustomElementScriptType3) {
  CustomElementScriptType3["NONE"] = "NONE";
  CustomElementScriptType3["COMMON_JS"] = "COMMON_JS";
  CustomElementScriptType3["ES_MODULE"] = "ES_MODULE";
})(CustomElementScriptType || (CustomElementScriptType = {}));
var HeightMode;
(function(HeightMode3) {
  HeightMode3["UNKNOWN"] = "UNKNOWN";
  HeightMode3["AUTO"] = "AUTO";
  HeightMode3["FIXED"] = "FIXED";
})(HeightMode || (HeightMode = {}));
var FieldFieldType;
(function(FieldFieldType3) {
  FieldFieldType3["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
  FieldFieldType3["INPUT"] = "INPUT";
  FieldFieldType3["DISPLAY"] = "DISPLAY";
})(FieldFieldType || (FieldFieldType = {}));
var Format;
(function(Format3) {
  Format3["UNKNOWN_FORMAT"] = "UNKNOWN_FORMAT";
  Format3["DATE"] = "DATE";
  Format3["TIME"] = "TIME";
  Format3["DATE_TIME"] = "DATE_TIME";
  Format3["EMAIL"] = "EMAIL";
  Format3["URL"] = "URL";
  Format3["UUID"] = "UUID";
  Format3["PHONE"] = "PHONE";
  Format3["URI"] = "URI";
  Format3["HOSTNAME"] = "HOSTNAME";
  Format3["COLOR_HEX"] = "COLOR_HEX";
  Format3["CURRENCY"] = "CURRENCY";
  Format3["LANGUAGE"] = "LANGUAGE";
  Format3["DATE_OPTIONAL_TIME"] = "DATE_OPTIONAL_TIME";
})(Format || (Format = {}));
var StringComponentType;
(function(StringComponentType3) {
  StringComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  StringComponentType3["TEXT_INPUT"] = "TEXT_INPUT";
  StringComponentType3["RADIO_GROUP"] = "RADIO_GROUP";
  StringComponentType3["DROPDOWN"] = "DROPDOWN";
  StringComponentType3["DATE_TIME"] = "DATE_TIME";
  StringComponentType3["PHONE_INPUT"] = "PHONE_INPUT";
  StringComponentType3["DATE_INPUT"] = "DATE_INPUT";
  StringComponentType3["TIME_INPUT"] = "TIME_INPUT";
  StringComponentType3["DATE_PICKER"] = "DATE_PICKER";
  StringComponentType3["SERVICES_DROPDOWN"] = "SERVICES_DROPDOWN";
})(StringComponentType || (StringComponentType = {}));
var ImagePosition;
(function(ImagePosition3) {
  ImagePosition3["UNKNOWN_IMAGE_POSITION"] = "UNKNOWN_IMAGE_POSITION";
  ImagePosition3["ABOVE"] = "ABOVE";
  ImagePosition3["BELOW"] = "BELOW";
})(ImagePosition || (ImagePosition = {}));
var AlignmentEnumAlignment;
(function(AlignmentEnumAlignment3) {
  AlignmentEnumAlignment3["UNKNOWN_ALIGNMENT"] = "UNKNOWN_ALIGNMENT";
  AlignmentEnumAlignment3["LEFT"] = "LEFT";
  AlignmentEnumAlignment3["CENTER"] = "CENTER";
  AlignmentEnumAlignment3["RIGHT"] = "RIGHT";
})(AlignmentEnumAlignment || (AlignmentEnumAlignment = {}));
var ImageFit;
(function(ImageFit3) {
  ImageFit3["UNKNOWN_IMAGE_FIT"] = "UNKNOWN_IMAGE_FIT";
  ImageFit3["COVER"] = "COVER";
  ImageFit3["CONTAIN"] = "CONTAIN";
})(ImageFit || (ImageFit = {}));
var NumberOfColumns;
(function(NumberOfColumns3) {
  NumberOfColumns3["UNKNOWN"] = "UNKNOWN";
  NumberOfColumns3["ZERO"] = "ZERO";
  NumberOfColumns3["ONE"] = "ONE";
  NumberOfColumns3["TWO"] = "TWO";
  NumberOfColumns3["THREE"] = "THREE";
})(NumberOfColumns || (NumberOfColumns = {}));
var FirstDayOfWeek;
(function(FirstDayOfWeek3) {
  FirstDayOfWeek3["MONDAY"] = "MONDAY";
  FirstDayOfWeek3["SUNDAY"] = "SUNDAY";
})(FirstDayOfWeek || (FirstDayOfWeek = {}));
var NumberComponentType;
(function(NumberComponentType3) {
  NumberComponentType3["UNKNOWN"] = "UNKNOWN";
  NumberComponentType3["NUMBER_INPUT"] = "NUMBER_INPUT";
  NumberComponentType3["RATING_INPUT"] = "RATING_INPUT";
})(NumberComponentType || (NumberComponentType = {}));
var BooleanComponentType;
(function(BooleanComponentType3) {
  BooleanComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  BooleanComponentType3["CHECKBOX"] = "CHECKBOX";
})(BooleanComponentType || (BooleanComponentType = {}));
var ItemType;
(function(ItemType3) {
  ItemType3["UNKNOWN_ITEM_TYPE"] = "UNKNOWN_ITEM_TYPE";
  ItemType3["STRING"] = "STRING";
  ItemType3["NUMBER"] = "NUMBER";
  ItemType3["BOOLEAN"] = "BOOLEAN";
  ItemType3["INTEGER"] = "INTEGER";
  ItemType3["OBJECT"] = "OBJECT";
})(ItemType || (ItemType = {}));
var PropertiesTypeEnum;
(function(PropertiesTypeEnum3) {
  PropertiesTypeEnum3["UNKNOWN_PROPERTY_TYPE"] = "UNKNOWN_PROPERTY_TYPE";
  PropertiesTypeEnum3["STRING"] = "STRING";
  PropertiesTypeEnum3["NUMBER"] = "NUMBER";
  PropertiesTypeEnum3["BOOLEAN"] = "BOOLEAN";
  PropertiesTypeEnum3["INTEGER"] = "INTEGER";
  PropertiesTypeEnum3["ARRAY"] = "ARRAY";
})(PropertiesTypeEnum || (PropertiesTypeEnum = {}));
var ArrayComponentType;
(function(ArrayComponentType3) {
  ArrayComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  ArrayComponentType3["CHECKBOX_GROUP"] = "CHECKBOX_GROUP";
  ArrayComponentType3["TAGS"] = "TAGS";
})(ArrayComponentType || (ArrayComponentType = {}));
var WixFileComponentType;
(function(WixFileComponentType3) {
  WixFileComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  WixFileComponentType3["FILE_UPLOAD"] = "FILE_UPLOAD";
  WixFileComponentType3["SIGNATURE"] = "SIGNATURE";
})(WixFileComponentType || (WixFileComponentType = {}));
var UploadFileFormatEnumUploadFileFormat;
(function(UploadFileFormatEnumUploadFileFormat3) {
  UploadFileFormatEnumUploadFileFormat3["UNKNOWN_UPLOAD_FILE_FORMAT"] = "UNKNOWN_UPLOAD_FILE_FORMAT";
  UploadFileFormatEnumUploadFileFormat3["VIDEO"] = "VIDEO";
  UploadFileFormatEnumUploadFileFormat3["IMAGE"] = "IMAGE";
  UploadFileFormatEnumUploadFileFormat3["AUDIO"] = "AUDIO";
  UploadFileFormatEnumUploadFileFormat3["DOCUMENT"] = "DOCUMENT";
  UploadFileFormatEnumUploadFileFormat3["ARCHIVE"] = "ARCHIVE";
})(UploadFileFormatEnumUploadFileFormat || (UploadFileFormatEnumUploadFileFormat = {}));
var UploadFileFormat;
(function(UploadFileFormat3) {
  UploadFileFormat3["UNDEFINED"] = "UNDEFINED";
  UploadFileFormat3["VIDEO"] = "VIDEO";
  UploadFileFormat3["IMAGE"] = "IMAGE";
  UploadFileFormat3["AUDIO"] = "AUDIO";
  UploadFileFormat3["DOCUMENT"] = "DOCUMENT";
  UploadFileFormat3["ARCHIVE"] = "ARCHIVE";
})(UploadFileFormat || (UploadFileFormat = {}));
var PaymentComponentType;
(function(PaymentComponentType3) {
  PaymentComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  PaymentComponentType3["CHECKBOX_GROUP"] = "CHECKBOX_GROUP";
  PaymentComponentType3["DONATION_INPUT"] = "DONATION_INPUT";
  PaymentComponentType3["PAYMENT_INPUT"] = "PAYMENT_INPUT";
  PaymentComponentType3["FIXED_PAYMENT"] = "FIXED_PAYMENT";
})(PaymentComponentType || (PaymentComponentType = {}));
var ProductType;
(function(ProductType3) {
  ProductType3["UNKNOWN"] = "UNKNOWN";
  ProductType3["SHIPPABLE"] = "SHIPPABLE";
  ProductType3["DIGITAL"] = "DIGITAL";
})(ProductType || (ProductType = {}));
var PriceType;
(function(PriceType3) {
  PriceType3["UNKNOWN"] = "UNKNOWN";
  PriceType3["FIXED_PRICE"] = "FIXED_PRICE";
  PriceType3["DYNAMIC_PRICE"] = "DYNAMIC_PRICE";
})(PriceType || (PriceType = {}));
var AddressComponentType;
(function(AddressComponentType3) {
  AddressComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  AddressComponentType3["MULTILINE_ADDRESS"] = "MULTILINE_ADDRESS";
})(AddressComponentType || (AddressComponentType = {}));
var DefaultCountryConfigType;
(function(DefaultCountryConfigType3) {
  DefaultCountryConfigType3["UNKNOWN_DEFAULT_COUNTRY"] = "UNKNOWN_DEFAULT_COUNTRY";
  DefaultCountryConfigType3["BY_IP"] = "BY_IP";
  DefaultCountryConfigType3["COUNTRY"] = "COUNTRY";
})(DefaultCountryConfigType || (DefaultCountryConfigType = {}));
var SchedulingComponentType;
(function(SchedulingComponentType3) {
  SchedulingComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  SchedulingComponentType3["APPOINTMENT"] = "APPOINTMENT";
})(SchedulingComponentType || (SchedulingComponentType = {}));
var AppointmentFormat;
(function(AppointmentFormat3) {
  AppointmentFormat3["UNKNOWN_FORMAT_TYPE"] = "UNKNOWN_FORMAT_TYPE";
  AppointmentFormat3["IN_PERSON"] = "IN_PERSON";
  AppointmentFormat3["VIDEO_CONFERENCE"] = "VIDEO_CONFERENCE";
  AppointmentFormat3["PHONE"] = "PHONE";
})(AppointmentFormat || (AppointmentFormat = {}));
var InputType;
(function(InputType3) {
  InputType3["UNKNOWN_INPUT_TYPE"] = "UNKNOWN_INPUT_TYPE";
  InputType3["STRING"] = "STRING";
  InputType3["NUMBER"] = "NUMBER";
  InputType3["BOOLEAN"] = "BOOLEAN";
  InputType3["ARRAY"] = "ARRAY";
  InputType3["OBJECT"] = "OBJECT";
  InputType3["WIX_FILE"] = "WIX_FILE";
  InputType3["PAYMENT"] = "PAYMENT";
  InputType3["MULTILINE_ADDRESS"] = "MULTILINE_ADDRESS";
  InputType3["SCHEDULING"] = "SCHEDULING";
  InputType3["ADDRESS"] = "ADDRESS";
})(InputType || (InputType = {}));
var EmailInfoTag;
(function(EmailInfoTag3) {
  EmailInfoTag3["UNTAGGED"] = "UNTAGGED";
  EmailInfoTag3["MAIN"] = "MAIN";
})(EmailInfoTag || (EmailInfoTag = {}));
var PhoneInfoTag;
(function(PhoneInfoTag3) {
  PhoneInfoTag3["UNTAGGED"] = "UNTAGGED";
  PhoneInfoTag3["MAIN"] = "MAIN";
})(PhoneInfoTag || (PhoneInfoTag = {}));
var AddressInfoTag;
(function(AddressInfoTag3) {
  AddressInfoTag3["UNTAGGED"] = "UNTAGGED";
  AddressInfoTag3["HOME"] = "HOME";
})(AddressInfoTag || (AddressInfoTag = {}));
var ConfirmationLevel;
(function(ConfirmationLevel3) {
  ConfirmationLevel3["UNKNOWN_CONFIRMATION_LEVEL"] = "UNKNOWN_CONFIRMATION_LEVEL";
  ConfirmationLevel3["SINGLE_CONFIRMATION"] = "SINGLE_CONFIRMATION";
  ConfirmationLevel3["DOUBLE_CONFIRMATION"] = "DOUBLE_CONFIRMATION";
})(ConfirmationLevel || (ConfirmationLevel = {}));
var ContactField;
(function(ContactField3) {
  ContactField3["UNKNOWN_CONTACT_FIELD"] = "UNKNOWN_CONTACT_FIELD";
  ContactField3["FIRST_NAME"] = "FIRST_NAME";
  ContactField3["LAST_NAME"] = "LAST_NAME";
  ContactField3["COMPANY"] = "COMPANY";
  ContactField3["POSITION"] = "POSITION";
  ContactField3["EMAIL"] = "EMAIL";
  ContactField3["PHONE"] = "PHONE";
  ContactField3["ADDRESS"] = "ADDRESS";
  ContactField3["BIRTHDATE"] = "BIRTHDATE";
  ContactField3["CUSTOM_FIELD"] = "CUSTOM_FIELD";
  ContactField3["SUBSCRIPTION"] = "SUBSCRIPTION";
  ContactField3["VAT_ID"] = "VAT_ID";
})(ContactField || (ContactField = {}));
var DisplayFieldType;
(function(DisplayFieldType3) {
  DisplayFieldType3["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
  DisplayFieldType3["RICH_CONTENT"] = "RICH_CONTENT";
  DisplayFieldType3["PAGE_NAVIGATION"] = "PAGE_NAVIGATION";
  DisplayFieldType3["LOGIN_BAR"] = "LOGIN_BAR";
})(DisplayFieldType || (DisplayFieldType = {}));
var ChangeableProperty;
(function(ChangeableProperty3) {
  ChangeableProperty3["UNKNOWN"] = "UNKNOWN";
  ChangeableProperty3["REQUIRED"] = "REQUIRED";
  ChangeableProperty3["HIDDEN"] = "HIDDEN";
  ChangeableProperty3["ALLOWED_VALUES"] = "ALLOWED_VALUES";
})(ChangeableProperty || (ChangeableProperty = {}));
var OverrideEntityType;
(function(OverrideEntityType3) {
  OverrideEntityType3["UNKNOWN"] = "UNKNOWN";
  OverrideEntityType3["FIELD"] = "FIELD";
})(OverrideEntityType || (OverrideEntityType = {}));
var Operator;
(function(Operator3) {
  Operator3["UNKNOWN"] = "UNKNOWN";
  Operator3["EQUAL"] = "EQUAL";
  Operator3["NOT_EQUAL"] = "NOT_EQUAL";
  Operator3["EMPTY"] = "EMPTY";
  Operator3["NOT_EMPTY"] = "NOT_EMPTY";
  Operator3["CONTAINS"] = "CONTAINS";
  Operator3["NOT_CONTAINS"] = "NOT_CONTAINS";
  Operator3["LESS_THAN"] = "LESS_THAN";
  Operator3["LESS_THAN_OR_EQUALS"] = "LESS_THAN_OR_EQUALS";
  Operator3["GREATER_THAN"] = "GREATER_THAN";
  Operator3["GREATER_THAN_OR_EQUALS"] = "GREATER_THAN_OR_EQUALS";
  Operator3["BEFORE"] = "BEFORE";
  Operator3["BEFORE_OR_EQUAL"] = "BEFORE_OR_EQUAL";
  Operator3["AFTER"] = "AFTER";
  Operator3["AFTER_OR_EQUAL"] = "AFTER_OR_EQUAL";
  Operator3["BETWEEN"] = "BETWEEN";
  Operator3["ANY"] = "ANY";
  Operator3["ARRAY_EQUAL"] = "ARRAY_EQUAL";
  Operator3["ARRAY_NOT_EQUAL"] = "ARRAY_NOT_EQUAL";
  Operator3["CHECKED"] = "CHECKED";
  Operator3["NOT_CHECKED"] = "NOT_CHECKED";
  Operator3["IN"] = "IN";
  Operator3["NOT_IN"] = "NOT_IN";
  Operator3["IS_DATE_OLDER_THAN"] = "IS_DATE_OLDER_THAN";
  Operator3["IS_DATE_OLDER_THAN_OR_EQUAL"] = "IS_DATE_OLDER_THAN_OR_EQUAL";
  Operator3["IS_DATE_NEWER_THAN"] = "IS_DATE_NEWER_THAN";
  Operator3["IS_DATE_NEWER_THAN_OR_EQUAL"] = "IS_DATE_NEWER_THAN_OR_EQUAL";
})(Operator || (Operator = {}));
var Target;
(function(Target3) {
  Target3["UNKNOWN_TARGET"] = "UNKNOWN_TARGET";
  Target3["SELF"] = "SELF";
  Target3["BLANK"] = "BLANK";
})(Target || (Target = {}));
var SubmitSuccessAction;
(function(SubmitSuccessAction3) {
  SubmitSuccessAction3["UNKNOWN_SUBMIT_SUCCESS_ACTION"] = "UNKNOWN_SUBMIT_SUCCESS_ACTION";
  SubmitSuccessAction3["NO_ACTION"] = "NO_ACTION";
  SubmitSuccessAction3["THANK_YOU_MESSAGE"] = "THANK_YOU_MESSAGE";
  SubmitSuccessAction3["REDIRECT"] = "REDIRECT";
})(SubmitSuccessAction || (SubmitSuccessAction = {}));
var TemplateType;
(function(TemplateType3) {
  TemplateType3["UNKNOWN"] = "UNKNOWN";
  TemplateType3["EXTENDABLE"] = "EXTENDABLE";
  TemplateType3["DEMO"] = "DEMO";
  TemplateType3["FORM_INPUT"] = "FORM_INPUT";
})(TemplateType || (TemplateType = {}));
var CustomFieldsType;
(function(CustomFieldsType3) {
  CustomFieldsType3["ANY"] = "ANY";
})(CustomFieldsType || (CustomFieldsType = {}));
var EditableProperties;
(function(EditableProperties3) {
  EditableProperties3["UNKNOWN"] = "UNKNOWN";
  EditableProperties3["REQUIRED"] = "REQUIRED";
  EditableProperties3["HIDDEN"] = "HIDDEN";
  EditableProperties3["LABEL"] = "LABEL";
  EditableProperties3["PLACEHOLDER"] = "PLACEHOLDER";
  EditableProperties3["DESCRIPTION"] = "DESCRIPTION";
  EditableProperties3["INPUT_VALUE_LIMITS"] = "INPUT_VALUE_LIMITS";
  EditableProperties3["DEFAULT_VALUE"] = "DEFAULT_VALUE";
})(EditableProperties || (EditableProperties = {}));
var RequiredIndicator;
(function(RequiredIndicator3) {
  RequiredIndicator3["UNKNOWN_INDICATOR"] = "UNKNOWN_INDICATOR";
  RequiredIndicator3["ASTERISK"] = "ASTERISK";
  RequiredIndicator3["TEXT"] = "TEXT";
  RequiredIndicator3["NONE"] = "NONE";
})(RequiredIndicator || (RequiredIndicator = {}));
var RequiredIndicatorPlacement;
(function(RequiredIndicatorPlacement3) {
  RequiredIndicatorPlacement3["UNKNOWN_PLACEMENT"] = "UNKNOWN_PLACEMENT";
  RequiredIndicatorPlacement3["AFTER_FIELD_TITLE"] = "AFTER_FIELD_TITLE";
  RequiredIndicatorPlacement3["BEFORE_FIELD_TITLE"] = "BEFORE_FIELD_TITLE";
})(RequiredIndicatorPlacement || (RequiredIndicatorPlacement = {}));
var WixCodePublishTaskName;
(function(WixCodePublishTaskName3) {
  WixCodePublishTaskName3["UNKNOWN"] = "UNKNOWN";
  WixCodePublishTaskName3["USER_CODE_BUNDLE"] = "USER_CODE_BUNDLE";
  WixCodePublishTaskName3["EXPORTED_FUNCTIONS_ANALYSIS"] = "EXPORTED_FUNCTIONS_ANALYSIS";
  WixCodePublishTaskName3["IMPORTED_NAMESPACES_ANALYSIS"] = "IMPORTED_NAMESPACES_ANALYSIS";
  WixCodePublishTaskName3["PAGE_DETAILS_ANALYSIS"] = "PAGE_DETAILS_ANALYSIS";
  WixCodePublishTaskName3["USER_CODE_VALIDATION"] = "USER_CODE_VALIDATION";
  WixCodePublishTaskName3["CODE_PACKAGES_REGISTRATION"] = "CODE_PACKAGES_REGISTRATION";
})(WixCodePublishTaskName || (WixCodePublishTaskName = {}));
var ChannelConfigurationChannelType;
(function(ChannelConfigurationChannelType3) {
  ChannelConfigurationChannelType3["UNKNOWN_CHANNEL_TYPE"] = "UNKNOWN_CHANNEL_TYPE";
  ChannelConfigurationChannelType3["DIRECT_MESSAGING"] = "DIRECT_MESSAGING";
  ChannelConfigurationChannelType3["EMAIL"] = "EMAIL";
  ChannelConfigurationChannelType3["SMS"] = "SMS";
})(ChannelConfigurationChannelType || (ChannelConfigurationChannelType = {}));
var AcceptedMessageTypesAcceptedDirectMessageType;
(function(AcceptedMessageTypesAcceptedDirectMessageType3) {
  AcceptedMessageTypesAcceptedDirectMessageType3["UNKNOWN_DIRECT_MESSAGE_TYPE"] = "UNKNOWN_DIRECT_MESSAGE_TYPE";
  AcceptedMessageTypesAcceptedDirectMessageType3["MEDIA"] = "MEDIA";
  AcceptedMessageTypesAcceptedDirectMessageType3["CARD"] = "CARD";
  AcceptedMessageTypesAcceptedDirectMessageType3["MINIMAL"] = "MINIMAL";
  AcceptedMessageTypesAcceptedDirectMessageType3["FORM"] = "FORM";
  AcceptedMessageTypesAcceptedDirectMessageType3["SYSTEM"] = "SYSTEM";
})(AcceptedMessageTypesAcceptedDirectMessageType || (AcceptedMessageTypesAcceptedDirectMessageType = {}));
var AcceptedMessageTypesAcceptedSmsMessageType;
(function(AcceptedMessageTypesAcceptedSmsMessageType3) {
  AcceptedMessageTypesAcceptedSmsMessageType3["UNKNOWN_SMS_MESSAGE_TYPE"] = "UNKNOWN_SMS_MESSAGE_TYPE";
  AcceptedMessageTypesAcceptedSmsMessageType3["SMS"] = "SMS";
  AcceptedMessageTypesAcceptedSmsMessageType3["MMS"] = "MMS";
})(AcceptedMessageTypesAcceptedSmsMessageType || (AcceptedMessageTypesAcceptedSmsMessageType = {}));
var FactorType;
(function(FactorType3) {
  FactorType3["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
  FactorType3["PASSWORD"] = "PASSWORD";
  FactorType3["SMS"] = "SMS";
  FactorType3["CALL"] = "CALL";
  FactorType3["EMAIL"] = "EMAIL";
  FactorType3["TOTP"] = "TOTP";
  FactorType3["PUSH"] = "PUSH";
  FactorType3["WEBAUTHN"] = "WEBAUTHN";
  FactorType3["RECOVERY_CODE"] = "RECOVERY_CODE";
})(FactorType || (FactorType = {}));
var MonitoringType;
(function(MonitoringType3) {
  MonitoringType3["UNKNOWN_PROVIDER"] = "UNKNOWN_PROVIDER";
  MonitoringType3["SENTRY"] = "SENTRY";
  MonitoringType3["PANORAMA"] = "PANORAMA";
})(MonitoringType || (MonitoringType = {}));
var Escalation;
(function(Escalation3) {
  Escalation3["BREAK_BUILD"] = "BREAK_BUILD";
  Escalation3["BLOCK_ROLLOUT"] = "BLOCK_ROLLOUT";
  Escalation3["BLOCK_FUTURE_ROLLOUT"] = "BLOCK_FUTURE_ROLLOUT";
  Escalation3["OPEN_BUG_SLA"] = "OPEN_BUG_SLA";
  Escalation3["VISIBILITY"] = "VISIBILITY";
})(Escalation || (Escalation = {}));
var ImportanceLevel;
(function(ImportanceLevel3) {
  ImportanceLevel3["LOW"] = "LOW";
  ImportanceLevel3["MEDIUM"] = "MEDIUM";
  ImportanceLevel3["HIGH"] = "HIGH";
})(ImportanceLevel || (ImportanceLevel = {}));
var PanelSizeWidth;
(function(PanelSizeWidth3) {
  PanelSizeWidth3["UNKNOWN_WIDTH"] = "UNKNOWN_WIDTH";
  PanelSizeWidth3["SMALL"] = "SMALL";
  PanelSizeWidth3["MEDIUM"] = "MEDIUM";
  PanelSizeWidth3["LARGE"] = "LARGE";
})(PanelSizeWidth || (PanelSizeWidth = {}));
var PanelContentType;
(function(PanelContentType3) {
  PanelContentType3["UNKNOWN_PanelContentType"] = "UNKNOWN_PanelContentType";
  PanelContentType3["url"] = "url";
  PanelContentType3["code"] = "code";
})(PanelContentType || (PanelContentType = {}));
var StorageType;
(function(StorageType3) {
  StorageType3["UNKNOWN_STORAGE_TYPE"] = "UNKNOWN_STORAGE_TYPE";
  StorageType3["COOKIE"] = "COOKIE";
  StorageType3["LOCALSTORAGE"] = "LOCALSTORAGE";
  StorageType3["SESSIONSTORAGE"] = "SESSIONSTORAGE";
  StorageType3["INDEXDB"] = "INDEXDB";
})(StorageType || (StorageType = {}));
var ConsentCategory;
(function(ConsentCategory3) {
  ConsentCategory3["UNKNOWN_CATEGORY"] = "UNKNOWN_CATEGORY";
  ConsentCategory3["essential"] = "essential";
  ConsentCategory3["functional"] = "functional";
  ConsentCategory3["analytics"] = "analytics";
  ConsentCategory3["advertising"] = "advertising";
})(ConsentCategory || (ConsentCategory = {}));
var StorageDomain;
(function(StorageDomain3) {
  StorageDomain3["UNKNOWN_STORAGE_DOMAIN"] = "UNKNOWN_STORAGE_DOMAIN";
  StorageDomain3["SITE_DOMAIN"] = "SITE_DOMAIN";
  StorageDomain3["WIX_DOMAIN"] = "WIX_DOMAIN";
  StorageDomain3["APP_DOMAIN"] = "APP_DOMAIN";
})(StorageDomain || (StorageDomain = {}));
var Method;
(function(Method3) {
  Method3["CREATE"] = "CREATE";
  Method3["UPDATE"] = "UPDATE";
  Method3["CANCEL"] = "CANCEL";
})(Method || (Method = {}));
var ParticipantType;
(function(ParticipantType3) {
  ParticipantType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  ParticipantType3["WIX_USER"] = "WIX_USER";
  ParticipantType3["CONTACT"] = "CONTACT";
  ParticipantType3["ANONYMOUS"] = "ANONYMOUS";
})(ParticipantType || (ParticipantType = {}));
var V1InterfaceConfigurationType;
(function(V1InterfaceConfigurationType2) {
  V1InterfaceConfigurationType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  V1InterfaceConfigurationType2["WIDGET_COMPONENT"] = "WIDGET_COMPONENT";
  V1InterfaceConfigurationType2["ITEM_SELECTION"] = "ITEM_SELECTION";
})(V1InterfaceConfigurationType || (V1InterfaceConfigurationType = {}));
var Scope;
(function(Scope3) {
  Scope3["UNKNOWN_SCOPE"] = "UNKNOWN_SCOPE";
  Scope3["SPECIFIC_SITE"] = "SPECIFIC_SITE";
  Scope3["NON_SPECIFIC_SITE"] = "NON_SPECIFIC_SITE";
})(Scope || (Scope = {}));
var CssPropertyType;
(function(CssPropertyType3) {
  CssPropertyType3["UNKNOWN_CssPropertyType"] = "UNKNOWN_CssPropertyType";
  CssPropertyType3["background"] = "background";
  CssPropertyType3["backgroundSize"] = "backgroundSize";
  CssPropertyType3["backgroundColor"] = "backgroundColor";
  CssPropertyType3["backgroundImage"] = "backgroundImage";
  CssPropertyType3["backgroundClip"] = "backgroundClip";
  CssPropertyType3["backgroundOrigin"] = "backgroundOrigin";
  CssPropertyType3["backgroundPosition"] = "backgroundPosition";
  CssPropertyType3["backgroundRepeat"] = "backgroundRepeat";
  CssPropertyType3["backgroundAttachment"] = "backgroundAttachment";
  CssPropertyType3["fill"] = "fill";
  CssPropertyType3["fillOpacity"] = "fillOpacity";
  CssPropertyType3["margin"] = "margin";
  CssPropertyType3["marginTop"] = "marginTop";
  CssPropertyType3["marginRight"] = "marginRight";
  CssPropertyType3["marginBottom"] = "marginBottom";
  CssPropertyType3["marginLeft"] = "marginLeft";
  CssPropertyType3["marginInlineStart"] = "marginInlineStart";
  CssPropertyType3["marginInlineEnd"] = "marginInlineEnd";
  CssPropertyType3["padding"] = "padding";
  CssPropertyType3["paddingTop"] = "paddingTop";
  CssPropertyType3["paddingRight"] = "paddingRight";
  CssPropertyType3["paddingBottom"] = "paddingBottom";
  CssPropertyType3["paddingLeft"] = "paddingLeft";
  CssPropertyType3["paddingInlineStart"] = "paddingInlineStart";
  CssPropertyType3["paddingInlineEnd"] = "paddingInlineEnd";
  CssPropertyType3["border"] = "border";
  CssPropertyType3["borderWidth"] = "borderWidth";
  CssPropertyType3["borderStyle"] = "borderStyle";
  CssPropertyType3["borderColor"] = "borderColor";
  CssPropertyType3["borderTop"] = "borderTop";
  CssPropertyType3["borderTopColor"] = "borderTopColor";
  CssPropertyType3["borderTopWidth"] = "borderTopWidth";
  CssPropertyType3["borderTopStyle"] = "borderTopStyle";
  CssPropertyType3["borderRight"] = "borderRight";
  CssPropertyType3["borderRightColor"] = "borderRightColor";
  CssPropertyType3["borderRightWidth"] = "borderRightWidth";
  CssPropertyType3["borderRightStyle"] = "borderRightStyle";
  CssPropertyType3["borderBottom"] = "borderBottom";
  CssPropertyType3["borderBottomColor"] = "borderBottomColor";
  CssPropertyType3["borderBottomWidth"] = "borderBottomWidth";
  CssPropertyType3["borderBottomStyle"] = "borderBottomStyle";
  CssPropertyType3["borderLeft"] = "borderLeft";
  CssPropertyType3["borderLeftColor"] = "borderLeftColor";
  CssPropertyType3["borderLeftWidth"] = "borderLeftWidth";
  CssPropertyType3["borderLeftStyle"] = "borderLeftStyle";
  CssPropertyType3["borderInlineStart"] = "borderInlineStart";
  CssPropertyType3["borderInlineStartColor"] = "borderInlineStartColor";
  CssPropertyType3["borderInlineStartWidth"] = "borderInlineStartWidth";
  CssPropertyType3["borderInlineStartStyle"] = "borderInlineStartStyle";
  CssPropertyType3["borderInlineEnd"] = "borderInlineEnd";
  CssPropertyType3["borderInlineEndColor"] = "borderInlineEndColor";
  CssPropertyType3["borderInlineEndWidth"] = "borderInlineEndWidth";
  CssPropertyType3["borderInlineEndStyle"] = "borderInlineEndStyle";
  CssPropertyType3["borderRadius"] = "borderRadius";
  CssPropertyType3["borderTopLeftRadius"] = "borderTopLeftRadius";
  CssPropertyType3["borderTopRightRadius"] = "borderTopRightRadius";
  CssPropertyType3["borderBottomRightRadius"] = "borderBottomRightRadius";
  CssPropertyType3["borderBottomLeftRadius"] = "borderBottomLeftRadius";
  CssPropertyType3["borderStartStartRadius"] = "borderStartStartRadius";
  CssPropertyType3["borderStartEndRadius"] = "borderStartEndRadius";
  CssPropertyType3["borderEndStartRadius"] = "borderEndStartRadius";
  CssPropertyType3["borderEndEndRadius"] = "borderEndEndRadius";
  CssPropertyType3["font"] = "font";
  CssPropertyType3["fontFamily"] = "fontFamily";
  CssPropertyType3["fontSize"] = "fontSize";
  CssPropertyType3["fontStretch"] = "fontStretch";
  CssPropertyType3["fontStyle"] = "fontStyle";
  CssPropertyType3["fontVariant"] = "fontVariant";
  CssPropertyType3["fontWeight"] = "fontWeight";
  CssPropertyType3["lineHeight"] = "lineHeight";
  CssPropertyType3["color"] = "color";
  CssPropertyType3["letterSpacing"] = "letterSpacing";
  CssPropertyType3["writingMode"] = "writingMode";
  CssPropertyType3["textAlign"] = "textAlign";
  CssPropertyType3["textTransform"] = "textTransform";
  CssPropertyType3["textShadow"] = "textShadow";
  CssPropertyType3["textOverflow"] = "textOverflow";
  CssPropertyType3["textIndent"] = "textIndent";
  CssPropertyType3["textDecoration"] = "textDecoration";
  CssPropertyType3["textDecorationColor"] = "textDecorationColor";
  CssPropertyType3["textDecorationLine"] = "textDecorationLine";
  CssPropertyType3["textDecorationStyle"] = "textDecorationStyle";
  CssPropertyType3["textDecorationThickness"] = "textDecorationThickness";
  CssPropertyType3["boxShadow"] = "boxShadow";
  CssPropertyType3["opacity"] = "opacity";
  CssPropertyType3["overflow"] = "overflow";
  CssPropertyType3["display"] = "display";
  CssPropertyType3["alignSelf"] = "alignSelf";
  CssPropertyType3["justifyContent"] = "justifyContent";
  CssPropertyType3["alignItems"] = "alignItems";
  CssPropertyType3["flexDirection"] = "flexDirection";
  CssPropertyType3["gap"] = "gap";
  CssPropertyType3["height"] = "height";
  CssPropertyType3["width"] = "width";
  CssPropertyType3["columnGap"] = "columnGap";
  CssPropertyType3["rowGap"] = "rowGap";
  CssPropertyType3["filter"] = "filter";
  CssPropertyType3["backdropFilter"] = "backdropFilter";
  CssPropertyType3["objectFit"] = "objectFit";
  CssPropertyType3["objectPosition"] = "objectPosition";
  CssPropertyType3["mixBlendMode"] = "mixBlendMode";
  CssPropertyType3["isolation"] = "isolation";
  CssPropertyType3["stroke"] = "stroke";
  CssPropertyType3["strokeWidth"] = "strokeWidth";
  CssPropertyType3["strokeOpacity"] = "strokeOpacity";
})(CssPropertyType || (CssPropertyType = {}));
var CssDataType;
(function(CssDataType3) {
  CssDataType3["UNKNOWN_CssDataType"] = "UNKNOWN_CssDataType";
  CssDataType3["number"] = "number";
  CssDataType3["length"] = "length";
  CssDataType3["color"] = "color";
  CssDataType3["angle"] = "angle";
  CssDataType3["percentage"] = "percentage";
  CssDataType3["lengthPercentage"] = "lengthPercentage";
  CssDataType3["blendMode"] = "blendMode";
  CssDataType3["customEnum"] = "customEnum";
  CssDataType3["string"] = "string";
  CssDataType3["time"] = "time";
})(CssDataType || (CssDataType = {}));
var StyleType;
(function(StyleType3) {
  StyleType3["UNKNOWN_StyleType"] = "UNKNOWN_StyleType";
  StyleType3["number"] = "number";
  StyleType3["string"] = "string";
  StyleType3["angle"] = "angle";
  StyleType3["length"] = "length";
  StyleType3["percentage"] = "percentage";
  StyleType3["lengthPercentage"] = "lengthPercentage";
  StyleType3["blendMode"] = "blendMode";
  StyleType3["customEnum"] = "customEnum";
  StyleType3["time"] = "time";
  StyleType3["background"] = "background";
  StyleType3["backgroundSize"] = "backgroundSize";
  StyleType3["backgroundColor"] = "backgroundColor";
  StyleType3["backgroundImage"] = "backgroundImage";
  StyleType3["backgroundClip"] = "backgroundClip";
  StyleType3["backgroundOrigin"] = "backgroundOrigin";
  StyleType3["backgroundPosition"] = "backgroundPosition";
  StyleType3["backgroundRepeat"] = "backgroundRepeat";
  StyleType3["backgroundAttachment"] = "backgroundAttachment";
  StyleType3["margin"] = "margin";
  StyleType3["marginTop"] = "marginTop";
  StyleType3["marginRight"] = "marginRight";
  StyleType3["marginBottom"] = "marginBottom";
  StyleType3["marginLeft"] = "marginLeft";
  StyleType3["marginInlineStart"] = "marginInlineStart";
  StyleType3["marginInlineEnd"] = "marginInlineEnd";
  StyleType3["padding"] = "padding";
  StyleType3["paddingTop"] = "paddingTop";
  StyleType3["paddingRight"] = "paddingRight";
  StyleType3["paddingBottom"] = "paddingBottom";
  StyleType3["paddingLeft"] = "paddingLeft";
  StyleType3["paddingInlineStart"] = "paddingInlineStart";
  StyleType3["paddingInlineEnd"] = "paddingInlineEnd";
  StyleType3["border"] = "border";
  StyleType3["borderWidth"] = "borderWidth";
  StyleType3["borderStyle"] = "borderStyle";
  StyleType3["borderColor"] = "borderColor";
  StyleType3["borderTop"] = "borderTop";
  StyleType3["borderTopColor"] = "borderTopColor";
  StyleType3["borderTopWidth"] = "borderTopWidth";
  StyleType3["borderTopStyle"] = "borderTopStyle";
  StyleType3["borderRight"] = "borderRight";
  StyleType3["borderRightColor"] = "borderRightColor";
  StyleType3["borderRightWidth"] = "borderRightWidth";
  StyleType3["borderRightStyle"] = "borderRightStyle";
  StyleType3["borderBottom"] = "borderBottom";
  StyleType3["borderBottomColor"] = "borderBottomColor";
  StyleType3["borderBottomWidth"] = "borderBottomWidth";
  StyleType3["borderBottomStyle"] = "borderBottomStyle";
  StyleType3["borderLeft"] = "borderLeft";
  StyleType3["borderLeftColor"] = "borderLeftColor";
  StyleType3["borderLeftWidth"] = "borderLeftWidth";
  StyleType3["borderLeftStyle"] = "borderLeftStyle";
  StyleType3["borderInlineStart"] = "borderInlineStart";
  StyleType3["borderInlineStartColor"] = "borderInlineStartColor";
  StyleType3["borderInlineStartWidth"] = "borderInlineStartWidth";
  StyleType3["borderInlineStartStyle"] = "borderInlineStartStyle";
  StyleType3["borderInlineEnd"] = "borderInlineEnd";
  StyleType3["borderInlineEndColor"] = "borderInlineEndColor";
  StyleType3["borderInlineEndWidth"] = "borderInlineEndWidth";
  StyleType3["borderInlineEndStyle"] = "borderInlineEndStyle";
  StyleType3["borderRadius"] = "borderRadius";
  StyleType3["borderTopLeftRadius"] = "borderTopLeftRadius";
  StyleType3["borderTopRightRadius"] = "borderTopRightRadius";
  StyleType3["borderBottomRightRadius"] = "borderBottomRightRadius";
  StyleType3["borderBottomLeftRadius"] = "borderBottomLeftRadius";
  StyleType3["borderStartStartRadius"] = "borderStartStartRadius";
  StyleType3["borderStartEndRadius"] = "borderStartEndRadius";
  StyleType3["borderEndStartRadius"] = "borderEndStartRadius";
  StyleType3["borderEndEndRadius"] = "borderEndEndRadius";
  StyleType3["font"] = "font";
  StyleType3["fontFamily"] = "fontFamily";
  StyleType3["fontSize"] = "fontSize";
  StyleType3["fontStretch"] = "fontStretch";
  StyleType3["fontStyle"] = "fontStyle";
  StyleType3["fontVariant"] = "fontVariant";
  StyleType3["fontWeight"] = "fontWeight";
  StyleType3["lineHeight"] = "lineHeight";
  StyleType3["color"] = "color";
  StyleType3["letterSpacing"] = "letterSpacing";
  StyleType3["writingMode"] = "writingMode";
  StyleType3["textAlign"] = "textAlign";
  StyleType3["textTransform"] = "textTransform";
  StyleType3["textShadow"] = "textShadow";
  StyleType3["textOverflow"] = "textOverflow";
  StyleType3["textIndent"] = "textIndent";
  StyleType3["textDecoration"] = "textDecoration";
  StyleType3["textDecorationColor"] = "textDecorationColor";
  StyleType3["textDecorationLine"] = "textDecorationLine";
  StyleType3["textDecorationStyle"] = "textDecorationStyle";
  StyleType3["textDecorationThickness"] = "textDecorationThickness";
  StyleType3["boxShadow"] = "boxShadow";
  StyleType3["opacity"] = "opacity";
  StyleType3["overflow"] = "overflow";
  StyleType3["overflowX"] = "overflowX";
  StyleType3["overflowY"] = "overflowY";
  StyleType3["display"] = "display";
  StyleType3["alignSelf"] = "alignSelf";
  StyleType3["justifyContent"] = "justifyContent";
  StyleType3["alignItems"] = "alignItems";
  StyleType3["flexDirection"] = "flexDirection";
  StyleType3["height"] = "height";
  StyleType3["width"] = "width";
  StyleType3["gap"] = "gap";
  StyleType3["columnGap"] = "columnGap";
  StyleType3["rowGap"] = "rowGap";
  StyleType3["filter"] = "filter";
  StyleType3["backdropFilter"] = "backdropFilter";
  StyleType3["objectFit"] = "objectFit";
  StyleType3["objectPosition"] = "objectPosition";
  StyleType3["mixBlendMode"] = "mixBlendMode";
  StyleType3["isolation"] = "isolation";
  StyleType3["stroke"] = "stroke";
  StyleType3["strokeWidth"] = "strokeWidth";
  StyleType3["strokeOpacity"] = "strokeOpacity";
  StyleType3["fill"] = "fill";
  StyleType3["fillOpacity"] = "fillOpacity";
})(StyleType || (StyleType = {}));
var FilterFunction;
(function(FilterFunction3) {
  FilterFunction3["UNKNOWN_FilterFunctions"] = "UNKNOWN_FilterFunctions";
  FilterFunction3["blur"] = "blur";
  FilterFunction3["brightness"] = "brightness";
  FilterFunction3["contrast"] = "contrast";
  FilterFunction3["drop_shadow"] = "drop_shadow";
  FilterFunction3["grayscale"] = "grayscale";
  FilterFunction3["hue_rotate"] = "hue_rotate";
  FilterFunction3["invert"] = "invert";
  FilterFunction3["opacity"] = "opacity";
  FilterFunction3["sepia"] = "sepia";
  FilterFunction3["saturate"] = "saturate";
})(FilterFunction || (FilterFunction = {}));
var DisplayValueEnumDisplayValue;
(function(DisplayValueEnumDisplayValue3) {
  DisplayValueEnumDisplayValue3["UNKNOWN_DisplayValue"] = "UNKNOWN_DisplayValue";
  DisplayValueEnumDisplayValue3["none"] = "none";
  DisplayValueEnumDisplayValue3["block"] = "block";
  DisplayValueEnumDisplayValue3["inline"] = "inline";
  DisplayValueEnumDisplayValue3["flow"] = "flow";
  DisplayValueEnumDisplayValue3["flowRoot"] = "flowRoot";
  DisplayValueEnumDisplayValue3["table"] = "table";
  DisplayValueEnumDisplayValue3["flex"] = "flex";
  DisplayValueEnumDisplayValue3["grid"] = "grid";
  DisplayValueEnumDisplayValue3["list_item"] = "list_item";
  DisplayValueEnumDisplayValue3["contents"] = "contents";
  DisplayValueEnumDisplayValue3["inline_block"] = "inline_block";
  DisplayValueEnumDisplayValue3["inline_table"] = "inline_table";
  DisplayValueEnumDisplayValue3["inline_flex"] = "inline_flex";
  DisplayValueEnumDisplayValue3["inline_grid"] = "inline_grid";
})(DisplayValueEnumDisplayValue || (DisplayValueEnumDisplayValue = {}));
var WritingModeValue;
(function(WritingModeValue3) {
  WritingModeValue3["UNKNOWN_WritingModeValue"] = "UNKNOWN_WritingModeValue";
  WritingModeValue3["horizontalTb"] = "horizontalTb";
  WritingModeValue3["verticalRl"] = "verticalRl";
  WritingModeValue3["verticalLr"] = "verticalLr";
  WritingModeValue3["sidewaysRl"] = "sidewaysRl";
  WritingModeValue3["sidewaysLr"] = "sidewaysLr";
})(WritingModeValue || (WritingModeValue = {}));
var BackgroundModeEnum;
(function(BackgroundModeEnum3) {
  BackgroundModeEnum3["UNKNOWN_BackgroundModeEnum"] = "UNKNOWN_BackgroundModeEnum";
  BackgroundModeEnum3["shapeDividerSvg"] = "shapeDividerSvg";
})(BackgroundModeEnum || (BackgroundModeEnum = {}));
var ImageCategoryTypes;
(function(ImageCategoryTypes3) {
  ImageCategoryTypes3["UNKNOWN_CategoryName"] = "UNKNOWN_CategoryName";
  ImageCategoryTypes3["IMAGE"] = "IMAGE";
  ImageCategoryTypes3["IMAGE_BACKGROUND"] = "IMAGE_BACKGROUND";
})(ImageCategoryTypes || (ImageCategoryTypes = {}));
var VectorArtCategoryTypes;
(function(VectorArtCategoryTypes3) {
  VectorArtCategoryTypes3["UNKNOWN_VectorArtCategoryTypes"] = "UNKNOWN_VectorArtCategoryTypes";
  VectorArtCategoryTypes3["SHAPE_ALL"] = "SHAPE_ALL";
  VectorArtCategoryTypes3["SHAPE_BASIC"] = "SHAPE_BASIC";
  VectorArtCategoryTypes3["SHAPE_ART"] = "SHAPE_ART";
  VectorArtCategoryTypes3["ICON_SOCIAL"] = "ICON_SOCIAL";
  VectorArtCategoryTypes3["SHAPE_DIVIDERS"] = "SHAPE_DIVIDERS";
  VectorArtCategoryTypes3["SHAPE_LOCATION"] = "SHAPE_LOCATION";
})(VectorArtCategoryTypes || (VectorArtCategoryTypes = {}));
var CssDataTypeEnumCssDataType;
(function(CssDataTypeEnumCssDataType3) {
  CssDataTypeEnumCssDataType3["UNKNOWN_CssDataType"] = "UNKNOWN_CssDataType";
  CssDataTypeEnumCssDataType3["number"] = "number";
  CssDataTypeEnumCssDataType3["string"] = "string";
  CssDataTypeEnumCssDataType3["angle"] = "angle";
  CssDataTypeEnumCssDataType3["color"] = "color";
  CssDataTypeEnumCssDataType3["length"] = "length";
  CssDataTypeEnumCssDataType3["percentage"] = "percentage";
  CssDataTypeEnumCssDataType3["lengthPercentage"] = "lengthPercentage";
  CssDataTypeEnumCssDataType3["blendMode"] = "blendMode";
  CssDataTypeEnumCssDataType3["customEnum"] = "customEnum";
  CssDataTypeEnumCssDataType3["time"] = "time";
})(CssDataTypeEnumCssDataType || (CssDataTypeEnumCssDataType = {}));
var DataType;
(function(DataType3) {
  DataType3["UNKNOWN_DataType"] = "UNKNOWN_DataType";
  DataType3["text"] = "text";
  DataType3["textEnum"] = "textEnum";
  DataType3["number"] = "number";
  DataType3["booleanValue"] = "booleanValue";
  DataType3["a11y"] = "a11y";
  DataType3["link"] = "link";
  DataType3["image"] = "image";
  DataType3["video"] = "video";
  DataType3["vectorArt"] = "vectorArt";
  DataType3["audio"] = "audio";
  DataType3["schema"] = "schema";
  DataType3["localDate"] = "localDate";
  DataType3["localTime"] = "localTime";
  DataType3["localDateTime"] = "localDateTime";
  DataType3["webUrl"] = "webUrl";
  DataType3["email"] = "email";
  DataType3["phone"] = "phone";
  DataType3["hostname"] = "hostname";
  DataType3["regex"] = "regex";
  DataType3["guid"] = "guid";
  DataType3["richText"] = "richText";
  DataType3["container"] = "container";
  DataType3["arrayItems"] = "arrayItems";
  DataType3["direction"] = "direction";
  DataType3["menuItems"] = "menuItems";
  DataType3["data"] = "data";
})(DataType || (DataType = {}));
var A11yAttributes;
(function(A11yAttributes3) {
  A11yAttributes3["Unknown_AriaAttributes"] = "Unknown_AriaAttributes";
  A11yAttributes3["tabIndex"] = "tabIndex";
  A11yAttributes3["ariaLevel"] = "ariaLevel";
  A11yAttributes3["ariaExpanded"] = "ariaExpanded";
  A11yAttributes3["ariaDisabled"] = "ariaDisabled";
  A11yAttributes3["ariaAtomic"] = "ariaAtomic";
  A11yAttributes3["ariaHidden"] = "ariaHidden";
  A11yAttributes3["ariaBusy"] = "ariaBusy";
  A11yAttributes3["multiline"] = "multiline";
  A11yAttributes3["ariaAutocomplete"] = "ariaAutocomplete";
  A11yAttributes3["ariaPressed"] = "ariaPressed";
  A11yAttributes3["ariaHaspopup"] = "ariaHaspopup";
  A11yAttributes3["ariaRelevant"] = "ariaRelevant";
  A11yAttributes3["role"] = "role";
  A11yAttributes3["ariaLive"] = "ariaLive";
  A11yAttributes3["ariaCurrent"] = "ariaCurrent";
  A11yAttributes3["ariaLabel"] = "ariaLabel";
  A11yAttributes3["ariaRoledescription"] = "ariaRoledescription";
  A11yAttributes3["ariaDescribedby"] = "ariaDescribedby";
  A11yAttributes3["ariaLabelledby"] = "ariaLabelledby";
  A11yAttributes3["ariaErrormessage"] = "ariaErrormessage";
  A11yAttributes3["ariaOwns"] = "ariaOwns";
  A11yAttributes3["ariaControls"] = "ariaControls";
  A11yAttributes3["tag"] = "tag";
  A11yAttributes3["ariaMultiline"] = "ariaMultiline";
  A11yAttributes3["ariaInvalid"] = "ariaInvalid";
})(A11yAttributes || (A11yAttributes = {}));
var LinkType;
(function(LinkType3) {
  LinkType3["UNKNOWN_LinkType"] = "UNKNOWN_LinkType";
  LinkType3["externalLink"] = "externalLink";
  LinkType3["anchorLink"] = "anchorLink";
  LinkType3["emailLink"] = "emailLink";
  LinkType3["phoneLink"] = "phoneLink";
  LinkType3["dynamicPageLink"] = "dynamicPageLink";
  LinkType3["pageLink"] = "pageLink";
  LinkType3["whatsAppLink"] = "whatsAppLink";
  LinkType3["documentLink"] = "documentLink";
  LinkType3["popupLink"] = "popupLink";
  LinkType3["addressLink"] = "addressLink";
  LinkType3["edgeAnchorLinks"] = "edgeAnchorLinks";
  LinkType3["loginToWixLink"] = "loginToWixLink";
})(LinkType || (LinkType = {}));
var ContainerType;
(function(ContainerType3) {
  ContainerType3["UNKNOWN_CONTAINER_TYPE"] = "UNKNOWN_CONTAINER_TYPE";
  ContainerType3["simple"] = "simple";
  ContainerType3["slot"] = "slot";
  ContainerType3["placeholder"] = "placeholder";
  ContainerType3["template"] = "template";
})(ContainerType || (ContainerType = {}));
var ResizeDirection;
(function(ResizeDirection3) {
  ResizeDirection3["UNKNOWN_ResizeDirection"] = "UNKNOWN_ResizeDirection";
  ResizeDirection3["horizontal"] = "horizontal";
  ResizeDirection3["vertical"] = "vertical";
  ResizeDirection3["horizontalAndVertical"] = "horizontalAndVertical";
  ResizeDirection3["aspectRatio"] = "aspectRatio";
  ResizeDirection3["none"] = "none";
})(ResizeDirection || (ResizeDirection = {}));
var RichTextAbilities;
(function(RichTextAbilities3) {
  RichTextAbilities3["UNKNOWN_RichTextAbilities"] = "UNKNOWN_RichTextAbilities";
  RichTextAbilities3["font"] = "font";
  RichTextAbilities3["fontFamily"] = "fontFamily";
  RichTextAbilities3["fontSize"] = "fontSize";
  RichTextAbilities3["fontStyle"] = "fontStyle";
  RichTextAbilities3["fontWeight"] = "fontWeight";
  RichTextAbilities3["textDecoration"] = "textDecoration";
  RichTextAbilities3["color"] = "color";
  RichTextAbilities3["backgroundColor"] = "backgroundColor";
  RichTextAbilities3["letterSpacing"] = "letterSpacing";
  RichTextAbilities3["textAlign"] = "textAlign";
  RichTextAbilities3["direction"] = "direction";
  RichTextAbilities3["marginStart"] = "marginStart";
  RichTextAbilities3["marginEnd"] = "marginEnd";
  RichTextAbilities3["bulletedList"] = "bulletedList";
  RichTextAbilities3["numberedList"] = "numberedList";
  RichTextAbilities3["seoTag"] = "seoTag";
})(RichTextAbilities || (RichTextAbilities = {}));
var VideoCategoryTypes;
(function(VideoCategoryTypes3) {
  VideoCategoryTypes3["UNKNOWN_VideoCategoryTypes"] = "UNKNOWN_VideoCategoryTypes";
  VideoCategoryTypes3["VIDEO"] = "VIDEO";
  VideoCategoryTypes3["VIDEO_TRANSPARENT"] = "VIDEO_TRANSPARENT";
  VideoCategoryTypes3["VIDEO_OPAQUE"] = "VIDEO_OPAQUE";
})(VideoCategoryTypes || (VideoCategoryTypes = {}));
var ElementTypeEnumElementType;
(function(ElementTypeEnumElementType3) {
  ElementTypeEnumElementType3["UNKNOWN_ElementType"] = "UNKNOWN_ElementType";
  ElementTypeEnumElementType3["inlineElement"] = "inlineElement";
  ElementTypeEnumElementType3["refElement"] = "refElement";
})(ElementTypeEnumElementType || (ElementTypeEnumElementType = {}));
var ActionType;
(function(ActionType3) {
  ActionType3["UNKNOWN_ActionType"] = "UNKNOWN_ActionType";
  ActionType3["data"] = "data";
  ActionType3["event"] = "event";
  ActionType3["panel"] = "panel";
  ActionType3["forward"] = "forward";
  ActionType3["style"] = "style";
  ActionType3["displayGroup"] = "displayGroup";
  ActionType3["cssProperty"] = "cssProperty";
  ActionType3["cssCustomProperty"] = "cssCustomProperty";
})(ActionType || (ActionType = {}));
var PanelType;
(function(PanelType3) {
  PanelType3["UNKNOWN_PanelType"] = "UNKNOWN_PanelType";
  PanelType3["panelId"] = "panelId";
  PanelType3["inline"] = "inline";
})(PanelType || (PanelType = {}));
var ActionName;
(function(ActionName3) {
  ActionName3["UNKNOWN_ActionName"] = "UNKNOWN_ActionName";
  ActionName3["settings"] = "settings";
  ActionName3["design"] = "design";
  ActionName3["media"] = "media";
  ActionName3["manageItems"] = "manageItems";
  ActionName3["dashboard"] = "dashboard";
  ActionName3["custom"] = "custom";
  ActionName3["manageMenu"] = "manageMenu";
  ActionName3["container"] = "container";
})(ActionName || (ActionName = {}));
var SizingType;
(function(SizingType3) {
  SizingType3["UNKNOWN_SizingType"] = "UNKNOWN_SizingType";
  SizingType3["content"] = "content";
  SizingType3["stretched"] = "stretched";
  SizingType3["pixels"] = "pixels";
})(SizingType || (SizingType = {}));
var BreakpointEnumBreakpoint;
(function(BreakpointEnumBreakpoint3) {
  BreakpointEnumBreakpoint3["UNKNOWN_Breakpoint"] = "UNKNOWN_Breakpoint";
  BreakpointEnumBreakpoint3["small"] = "small";
  BreakpointEnumBreakpoint3["large"] = "large";
})(BreakpointEnumBreakpoint || (BreakpointEnumBreakpoint = {}));
var ContentResizeDirection;
(function(ContentResizeDirection3) {
  ContentResizeDirection3["UNKNOWN_ContentResizeDirection"] = "UNKNOWN_ContentResizeDirection";
  ContentResizeDirection3["horizontal"] = "horizontal";
  ContentResizeDirection3["vertical"] = "vertical";
  ContentResizeDirection3["horizontalAndVertical"] = "horizontalAndVertical";
  ContentResizeDirection3["none"] = "none";
})(ContentResizeDirection || (ContentResizeDirection = {}));
var Archetype;
(function(Archetype3) {
  Archetype3["UNKNOWN_Archetype"] = "UNKNOWN_Archetype";
  Archetype3["Button"] = "Button";
  Archetype3["LoginButton"] = "LoginButton";
  Archetype3["Image"] = "Image";
  Archetype3["Gallery"] = "Gallery";
  Archetype3["Video"] = "Video";
  Archetype3["Audio"] = "Audio";
  Archetype3["Text"] = "Text";
  Archetype3["TextInput"] = "TextInput";
  Archetype3["RichTextEditor"] = "RichTextEditor";
  Archetype3["SignatureInput"] = "SignatureInput";
  Archetype3["Checkbox"] = "Checkbox";
  Archetype3["RadioGroup"] = "RadioGroup";
  Archetype3["Switch"] = "Switch";
  Archetype3["Dropdown"] = "Dropdown";
  Archetype3["DatePicker"] = "DatePicker";
  Archetype3["TimePicker"] = "TimePicker";
  Archetype3["Ratings"] = "Ratings";
  Archetype3["RatingInput"] = "RatingInput";
  Archetype3["Menu"] = "Menu";
  Archetype3["Pagination"] = "Pagination";
  Archetype3["Slider"] = "Slider";
  Archetype3["Container"] = "Container";
  Archetype3["Carousel"] = "Carousel";
  Archetype3["Accordion"] = "Accordion";
  Archetype3["Tabs"] = "Tabs";
  Archetype3["ProgressBar"] = "ProgressBar";
  Archetype3["Upload"] = "Upload";
  Archetype3["Social"] = "Social";
  Archetype3["Breadcrumbs"] = "Breadcrumbs";
  Archetype3["SearchBox"] = "SearchBox";
  Archetype3["Map"] = "Map";
  Archetype3["Line"] = "Line";
  Archetype3["Logo"] = "Logo";
  Archetype3["Avatar"] = "Avatar";
  Archetype3["Captcha"] = "Captcha";
  Archetype3["VectorArt"] = "VectorArt";
  Archetype3["AnimatedGraphic"] = "AnimatedGraphic";
  Archetype3["Cart"] = "Cart";
  Archetype3["ContactForm"] = "ContactForm";
  Archetype3["Frame"] = "Frame";
  Archetype3["Divider"] = "Divider";
})(Archetype || (Archetype = {}));
var NativeStateType;
(function(NativeStateType3) {
  NativeStateType3["UNKNOWN_NativeStateType"] = "UNKNOWN_NativeStateType";
  NativeStateType3["hover"] = "hover";
  NativeStateType3["focus"] = "focus";
  NativeStateType3["disabled"] = "disabled";
  NativeStateType3["invalid"] = "invalid";
})(NativeStateType || (NativeStateType = {}));
var GroupType;
(function(GroupType3) {
  GroupType3["UNKNOWN_GroupType"] = "UNKNOWN_GroupType";
  GroupType3["cssDataType"] = "cssDataType";
  GroupType3["dataType"] = "dataType";
  GroupType3["preset"] = "preset";
  GroupType3["data"] = "data";
  GroupType3["presets"] = "presets";
  GroupType3["cssCustomProperties"] = "cssCustomProperties";
  GroupType3["displayGroups"] = "displayGroups";
  GroupType3["background"] = "background";
  GroupType3["margin"] = "margin";
  GroupType3["padding"] = "padding";
  GroupType3["border"] = "border";
  GroupType3["borderTop"] = "borderTop";
  GroupType3["borderRight"] = "borderRight";
  GroupType3["borderBottom"] = "borderBottom";
  GroupType3["borderLeft"] = "borderLeft";
  GroupType3["borderRadius"] = "borderRadius";
  GroupType3["borderInlineStart"] = "borderInlineStart";
  GroupType3["borderInlineEnd"] = "borderInlineEnd";
  GroupType3["font"] = "font";
  GroupType3["textDecoration"] = "textDecoration";
  GroupType3["gap"] = "gap";
  GroupType3["text"] = "text";
  GroupType3["arrayItems"] = "arrayItems";
  GroupType3["arrayItem"] = "arrayItem";
  GroupType3["listItem"] = "listItem";
})(GroupType || (GroupType = {}));
var CssPropertyEnumCssPropertyType;
(function(CssPropertyEnumCssPropertyType3) {
  CssPropertyEnumCssPropertyType3["UNKNOWN_CssPropertyType"] = "UNKNOWN_CssPropertyType";
  CssPropertyEnumCssPropertyType3["number"] = "number";
  CssPropertyEnumCssPropertyType3["string"] = "string";
  CssPropertyEnumCssPropertyType3["angle"] = "angle";
  CssPropertyEnumCssPropertyType3["length"] = "length";
  CssPropertyEnumCssPropertyType3["percentage"] = "percentage";
  CssPropertyEnumCssPropertyType3["lengthPercentage"] = "lengthPercentage";
  CssPropertyEnumCssPropertyType3["blendMode"] = "blendMode";
  CssPropertyEnumCssPropertyType3["customEnum"] = "customEnum";
  CssPropertyEnumCssPropertyType3["time"] = "time";
  CssPropertyEnumCssPropertyType3["background"] = "background";
  CssPropertyEnumCssPropertyType3["backgroundSize"] = "backgroundSize";
  CssPropertyEnumCssPropertyType3["backgroundColor"] = "backgroundColor";
  CssPropertyEnumCssPropertyType3["backgroundImage"] = "backgroundImage";
  CssPropertyEnumCssPropertyType3["backgroundClip"] = "backgroundClip";
  CssPropertyEnumCssPropertyType3["backgroundOrigin"] = "backgroundOrigin";
  CssPropertyEnumCssPropertyType3["backgroundPosition"] = "backgroundPosition";
  CssPropertyEnumCssPropertyType3["backgroundRepeat"] = "backgroundRepeat";
  CssPropertyEnumCssPropertyType3["backgroundAttachment"] = "backgroundAttachment";
  CssPropertyEnumCssPropertyType3["margin"] = "margin";
  CssPropertyEnumCssPropertyType3["marginTop"] = "marginTop";
  CssPropertyEnumCssPropertyType3["marginRight"] = "marginRight";
  CssPropertyEnumCssPropertyType3["marginBottom"] = "marginBottom";
  CssPropertyEnumCssPropertyType3["marginLeft"] = "marginLeft";
  CssPropertyEnumCssPropertyType3["marginInlineStart"] = "marginInlineStart";
  CssPropertyEnumCssPropertyType3["marginInlineEnd"] = "marginInlineEnd";
  CssPropertyEnumCssPropertyType3["padding"] = "padding";
  CssPropertyEnumCssPropertyType3["paddingTop"] = "paddingTop";
  CssPropertyEnumCssPropertyType3["paddingRight"] = "paddingRight";
  CssPropertyEnumCssPropertyType3["paddingBottom"] = "paddingBottom";
  CssPropertyEnumCssPropertyType3["paddingLeft"] = "paddingLeft";
  CssPropertyEnumCssPropertyType3["paddingInlineStart"] = "paddingInlineStart";
  CssPropertyEnumCssPropertyType3["paddingInlineEnd"] = "paddingInlineEnd";
  CssPropertyEnumCssPropertyType3["border"] = "border";
  CssPropertyEnumCssPropertyType3["borderWidth"] = "borderWidth";
  CssPropertyEnumCssPropertyType3["borderStyle"] = "borderStyle";
  CssPropertyEnumCssPropertyType3["borderColor"] = "borderColor";
  CssPropertyEnumCssPropertyType3["borderTop"] = "borderTop";
  CssPropertyEnumCssPropertyType3["borderTopColor"] = "borderTopColor";
  CssPropertyEnumCssPropertyType3["borderTopWidth"] = "borderTopWidth";
  CssPropertyEnumCssPropertyType3["borderTopStyle"] = "borderTopStyle";
  CssPropertyEnumCssPropertyType3["borderRight"] = "borderRight";
  CssPropertyEnumCssPropertyType3["borderRightColor"] = "borderRightColor";
  CssPropertyEnumCssPropertyType3["borderRightWidth"] = "borderRightWidth";
  CssPropertyEnumCssPropertyType3["borderRightStyle"] = "borderRightStyle";
  CssPropertyEnumCssPropertyType3["borderBottom"] = "borderBottom";
  CssPropertyEnumCssPropertyType3["borderBottomColor"] = "borderBottomColor";
  CssPropertyEnumCssPropertyType3["borderBottomWidth"] = "borderBottomWidth";
  CssPropertyEnumCssPropertyType3["borderBottomStyle"] = "borderBottomStyle";
  CssPropertyEnumCssPropertyType3["borderLeft"] = "borderLeft";
  CssPropertyEnumCssPropertyType3["borderLeftColor"] = "borderLeftColor";
  CssPropertyEnumCssPropertyType3["borderLeftWidth"] = "borderLeftWidth";
  CssPropertyEnumCssPropertyType3["borderLeftStyle"] = "borderLeftStyle";
  CssPropertyEnumCssPropertyType3["borderInlineStart"] = "borderInlineStart";
  CssPropertyEnumCssPropertyType3["borderInlineStartColor"] = "borderInlineStartColor";
  CssPropertyEnumCssPropertyType3["borderInlineStartWidth"] = "borderInlineStartWidth";
  CssPropertyEnumCssPropertyType3["borderInlineStartStyle"] = "borderInlineStartStyle";
  CssPropertyEnumCssPropertyType3["borderInlineEnd"] = "borderInlineEnd";
  CssPropertyEnumCssPropertyType3["borderInlineEndColor"] = "borderInlineEndColor";
  CssPropertyEnumCssPropertyType3["borderInlineEndWidth"] = "borderInlineEndWidth";
  CssPropertyEnumCssPropertyType3["borderInlineEndStyle"] = "borderInlineEndStyle";
  CssPropertyEnumCssPropertyType3["borderRadius"] = "borderRadius";
  CssPropertyEnumCssPropertyType3["borderTopLeftRadius"] = "borderTopLeftRadius";
  CssPropertyEnumCssPropertyType3["borderTopRightRadius"] = "borderTopRightRadius";
  CssPropertyEnumCssPropertyType3["borderBottomRightRadius"] = "borderBottomRightRadius";
  CssPropertyEnumCssPropertyType3["borderBottomLeftRadius"] = "borderBottomLeftRadius";
  CssPropertyEnumCssPropertyType3["borderStartStartRadius"] = "borderStartStartRadius";
  CssPropertyEnumCssPropertyType3["borderStartEndRadius"] = "borderStartEndRadius";
  CssPropertyEnumCssPropertyType3["borderEndStartRadius"] = "borderEndStartRadius";
  CssPropertyEnumCssPropertyType3["borderEndEndRadius"] = "borderEndEndRadius";
  CssPropertyEnumCssPropertyType3["font"] = "font";
  CssPropertyEnumCssPropertyType3["fontFamily"] = "fontFamily";
  CssPropertyEnumCssPropertyType3["fontSize"] = "fontSize";
  CssPropertyEnumCssPropertyType3["fontStretch"] = "fontStretch";
  CssPropertyEnumCssPropertyType3["fontStyle"] = "fontStyle";
  CssPropertyEnumCssPropertyType3["fontVariant"] = "fontVariant";
  CssPropertyEnumCssPropertyType3["fontWeight"] = "fontWeight";
  CssPropertyEnumCssPropertyType3["lineHeight"] = "lineHeight";
  CssPropertyEnumCssPropertyType3["color"] = "color";
  CssPropertyEnumCssPropertyType3["letterSpacing"] = "letterSpacing";
  CssPropertyEnumCssPropertyType3["writingMode"] = "writingMode";
  CssPropertyEnumCssPropertyType3["textAlign"] = "textAlign";
  CssPropertyEnumCssPropertyType3["textTransform"] = "textTransform";
  CssPropertyEnumCssPropertyType3["textShadow"] = "textShadow";
  CssPropertyEnumCssPropertyType3["textOverflow"] = "textOverflow";
  CssPropertyEnumCssPropertyType3["textIndent"] = "textIndent";
  CssPropertyEnumCssPropertyType3["textDecoration"] = "textDecoration";
  CssPropertyEnumCssPropertyType3["textDecorationColor"] = "textDecorationColor";
  CssPropertyEnumCssPropertyType3["textDecorationLine"] = "textDecorationLine";
  CssPropertyEnumCssPropertyType3["textDecorationStyle"] = "textDecorationStyle";
  CssPropertyEnumCssPropertyType3["textDecorationThickness"] = "textDecorationThickness";
  CssPropertyEnumCssPropertyType3["boxShadow"] = "boxShadow";
  CssPropertyEnumCssPropertyType3["opacity"] = "opacity";
  CssPropertyEnumCssPropertyType3["overflow"] = "overflow";
  CssPropertyEnumCssPropertyType3["display"] = "display";
  CssPropertyEnumCssPropertyType3["alignSelf"] = "alignSelf";
  CssPropertyEnumCssPropertyType3["justifyContent"] = "justifyContent";
  CssPropertyEnumCssPropertyType3["alignItems"] = "alignItems";
  CssPropertyEnumCssPropertyType3["flexDirection"] = "flexDirection";
  CssPropertyEnumCssPropertyType3["height"] = "height";
  CssPropertyEnumCssPropertyType3["width"] = "width";
  CssPropertyEnumCssPropertyType3["gap"] = "gap";
  CssPropertyEnumCssPropertyType3["columnGap"] = "columnGap";
  CssPropertyEnumCssPropertyType3["rowGap"] = "rowGap";
  CssPropertyEnumCssPropertyType3["filter"] = "filter";
  CssPropertyEnumCssPropertyType3["backdropFilter"] = "backdropFilter";
  CssPropertyEnumCssPropertyType3["objectFit"] = "objectFit";
  CssPropertyEnumCssPropertyType3["objectPosition"] = "objectPosition";
  CssPropertyEnumCssPropertyType3["mixBlendMode"] = "mixBlendMode";
  CssPropertyEnumCssPropertyType3["isolation"] = "isolation";
  CssPropertyEnumCssPropertyType3["stroke"] = "stroke";
  CssPropertyEnumCssPropertyType3["strokeWidth"] = "strokeWidth";
  CssPropertyEnumCssPropertyType3["strokeOpacity"] = "strokeOpacity";
  CssPropertyEnumCssPropertyType3["fill"] = "fill";
  CssPropertyEnumCssPropertyType3["fillOpacity"] = "fillOpacity";
})(CssPropertyEnumCssPropertyType || (CssPropertyEnumCssPropertyType = {}));
var InteractionsTrigger;
(function(InteractionsTrigger3) {
  InteractionsTrigger3["UNKNOWN_TRIGGER"] = "UNKNOWN_TRIGGER";
  InteractionsTrigger3["hover"] = "hover";
  InteractionsTrigger3["click"] = "click";
  InteractionsTrigger3["viewEnter"] = "viewEnter";
  InteractionsTrigger3["pageVisible"] = "pageVisible";
  InteractionsTrigger3["viewProgress"] = "viewProgress";
  InteractionsTrigger3["pointerMove"] = "pointerMove";
  InteractionsTrigger3["animationEnd"] = "animationEnd";
})(InteractionsTrigger || (InteractionsTrigger = {}));
var EffectGroup;
(function(EffectGroup3) {
  EffectGroup3["UNKNOWN_EFFECT_GROUP"] = "UNKNOWN_EFFECT_GROUP";
  EffectGroup3["background"] = "background";
})(EffectGroup || (EffectGroup = {}));
var RestrictionLevel;
(function(RestrictionLevel3) {
  RestrictionLevel3["UNKNOWN_RESTRICTION_TYPE"] = "UNKNOWN_RESTRICTION_TYPE";
  RestrictionLevel3["WARNING"] = "WARNING";
  RestrictionLevel3["LOCKED"] = "LOCKED";
})(RestrictionLevel || (RestrictionLevel = {}));
var ElementDisplayOption;
(function(ElementDisplayOption3) {
  ElementDisplayOption3["UNKNOWN_OPTION"] = "UNKNOWN_OPTION";
  ElementDisplayOption3["REMOVE"] = "REMOVE";
  ElementDisplayOption3["CUSTOMIZED"] = "CUSTOMIZED";
})(ElementDisplayOption || (ElementDisplayOption = {}));
var SidebarDataType;
(function(SidebarDataType3) {
  SidebarDataType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  SidebarDataType3["CATEGORY"] = "CATEGORY";
  SidebarDataType3["PAGE"] = "PAGE";
  SidebarDataType3["SEPARATOR"] = "SEPARATOR";
})(SidebarDataType || (SidebarDataType = {}));
var SidebarEntityType;
(function(SidebarEntityType3) {
  SidebarEntityType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  SidebarEntityType3["CATEGORY"] = "CATEGORY";
  SidebarEntityType3["PAGE"] = "PAGE";
  SidebarEntityType3["APP"] = "APP";
})(SidebarEntityType || (SidebarEntityType = {}));
var OperatorEnumOperator;
(function(OperatorEnumOperator3) {
  OperatorEnumOperator3["UNKNOWN_OPERATOR"] = "UNKNOWN_OPERATOR";
  OperatorEnumOperator3["EQ"] = "EQ";
  OperatorEnumOperator3["NEQ"] = "NEQ";
  OperatorEnumOperator3["GT"] = "GT";
  OperatorEnumOperator3["GTE"] = "GTE";
  OperatorEnumOperator3["LT"] = "LT";
  OperatorEnumOperator3["LTE"] = "LTE";
  OperatorEnumOperator3["BETWEEN"] = "BETWEEN";
  OperatorEnumOperator3["IN"] = "IN";
  OperatorEnumOperator3["NIN"] = "NIN";
  OperatorEnumOperator3["EMPTY"] = "EMPTY";
  OperatorEnumOperator3["NOT_EMPTY"] = "NOT_EMPTY";
  OperatorEnumOperator3["STARTS_WITH"] = "STARTS_WITH";
  OperatorEnumOperator3["HAS_ALL"] = "HAS_ALL";
  OperatorEnumOperator3["HAS_SOME"] = "HAS_SOME";
  OperatorEnumOperator3["ANY"] = "ANY";
})(OperatorEnumOperator || (OperatorEnumOperator = {}));
var ParameterType;
(function(ParameterType3) {
  ParameterType3["UNKNOWN_PARAMETER_TYPE"] = "UNKNOWN_PARAMETER_TYPE";
  ParameterType3["STRING"] = "STRING";
  ParameterType3["INT"] = "INT";
  ParameterType3["DECIMAL"] = "DECIMAL";
  ParameterType3["BOOL"] = "BOOL";
  ParameterType3["CURRENCY"] = "CURRENCY";
  ParameterType3["COUNTRY_SUBDIVISION"] = "COUNTRY_SUBDIVISION";
  ParameterType3["LANGUAGE"] = "LANGUAGE";
})(ParameterType || (ParameterType = {}));
var FilterValueDefinitionMode;
(function(FilterValueDefinitionMode3) {
  FilterValueDefinitionMode3["UNKNOWN_FILTER_VALUE_DEFINITION_MODE"] = "UNKNOWN_FILTER_VALUE_DEFINITION_MODE";
  FilterValueDefinitionMode3["ANY_VALUE_OF_SPECIFIED_TYPE"] = "ANY_VALUE_OF_SPECIFIED_TYPE";
  FilterValueDefinitionMode3["ITEM_SELECTION"] = "ITEM_SELECTION";
  FilterValueDefinitionMode3["STRING_LIST"] = "STRING_LIST";
  FilterValueDefinitionMode3["INT_LIST"] = "INT_LIST";
  FilterValueDefinitionMode3["DECIMAL_LIST"] = "DECIMAL_LIST";
  FilterValueDefinitionMode3["BOOL_LIST"] = "BOOL_LIST";
  FilterValueDefinitionMode3["CURRENCY_LIST"] = "CURRENCY_LIST";
  FilterValueDefinitionMode3["COUNTRY_SUBDIVISION_LIST"] = "COUNTRY_SUBDIVISION_LIST";
  FilterValueDefinitionMode3["LANGUAGE_TAG_LIST"] = "LANGUAGE_TAG_LIST";
})(FilterValueDefinitionMode || (FilterValueDefinitionMode = {}));
var TimeConstraintType;
(function(TimeConstraintType3) {
  TimeConstraintType3["UNKNOWN_TIME_CONSTRAINT_TYPE"] = "UNKNOWN_TIME_CONSTRAINT_TYPE";
  TimeConstraintType3["LAST_DAYS"] = "LAST_DAYS";
  TimeConstraintType3["LAST_HOURS"] = "LAST_HOURS";
  TimeConstraintType3["NEXT_DAYS"] = "NEXT_DAYS";
  TimeConstraintType3["NEXT_HOURS"] = "NEXT_HOURS";
  TimeConstraintType3["BETWEEN"] = "BETWEEN";
  TimeConstraintType3["TODAY"] = "TODAY";
  TimeConstraintType3["THIS_MONTH"] = "THIS_MONTH";
})(TimeConstraintType || (TimeConstraintType = {}));
var ValueConstraintType;
(function(ValueConstraintType3) {
  ValueConstraintType3["UNKNOWN_VALUE_CONSTRAINT_TYPE"] = "UNKNOWN_VALUE_CONSTRAINT_TYPE";
  ValueConstraintType3["NONE"] = "NONE";
  ValueConstraintType3["PREDEFINED_VALUES"] = "PREDEFINED_VALUES";
  ValueConstraintType3["MIN_MAX_RANGE"] = "MIN_MAX_RANGE";
  ValueConstraintType3["RANGE"] = "RANGE";
})(ValueConstraintType || (ValueConstraintType = {}));
var RegionScopeScope;
(function(RegionScopeScope3) {
  RegionScopeScope3["SPECIFIC_REGIONS"] = "SPECIFIC_REGIONS";
  RegionScopeScope3["WORLDWIDE"] = "WORLDWIDE";
})(RegionScopeScope || (RegionScopeScope = {}));
var VibeActionType;
(function(VibeActionType3) {
  VibeActionType3["UNKNOWN_ActionType"] = "UNKNOWN_ActionType";
  VibeActionType3["OPEN_DASHBOARD"] = "OPEN_DASHBOARD";
  VibeActionType3["OPEN_CUSTOM_PANEL"] = "OPEN_CUSTOM_PANEL";
})(VibeActionType || (VibeActionType = {}));
var AssetType;
(function(AssetType3) {
  AssetType3["UNKNOWN"] = "UNKNOWN";
  AssetType3["IMAGE"] = "IMAGE";
  AssetType3["VIDEO"] = "VIDEO";
  AssetType3["LOGO"] = "LOGO";
  AssetType3["EVENT"] = "EVENT";
  AssetType3["FORM"] = "FORM";
  AssetType3["PDF"] = "PDF";
})(AssetType || (AssetType = {}));
var WebhookIdentityType;
(function(WebhookIdentityType3) {
  WebhookIdentityType3["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType3["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType3["MEMBER"] = "MEMBER";
  WebhookIdentityType3["WIX_USER"] = "WIX_USER";
  WebhookIdentityType3["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));

// ../extensions-data-client/src/data/widget-plugins.ts
init_esm_shims();
var widgetPlugins = [
  {
    appName: "Wix Bookings",
    appId: "13d21c63-b5ec-5912-8397-c3a5ddb27a97",
    component: {
      componentId: "a91a0543-d4bd-4e6b-b315-9410aa27bcde",
      name: "Service Page",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "13d21c63-b5ec-5912-8397-c3a5ddb27a97",
              widgetId: "a91a0543-d4bd-4e6b-b315-9410aa27bcde",
              slotId: "slot1"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Wix Events",
    appId: "140603ad-af8d-84a5-2c80-a0f60cb47351",
    component: {
      componentId: "14d2abc2-5350-6322-487d-8c16ff833c8a",
      name: "Event Details",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "140603ad-af8d-84a5-2c80-a0f60cb47351",
              widgetId: "14d2abc2-5350-6322-487d-8c16ff833c8a",
              slotId: "header"
            },
            {
              appDefinitionId: "140603ad-af8d-84a5-2c80-a0f60cb47351",
              widgetId: "14d2abc2-5350-6322-487d-8c16ff833c8a",
              slotId: "details"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Wix Stores",
    appId: "1380b703-ce81-ff05-f115-39571d94dfcd",
    component: {
      componentId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
      name: "Category Page",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
              slotId: "gallery-products-top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
              slotId: "gallery-products-bottom"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
              slotId: "category-page-list-top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
              slotId: "category-page-hero-top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
              slotId: "category-page-hero-bottom"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
              slotId: "gallery-filters-top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "bda15dc1-816d-4ff3-8dcb-1172d5343cce",
              slotId: "gallery-filters-bottom"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Wix Stores",
    appId: "1380b703-ce81-ff05-f115-39571d94dfcd",
    component: {
      componentId: "13afb094-84f9-739f-44fd-78d036adb028",
      name: "Gallery widget",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13afb094-84f9-739f-44fd-78d036adb028",
              slotId: "gallery-filters-bottom"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13afb094-84f9-739f-44fd-78d036adb028",
              slotId: "gallery-filters-top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13afb094-84f9-739f-44fd-78d036adb028",
              slotId: "category-page-list-top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13afb094-84f9-739f-44fd-78d036adb028",
              slotId: "gallery-products-bottom"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13afb094-84f9-739f-44fd-78d036adb028",
              slotId: "gallery-products-top"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Wix Stores",
    appId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
    component: {
      componentId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
      name: "New Product page",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-1"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-2"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-3"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-4"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-5"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-6"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-7"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-8"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-details-9"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-bottom"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-top"
            },
            {
              appDefinitionId: "a0c68605-c2e7-4c8d-9ea1-767f9770e087",
              widgetId: "6a25b678-53ec-4b37-a190-65fcd1ca1a63",
              slotId: "product-page-media-1"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Wix Stores",
    appId: "1380b703-ce81-ff05-f115-39571d94dfcd",
    component: {
      componentId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
      name: "Old Product page",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-1"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-2"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-3"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-4"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-5"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-6"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-7"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-8"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-details-9"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-bottom"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-media-1"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "13a94f09-2766-3c40-4a32-8edb5acdd8bc",
              slotId: "product-page-additional-buttons"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Checkout & Orders",
    appId: "1380b703-ce81-ff05-f115-39571d94dfcd",
    component: {
      componentId: "14fd5970-8072-c276-1246-058b79e70c1a",
      name: "Checkout",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:top"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:header"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:summary:before"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:summary:after"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:summary:lineItems:after"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:summary:lineItems:after2"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:summary:totalsBreakdown:before"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:steps:before"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "14fd5970-8072-c276-1246-058b79e70c1a",
              slotId: "checkout:steps:deliveryMethod"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Checkout & Orders",
    appId: "1380b703-ce81-ff05-f115-39571d94dfcd",
    component: {
      componentId: "49dbb2d9-d9e5-4605-a147-e926605bf164",
      name: "SideCart",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "49dbb2d9-d9e5-4605-a147-e926605bf164",
              slotId: "side-cart:header:after-1"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "49dbb2d9-d9e5-4605-a147-e926605bf164",
              slotId: "side-cart:line-items:after-1"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "49dbb2d9-d9e5-4605-a147-e926605bf164",
              slotId: "side-cart:customer-input:after-1"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "49dbb2d9-d9e5-4605-a147-e926605bf164",
              slotId: "side-cart:footer:actions:before-1"
            },
            {
              appDefinitionId: "1380b703-ce81-ff05-f115-39571d94dfcd",
              widgetId: "49dbb2d9-d9e5-4605-a147-e926605bf164",
              slotId: "side-cart:footer:actions:after-1"
            }
          ]
        }
      }
    }
  },
  {
    appName: "Wix Blog",
    appId: "14bcded7-0066-7c35-14d7-466cb3f09103",
    component: {
      componentId: "211b5287-14e2-4690-bb71-525908938c81",
      name: "Post Page",
      data: {
        widgetPlugin: {
          placements: [
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "above-header"
            },
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "above-content-1"
            },
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "above-content-2"
            },
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "below-content-1"
            },
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "below-content-2"
            },
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "page-bottom-1"
            },
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "page-bottom-2"
            },
            {
              appDefinitionId: "14bcded7-0066-7c35-14d7-466cb3f09103",
              widgetId: "211b5287-14e2-4690-bb71-525908938c81",
              slotId: "page-bottom-3"
            }
          ]
        }
      }
    }
  }
];

// ../extensions-data-client/src/data/widget-docs.json
var widget_docs_default = {
  "13afb094-84f9-739f-44fd-78d036adb028": "https://wix.to/jPWO9GZ",
  "bda15dc1-816d-4ff3-8dcb-1172d5343cce": "https://wix.to/sfoURR8",
  "14fd5970-8072-c276-1246-058b79e70c1a": "https://wix.to/FPbvzSu",
  "6a25b678-53ec-4b37-a190-65fcd1ca1a63": "https://wix.to/VBf3XkQ",
  "13a94f09-2766-3c40-4a32-8edb5acdd8bc": "https://wix.to/awqi86g",
  "a91a0543-d4bd-4e6b-b315-9410aa27bcde": "https://wix.to/BaNrGoT",
  "14d2abc2-5350-6322-487d-8c16ff833c8a": "https://wix.to/GHJRTYr"
};

// ../extensions-data-client/src/schema.ts
init_esm_shims();
var importDataSchema = external_exports.object({
  packageName: external_exports.string(),
  subpathImport: external_exports.string(),
  namedImport: external_exports.string(),
  propsName: external_exports.string(),
  propsNamespace: external_exports.string()
});
var sdkSlotSchema = external_exports.object({
  id: external_exports.string(),
  appId: external_exports.string(),
  wixDocsUrl: external_exports.string(),
  importData: importDataSchema
});
var sdkSlotDataSchema = external_exports.object({
  sdkSlotData: sdkSlotSchema
});
var backOfficeExtensionContainerSchema = external_exports.object({
  component: external_exports.object({
    type: external_exports.literal(ComponentType2.BACK_OFFICE_EXTENSION_CONTAINER),
    componentId: external_exports.string().uuid(),
    name: external_exports.string(),
    data: external_exports.object({
      backOfficeExtensionContainer: external_exports.object({
        extendable: external_exports.object({
          extendedBy: external_exports.enum([
            ExtendingComponentType.INVALID,
            ExtendingComponentType.BACK_OFFICE_EXTENSION_WIDGET,
            ExtendingComponentType.BACK_OFFICE_MENU_ITEM
          ])
        }),
        defaultRoute: external_exports.string().nullable().optional(),
        slotData: external_exports.object({
          displayName: external_exports.string().nullable().optional()
        }).optional()
      })
    }),
    externalId: external_exports.string().nullable().optional()
  }),
  appName: external_exports.string(),
  appId: external_exports.string().uuid()
});
var backOfficePageSchema = external_exports.object({
  component: external_exports.object({
    type: external_exports.literal(ComponentType2.BACK_OFFICE_PAGE),
    componentId: external_exports.string().uuid(),
    name: external_exports.string(),
    data: external_exports.object({
      backOfficePage: external_exports.object({
        routePath: external_exports.string(),
        metaData: external_exports.object({
          title: external_exports.string().nullable().optional()
        }).optional(),
        slotIds: external_exports.array(external_exports.string())
      })
    }),
    externalId: external_exports.string()
  }),
  appName: external_exports.string(),
  appId: external_exports.string().uuid()
});
var placementSchema = external_exports.object({
  appDefinitionId: external_exports.string(),
  widgetId: external_exports.string(),
  slotId: external_exports.string()
});
var widgetPluginSchema = external_exports.object({
  component: external_exports.object({
    componentId: external_exports.string().uuid(),
    name: external_exports.string(),
    data: external_exports.object({
      widgetPlugin: external_exports.object({
        placements: external_exports.array(placementSchema)
      })
    }),
    externalId: external_exports.string().optional().nullable()
  }),
  appName: external_exports.string(),
  appId: external_exports.string().uuid()
});

// ../extensions-data-client/src/extension-data-client.ts
var ExtensionDataClient = class {
  constructor(httpClient) {
    this.httpClient = httpClient;
    const { minRetryTimeout } = getTestOverrides();
    this.retryOptions = {
      retries: 3,
      minTimeout: minRetryTimeout,
      maxTimeout: 3 * 1e3
    };
  }
  retryOptions;
  listComponentByComponentType = async ({
    componentTypes,
    hasReferencedComponents
  }) => {
    try {
      let hasNext = true;
      let allComponents = [];
      let nextCursor;
      while (hasNext) {
        const { data } = await pRetry(
          () => this.httpClient.request(
            listComponentByComponentType({
              componentTypes,
              hasReferencedComponents,
              cursor: nextCursor
            })
          ),
          this.retryOptions
        );
        allComponents = allComponents.concat(data.components ?? []);
        nextCursor = data.pagingMetadata?.cursors?.next;
        hasNext = data.pagingMetadata?.hasNext ?? false;
      }
      return allComponents.map((component) => ({
        ...component,
        appName: component.appName?.replaceAll("&amp;", "&")
      }));
    } catch (error) {
      throw new CliError({
        code: CliErrorCode.FailedToListComponentByComponentType(),
        cause: error
      });
    }
  };
  getBackofficeExtensionContainers = async () => {
    const backofficeExtensionContainers = await this.listComponentByComponentType({
      componentTypes: [ComponentType2.BACK_OFFICE_EXTENSION_CONTAINER]
    });
    try {
      return external_exports.array(backOfficeExtensionContainerSchema).parse(backofficeExtensionContainers);
    } catch (error) {
      throw new CliError({
        code: CliErrorCode.FailedToParseBackofficeExtensionContainer(),
        cause: error
      });
    }
  };
  getBackofficeExtensionWidgets = async () => {
    return this.getBackofficeExtensionContainers().then(
      (backofficeExtensionContainer) => backofficeExtensionContainer.filter(
        (container) => container.component.data.backOfficeExtensionContainer.extendable.extendedBy === ExtendingComponentType.BACK_OFFICE_EXTENSION_WIDGET
      )
    );
  };
  getBackofficeMenuItems = async () => {
    return this.getBackofficeExtensionContainers().then(
      (backofficeExtensionContainer) => backofficeExtensionContainer.filter(
        (container) => container.component.data.backOfficeExtensionContainer.extendable.extendedBy === ExtendingComponentType.BACK_OFFICE_MENU_ITEM
      )
    );
  };
  getBackofficePages = async () => {
    const backofficePages = await this.listComponentByComponentType({
      componentTypes: [ComponentType2.BACK_OFFICE_PAGE],
      hasReferencedComponents: true
    });
    try {
      return external_exports.array(backOfficePageSchema).parse(backofficePages);
    } catch (error) {
      throw new CliError({
        code: CliErrorCode.FailedToParseBackofficePages(),
        cause: error
      });
    }
  };
  getWidgetPlugins = async () => {
    return external_exports.array(widgetPluginSchema).parse(
      // TODO: replace with this line when the API is ready
      // await this.listComponentByComponentType({
      //   componentTypes: [ComponentType.WIDGET_PLUGIN],
      // })
      widgetPlugins
    );
  };
  getWidgetDocsUrl = (widgetId) => {
    return widget_docs_default[widgetId];
  };
  getSdkSlotData = async ({
    appId,
    slotId
  }) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(getSdkSlotData({ slotId, appId })),
        this.retryOptions
      );
      return sdkSlotDataSchema.parse(data).sdkSlotData;
    } catch (error) {
      throw new CliError({
        code: CliErrorCode.FailedToGetSdkSlotData(),
        cause: error
      });
    }
  };
};

// ../extensions-data-client/src/useExtensionDataClient.tsx
function useExtensionDataClient() {
  const httpClient = useHttpClient({ type: "backoffice" });
  const client = (0, import_react13.useMemo)(
    () => new ExtensionDataClient(httpClient),
    [httpClient]
  );
  return usePanoramaMethodLogger(client);
}

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboard-plugin/DashboardPluginWizard.tsx
init_esm_shims();
var import_react17 = __toESM(require_react(), 1);
var import_variant6 = __toESM(require_lib(), 1);
var import_lodash3 = __toESM(require_lodash(), 1);

// ../dev-center-client/src/index.ts
init_esm_shims();

// ../dev-center-client/src/dev-center-client.ts
init_esm_shims();

// ../../node_modules/@wix/ambassador-devcenter-apps-v1-app-old/build/es/http.impl.js
init_esm_shims();
var __Array2 = {
  checkboxGroupOptions: "_checkboxGroup",
  tagsOptions: "_tags",
  validation: "_arrayType"
};
var __Boolean2 = { checkboxOptions: "_checkbox" };
var __Function = { description: "_description" };
var __Number2 = {
  minimum: "google.protobuf.FloatValue",
  maximum: "google.protobuf.FloatValue",
  multipleOf: "google.protobuf.FloatValue"
};
var __Object2 = { validation: "_objectType" };
var __String2 = {
  textInputOptions: "_textInput",
  radioGroupOptions: "_radioGroup",
  dropdownOptions: "_dropdown",
  dateTimeOptions: "_dateTimeInput",
  phoneInputOptions: "_phoneInput",
  dateInputOptions: "_dateInput",
  timeInputOptions: "_timeInput",
  datePickerOptions: "_datePicker"
};
var _actionProviderSPIConfig2 = { actionConfig: "_actionSPIConfig" };
var _actionSPIConfig2 = { icon: "_wixCommonImage" };
var _address2 = { multilineAddressOptions: "_componentsMultilineAddress" };
var _adminConfigurableTextInput2 = {
  requiredSettings: "google.protobuf.FieldMask",
  adminConfigurableSettings: "google.protobuf.FieldMask"
};
var _andCondition2 = { conditions: "_conditionNode" };
var _appData = { components: "_component", pricingModels: "_pricingModel" };
var _appEmbedData2 = { image: "_media" };
var _appointment2 = { description: "_richContent" };
var _arrayItems2 = { data: "_dataItems", dataItem: "_dataItem" };
var _arrayType2 = { items: "_arrayTypeArrayItems" };
var _arrayTypeArrayItems = {
  numberOptions: "_numberType",
  objectOptions: "_objectType"
};
var _audioData2 = { audio: "_media", coverImage: "_media" };
var _authenticatorConfig2 = { expectedInputs: "_expectedInputs" };
var _background2 = { image: "_media" };
var _billing = {
  monthlyPrice: "DOUBLE",
  yearlyPrice: "DOUBLE",
  oneTimePrice: "DOUBLE",
  meteredBilling: "_meteredBilling"
};
var _breakPoint2 = { items: "_itemLayout" };
var _breakpointPresetStyleOverrides2 = {
  default: "_presetStyleOverrides",
  small: "_presetStyleOverrides"
};
var _checkbox2 = { label: "_richContent" };
var _checkboxGroup2 = {
  description: "_richContent",
  options: "_checkboxGroupOption",
  media: "_mediaItem"
};
var _checkboxGroupOption = { media: "_mediaItem" };
var _commonImage2 = { urlExpirationDate: "google.protobuf.Timestamp" };
var _component = { compData: "_componentData" };
var _componentData2 = {
  widgetComponentData: "_widgetComponentData",
  widgetOutOfIframeData: "_widgetOutOfIframeComponentData",
  studioWidgetComponentData: "_studioWidgetComponentData",
  shippingLabelCarrier: "_shippingLabelCarrierSpiConfig",
  fictionalShippingProvider: "_shippingProviderConfig",
  automationsActionProvider: "_actionProviderSPIConfig",
  identityAuthenticator: "_authenticatorConfig",
  devCenterTestingComponent: "_devCenterTestingComponentData",
  multilingualTranslationSchema: "_multilingualTranslationSchema",
  formTemplate: "_formTemplate",
  functionsShopPriceProvider: "_functionsShopPriceSpiConfig",
  function: "__Function",
  papiProvider: "_pluginConfig",
  multilingualTranslationSchemaGroup: "_schemaGroup",
  editorReactComponent: "_editorReactComponent"
};
var _componentsMultilineAddress = { description: "_richContent" };
var _conditionNode2 = { and: "_andCondition", or: "_orCondition" };
var _cssCustomPropertyItem2 = { number: "_cssNumber" };
var _cssNumber2 = {
  minimum: "google.protobuf.FloatValue",
  maximum: "google.protobuf.FloatValue",
  multipleOf: "google.protobuf.FloatValue"
};
var _dataItem2 = {
  number: "__Number",
  arrayItems: "_arrayItems",
  data: "_dataItems"
};
var _dataItems2 = { items: "Map#_dataItem" };
var _dateInput2 = { description: "_richContent", media: "_mediaItem" };
var _datePicker2 = { description: "_richContent", media: "_mediaItem" };
var _dateTimeInput2 = { description: "_richContent", media: "_mediaItem" };
var _description2 = { representativeImage: "_wixCommonImage" };
var _design2 = { poll: "_pollDesign" };
var _devCenterTestingComponentData2 = {
  translatableMessageInOneOf: "_messageContainingTranslatables",
  translatableMessage: "_messageContainingTranslatables",
  mapOfTranslatableMessages: "Map#_messageContainingTranslatables",
  translatableRichContent: "_richContent",
  nonTranslatableRichContent: "_richContent",
  richContentMap: "Map#_richContent"
};
var _displayField2 = { richContentOptions: "_richContentOptions" };
var _donationInput2 = { description: "_richContent", media: "_mediaItem" };
var _dropdown2 = { description: "_richContent", media: "_mediaItem" };
var _editorElement2 = {
  style: "Map#_styleItem",
  data: "Map#_dataItem",
  elements: "Map#_elementItem",
  presets: "Map#_presetItem",
  cssCustomProperties: "Map#_cssCustomPropertyItem"
};
var _editorPresence2 = { presetsEditorPresence: "_presetEditorPresence" };
var _editorReactComponent2 = { editorElement: "_editorElement" };
var _elementItem2 = {
  inlineElement: "_inlineElement",
  refElement: "_refElement"
};
var _elementStyleDefaults2 = { elements: "Map#_elementStyleDefaults" };
var _elementStyleOverrides2 = { elements: "Map#_elementStyleOverrides" };
var _expectedInputs2 = {
  expectedStartInputs: "_predefinedExpectedInput",
  expectedVerifyInputs: "_predefinedExpectedInput"
};
var _field2 = { inputOptions: "_inputField", displayOptions: "_displayField" };
var _fileUpload2 = { description: "_richContent", media: "_mediaItem" };
var _fixedPayment2 = { description: "_richContent", media: "_mediaItem" };
var _focalPoint2 = { x: "DOUBLE", y: "DOUBLE" };
var _formLayout2 = {
  large: "_breakPoint",
  medium: "_breakPoint",
  small: "_breakPoint"
};
var _formTemplate2 = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp",
  fields: "_field",
  deletedFields: "_field",
  steps: "_step",
  rules: "_v2Rule",
  submitSettings: "_submitSettings"
};
var _functionsShopPriceSpiConfig2 = {
  shopNumber: "google.protobuf.DoubleValue"
};
var _galleryData2 = { items: "_item", options: "_galleryOptions" };
var _galleryOptions2 = { item: "_itemStyle" };
var _getAppByVersionRequest = {};
var _getAppResponse = {
  dateCreated: "google.protobuf.Timestamp",
  data: "_appData"
};
var _group2 = { items: "_itemLayout" };
var _image2 = { urlExpirationDate: "google.protobuf.Timestamp" };
var _imageData2 = { image: "_media" };
var _inlineElement2 = {
  style: "Map#_styleItem",
  data: "Map#_dataItem",
  elements: "Map#_elementItem",
  presets: "Map#_presetItem",
  cssCustomProperties: "Map#_cssCustomPropertyItem"
};
var _inputField2 = {
  stringOptions: "__String",
  numberOptions: "_inputField_Number",
  booleanOptions: "__Boolean",
  arrayOptions: "__Array",
  objectOptions: "__Object",
  wixFileOptions: "_wixFile",
  paymentOptions: "_payment",
  multilineAddressOptions: "_address",
  schedulingOptions: "_scheduling",
  addressOptions: "_address"
};
var _inputField_Number = {
  numberInputOptions: "_numberInput",
  ratingInputOptions: "_ratingInput",
  validation: "_numberType"
};
var _item2 = { image: "_itemImage", video: "_video" };
var _itemImage2 = { media: "_media" };
var _itemLayout2 = { group: "_group" };
var _itemStyle2 = { ratio: "google.protobuf.DoubleValue" };
var _mapData2 = { mapSettings: "_mapSettings" };
var _mapSettings2 = {
  lat: "google.protobuf.DoubleValue",
  lng: "google.protobuf.DoubleValue"
};
var _media2 = { duration: "google.protobuf.DoubleValue" };
var _mediaItem2 = { image: "_commonImage" };
var _messageContainingTranslatables2 = {
  innerTranslatableRichContent: "_richContent"
};
var _meteredBilling = {
  monthlyBaseFee: "DOUBLE",
  additionalCharges: "google.protobuf.DoubleValue"
};
var _multilingualTranslationSchema2 = { referenceData: "_schema" };
var _node2 = {
  galleryData: "_galleryData",
  imageData: "_imageData",
  mapData: "_mapData",
  pollData: "_pollData",
  appEmbedData: "_appEmbedData",
  videoData: "_videoData",
  audioData: "_audioData",
  nodes: "_node"
};
var _numberInput2 = {
  default: "google.protobuf.DoubleValue",
  description: "_richContent",
  media: "_mediaItem"
};
var _numberType2 = {
  maximum: "google.protobuf.DoubleValue",
  minimum: "google.protobuf.DoubleValue",
  multipleOf: "google.protobuf.DoubleValue",
  enum: "google.protobuf.DoubleValue"
};
var _objectType2 = { properties: "Map#_propertiesType" };
var _orCondition2 = { conditions: "_conditionNode" };
var _packageDimension2 = {
  width: "DOUBLE",
  length: "DOUBLE",
  height: "google.protobuf.DoubleValue"
};
var _packageType2 = { dimension: "_packageDimension", image: "_image" };
var _payment2 = {
  checkboxGroupOptions: "_productCheckboxGroup",
  donationInputOptions: "_donationInput",
  paymentInputOptions: "_paymentInput",
  fixedPaymentOptions: "_fixedPayment"
};
var _paymentInput2 = {
  default: "google.protobuf.DoubleValue",
  description: "_richContent",
  media: "_mediaItem"
};
var _phoneInput2 = { description: "_richContent", media: "_mediaItem" };
var _plan = { billing: "_billing" };
var _pluginConfig2 = { startingEnforcementDate: "google.protobuf.Timestamp" };
var _poll2 = { image: "_media", options: "_pollOption" };
var _pollData2 = { poll: "_poll", design: "_design" };
var _pollDesign2 = { background: "_background" };
var _pollOption2 = { image: "_media" };
var _predefinedExpectedInput2 = {
  configuration: "_predefinedExpectedInputConfiguration"
};
var _predefinedExpectedInputConfiguration2 = {
  textInput: "_adminConfigurableTextInput"
};
var _presetEditorPresence2 = { wixMediaThumbnail: "_wixCommonImage" };
var _presetElementDefaults2 = { elements: "Map#_presetInnerElementDefaults" };
var _presetInnerElementDefaults2 = {
  elements: "Map#_presetInnerElementDefaults"
};
var _presetItem2 = {
  styleDefaults: "_presetStyleDefaults",
  styleOverrides: "_breakpointPresetStyleOverrides",
  presetDefaults: "_presetElementDefaults"
};
var _presetStyleDefaults2 = { elements: "Map#_elementStyleDefaults" };
var _presetStyleOverrides2 = { elements: "Map#_elementStyleOverrides" };
var _pricingModel = { plans: "_plan" };
var _productCheckboxGroup2 = {
  description: "_richContent",
  options: "_productCheckboxGroupOption",
  media: "_mediaItem"
};
var _productCheckboxGroupOption2 = { media: "_mediaItem" };
var _propertiesType2 = {
  numberOptions: "_numberType",
  arrayOptions: "_arrayType"
};
var _radioGroup2 = { description: "_richContent", media: "_mediaItem" };
var _ratingInput2 = { description: "_richContent", media: "_mediaItem" };
var _refElement2 = {
  resolvedElement: "_inlineElement",
  elementsDefaults: "Map#_refInnerElementDefaults",
  elements: "Map#_refInnerElementDefaults"
};
var _refInnerElementDefaults2 = { elements: "Map#_refInnerElementDefaults" };
var _richContent2 = { nodes: "_node", metadata: "_v1Metadata" };
var _richContentOptions2 = { richContent: "_richContent" };
var _scheduling2 = { appointmentOptions: "_appointment" };
var _schema2 = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp",
  fields: "Map#_v1SchemaField"
};
var _schemaGroup2 = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
var _shippingLabelCarrierSpiConfig2 = { packageTypes: "_packageType" };
var _shippingProviderConfig2 = { shippingPrice: "DOUBLE" };
var _signature2 = { description: "_richContent", media: "_mediaItem" };
var _step2 = { layout: "_formLayout" };
var _studioWidgetComponentData2 = {
  widgetDisplay: "_widgetDisplay",
  editorPresence: "_editorPresence"
};
var _styleItem2 = { number: "_cssNumber" };
var _submitSettings2 = { thankYouMessageOptions: "_thankYouMessageOptions" };
var _tags2 = {
  description: "_richContent",
  options: "_tagsOption",
  media: "_mediaItem"
};
var _tagsOption2 = { media: "_mediaItem" };
var _textInput2 = { description: "_richContent", media: "_mediaItem" };
var _thankYouMessageOptions2 = { richContent: "_richContent" };
var _timeInput2 = { description: "_richContent", media: "_mediaItem" };
var _v1Metadata2 = {
  createdTimestamp: "google.protobuf.Timestamp",
  updatedTimestamp: "google.protobuf.Timestamp"
};
var _v1SchemaField2 = { index: "google.protobuf.DoubleValue" };
var _v2Rule2 = { expression: "_conditionNode" };
var _video2 = { media: "_media", thumbnail: "_media" };
var _videoData2 = { video: "_media", thumbnail: "_media" };
var _widgetComponentData2 = { widgetDisplay: "_widgetDisplay" };
var _widgetDisplay2 = { price: "google.protobuf.FloatValue" };
var _widgetOutOfIframeComponentData2 = { widgetData: "_widgetComponentData" };
var _wixCommonImage = {
  urlExpirationDate: "google.protobuf.Timestamp",
  focalPoint: "_focalPoint"
};
var _wixFile2 = {
  fileUploadOptions: "_fileUpload",
  signatureOptions: "_signature"
};
function resolveComWixpressAppserviceApiAppsUrl(opts) {
  var domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/app-service-webapp",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      },
      {
        srcPath: "/app-service-webapp",
        destPath: "/api"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      },
      {
        srcPath: "/app-service-webapp",
        destPath: "/api"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      },
      {
        srcPath: "/app-service-webapp",
        destPath: "/api"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/app-service",
        destPath: "/api"
      },
      {
        srcPath: "/_api/app-service-webapp",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function getAppByVersion(payload) {
  var _a = serializer(_getAppByVersionRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_getAppResponse, {
    __Array: __Array2,
    __Boolean: __Boolean2,
    __Function,
    __Number: __Number2,
    __Object: __Object2,
    __String: __String2,
    _actionProviderSPIConfig: _actionProviderSPIConfig2,
    _actionSPIConfig: _actionSPIConfig2,
    _address: _address2,
    _adminConfigurableTextInput: _adminConfigurableTextInput2,
    _andCondition: _andCondition2,
    _appData,
    _appEmbedData: _appEmbedData2,
    _appointment: _appointment2,
    _arrayItems: _arrayItems2,
    _arrayType: _arrayType2,
    _arrayTypeArrayItems,
    _audioData: _audioData2,
    _authenticatorConfig: _authenticatorConfig2,
    _background: _background2,
    _billing,
    _breakPoint: _breakPoint2,
    _breakpointPresetStyleOverrides: _breakpointPresetStyleOverrides2,
    _checkbox: _checkbox2,
    _checkboxGroup: _checkboxGroup2,
    _checkboxGroupOption,
    _commonImage: _commonImage2,
    _component,
    _componentData: _componentData2,
    _componentsMultilineAddress,
    _conditionNode: _conditionNode2,
    _cssCustomPropertyItem: _cssCustomPropertyItem2,
    _cssNumber: _cssNumber2,
    _dataItem: _dataItem2,
    _dataItems: _dataItems2,
    _dateInput: _dateInput2,
    _datePicker: _datePicker2,
    _dateTimeInput: _dateTimeInput2,
    _description: _description2,
    _design: _design2,
    _devCenterTestingComponentData: _devCenterTestingComponentData2,
    _displayField: _displayField2,
    _donationInput: _donationInput2,
    _dropdown: _dropdown2,
    _editorElement: _editorElement2,
    _editorPresence: _editorPresence2,
    _editorReactComponent: _editorReactComponent2,
    _elementItem: _elementItem2,
    _elementStyleDefaults: _elementStyleDefaults2,
    _elementStyleOverrides: _elementStyleOverrides2,
    _expectedInputs: _expectedInputs2,
    _field: _field2,
    _fileUpload: _fileUpload2,
    _fixedPayment: _fixedPayment2,
    _focalPoint: _focalPoint2,
    _formLayout: _formLayout2,
    _formTemplate: _formTemplate2,
    _functionsShopPriceSpiConfig: _functionsShopPriceSpiConfig2,
    _galleryData: _galleryData2,
    _galleryOptions: _galleryOptions2,
    _group: _group2,
    _image: _image2,
    _imageData: _imageData2,
    _inlineElement: _inlineElement2,
    _inputField: _inputField2,
    _inputField_Number,
    _item: _item2,
    _itemImage: _itemImage2,
    _itemLayout: _itemLayout2,
    _itemStyle: _itemStyle2,
    _mapData: _mapData2,
    _mapSettings: _mapSettings2,
    _media: _media2,
    _mediaItem: _mediaItem2,
    _messageContainingTranslatables: _messageContainingTranslatables2,
    _meteredBilling,
    _multilingualTranslationSchema: _multilingualTranslationSchema2,
    _node: _node2,
    _numberInput: _numberInput2,
    _numberType: _numberType2,
    _objectType: _objectType2,
    _orCondition: _orCondition2,
    _packageDimension: _packageDimension2,
    _packageType: _packageType2,
    _payment: _payment2,
    _paymentInput: _paymentInput2,
    _phoneInput: _phoneInput2,
    _plan,
    _pluginConfig: _pluginConfig2,
    _poll: _poll2,
    _pollData: _pollData2,
    _pollDesign: _pollDesign2,
    _pollOption: _pollOption2,
    _predefinedExpectedInput: _predefinedExpectedInput2,
    _predefinedExpectedInputConfiguration: _predefinedExpectedInputConfiguration2,
    _presetEditorPresence: _presetEditorPresence2,
    _presetElementDefaults: _presetElementDefaults2,
    _presetInnerElementDefaults: _presetInnerElementDefaults2,
    _presetItem: _presetItem2,
    _presetStyleDefaults: _presetStyleDefaults2,
    _presetStyleOverrides: _presetStyleOverrides2,
    _pricingModel,
    _productCheckboxGroup: _productCheckboxGroup2,
    _productCheckboxGroupOption: _productCheckboxGroupOption2,
    _propertiesType: _propertiesType2,
    _radioGroup: _radioGroup2,
    _ratingInput: _ratingInput2,
    _refElement: _refElement2,
    _refInnerElementDefaults: _refInnerElementDefaults2,
    _richContent: _richContent2,
    _richContentOptions: _richContentOptions2,
    _scheduling: _scheduling2,
    _schema: _schema2,
    _schemaGroup: _schemaGroup2,
    _shippingLabelCarrierSpiConfig: _shippingLabelCarrierSpiConfig2,
    _shippingProviderConfig: _shippingProviderConfig2,
    _signature: _signature2,
    _step: _step2,
    _studioWidgetComponentData: _studioWidgetComponentData2,
    _styleItem: _styleItem2,
    _submitSettings: _submitSettings2,
    _tags: _tags2,
    _tagsOption: _tagsOption2,
    _textInput: _textInput2,
    _thankYouMessageOptions: _thankYouMessageOptions2,
    _timeInput: _timeInput2,
    _v1Metadata: _v1Metadata2,
    _v1SchemaField: _v1SchemaField2,
    _v2Rule: _v2Rule2,
    _video: _video2,
    _videoData: _videoData2,
    _widgetComponentData: _widgetComponentData2,
    _widgetDisplay: _widgetDisplay2,
    _widgetOutOfIframeComponentData: _widgetOutOfIframeComponentData2,
    _wixCommonImage,
    _wixFile: _wixFile2
  }).fromJSON;
  function __getAppByVersion(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app_old",
      method: "GET",
      methodFqn: "com.wixpress.appservice.api.Apps.GetAppByVersion",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveComWixpressAppserviceApiAppsUrl({
        protoPath: "/v1/apps/{appId}/version/{version}",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes,
      fallback: [
        {
          method: "GET",
          url: resolveComWixpressAppserviceApiAppsUrl({
            protoPath: "/v1/apps/{appId}/version/{version}",
            data: serializedData,
            host
          }),
          params: toURLSearchParams(serializedData)
        }
      ]
    };
    return metadata;
  }
  __getAppByVersion.fromReq = fromReq;
  __getAppByVersion.__isAmbassador = true;
  return __getAppByVersion;
}

// ../../node_modules/@wix/ambassador-devcenter-apps-v1-app/build/es/http.impl.js
init_esm_shims();
var _queryAppRequest = {};
var _queryAppResponse = { apps: "_v1App" };
var _v1App = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
var _v1CreateAppRequest = { app: "_v1App" };
var _v1CreateAppResponse = { app: "_v1App" };
var _v1GetAppRequest = {};
var _v1GetAppResponse = { app: "_v1App" };
function resolveWixDevcenterAppsV1AppsServiceUrl(opts) {
  var domainToMappings = {
    "editor._base_domain_": [
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/apps-service",
        destPath: ""
      },
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/apps-service",
        destPath: ""
      },
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/apps-service",
        destPath: ""
      },
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/apps-service",
        destPath: "/api"
      },
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/apps-service",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function createApp(payload) {
  var _a = serializer(_v1CreateAppRequest, {
    _v1App
  }), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_v1CreateAppResponse, { _v1App }).fromJSON;
  function __createApp(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app",
      method: "POST",
      methodFqn: "wix.devcenter.apps.v1.AppsService.CreateApp",
      url: resolveWixDevcenterAppsV1AppsServiceUrl({
        protoPath: "/v1/apps",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __createApp.fromReq = fromReq;
  __createApp.__isAmbassador = true;
  return __createApp;
}
function getApp(payload) {
  var _a = serializer(_v1GetAppRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_v1GetAppResponse, { _v1App }).fromJSON;
  function __getApp(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app",
      method: "GET",
      methodFqn: "wix.devcenter.apps.v1.AppsService.GetApp",
      url: resolveWixDevcenterAppsV1AppsServiceUrl({
        protoPath: "/v1/apps/{appId}",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes
    };
    return metadata;
  }
  __getApp.fromReq = fromReq;
  __getApp.__isAmbassador = true;
  return __getApp;
}
function queryApp(payload) {
  var _a = serializer(_queryAppRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_queryAppResponse, { _v1App }).fromJSON;
  function __queryApp(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app",
      method: "POST",
      methodFqn: "wix.devcenter.apps.v1.AppsService.QueryApp",
      url: resolveWixDevcenterAppsV1AppsServiceUrl({
        protoPath: "/v1/apps/query",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __queryApp.fromReq = fromReq;
  __queryApp.__isAmbassador = true;
  return __queryApp;
}

// ../../node_modules/@wix/ambassador-headless-v1-o-auth-app/build/es/http.impl.js
init_esm_shims();
var _createOAuthAppRequest = { oAuthApp: "_oAuthApp" };
var _createOAuthAppResponse = { oAuthApp: "_oAuthApp" };
var _oAuthApp = { createdDate: "google.protobuf.Timestamp" };
var _updateOAuthAppRequest = {
  mask: "google.protobuf.FieldMask",
  oAuthApp: "_oAuthApp"
};
var _updateOAuthAppResponse = { oAuthApp: "_oAuthApp" };
function resolveWixHeadlessV1OAuthAppServiceUrl(opts) {
  var domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/oauth-app-service",
        destPath: ""
      },
      {
        srcPath: "/oauth-app",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/oauth-app",
        destPath: ""
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/oauth-app-service",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function createOAuthApp(payload) {
  var _a = serializer(_createOAuthAppRequest, { _oAuthApp }), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_createOAuthAppResponse, {
    _oAuthApp
  }).fromJSON;
  function __createOAuthApp(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.headless.v1.o_auth_app",
      method: "POST",
      methodFqn: "wix.headless.v1.OAuthAppService.CreateOAuthApp",
      url: resolveWixHeadlessV1OAuthAppServiceUrl({
        protoPath: "/v1/oauth-apps",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __createOAuthApp.fromReq = fromReq;
  __createOAuthApp.__isAmbassador = true;
  return __createOAuthApp;
}
function updateOAuthApp(payload) {
  var _a = serializer(_updateOAuthAppRequest, { _oAuthApp }), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_updateOAuthAppResponse, {
    _oAuthApp
  }).fromJSON;
  function __updateOAuthApp(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.headless.v1.o_auth_app",
      method: "PATCH",
      methodFqn: "wix.headless.v1.OAuthAppService.UpdateOAuthApp",
      url: resolveWixHeadlessV1OAuthAppServiceUrl({
        protoPath: "/v1/oauth-apps/{oAuthApp.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __updateOAuthApp.fromReq = fromReq;
  __updateOAuthApp.__isAmbassador = true;
  return __updateOAuthApp;
}

// ../../node_modules/@wix/ambassador-devcenter-myapps-v1-my-app/build/es/http.impl.js
init_esm_shims();
var _myApp = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp",
  reviews: "_reviews"
};
var _queryMyAppsRequest = {};
var _queryMyAppsResponse = { myApps: "_myApp" };
var _reviews = { averageRating: "google.protobuf.DoubleValue" };
function resolveWixDevcenterMyappsV1MyAppsServiceUrl(opts) {
  var domainToMappings = {
    "dev._base_domain_": [
      {
        srcPath: "/my-apps",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/my-apps",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/my-apps",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/my-apps",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/my-apps",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function queryMyApps(payload) {
  var _a = serializer(_queryMyAppsRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_queryMyAppsResponse, {
    _myApp,
    _reviews
  }).fromJSON;
  function __queryMyApps(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.myapps.v1.my_app",
      method: "POST",
      methodFqn: "wix.devcenter.myapps.v1.MyAppsService.QueryMyApps",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixDevcenterMyappsV1MyAppsServiceUrl({
        protoPath: "/v1/my-apps/query",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __queryMyApps.fromReq = fromReq;
  __queryMyApps.__isAmbassador = true;
  return __queryMyApps;
}

// ../../node_modules/@wix/ambassador-devcenter-dsm-v1-development-site/build/es/http.impl.js
init_esm_shims();
var _createDevelopmentSiteRequest = {};
var _createDevelopmentSiteResponse = {};
var _getDevelopmentSitesLimitRequest = {};
var _getDevelopmentSitesLimitResponse = {};
var _getDevelopmentSitesRequest = {};
var _getDevelopmentSitesResponse = {};
function resolveComWixpressDevcenterDsmDevelopmentSitesManagerUrl(opts) {
  var domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/development-sites-manager",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/development-sites-manager",
        destPath: ""
      },
      {
        srcPath: "/_api/development-sites-manager",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/development-sites-manager",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/development-sites-manager",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/development-sites-manager",
        destPath: ""
      }
    ],
    "www.wixapps.net": [
      {
        srcPath: "/development-sites-manager/v1/development-sites",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/development-sites-manager",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/development-sites-manager/v1/development-sites",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/development-sites-manager",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/development-sites-manager",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/development-sites-manager",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/development-sites-manager",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function createDevelopmentSite(payload) {
  var _a = serializer(_createDevelopmentSiteRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_createDevelopmentSiteResponse, {}).fromJSON;
  function __createDevelopmentSite(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.dsm.v1.development_site",
      method: "POST",
      methodFqn: "com.wixpress.devcenter.dsm.DevelopmentSitesManager.CreateDevelopmentSite",
      url: resolveComWixpressDevcenterDsmDevelopmentSitesManagerUrl({
        protoPath: "/v1/development-sites",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __createDevelopmentSite.fromReq = fromReq;
  __createDevelopmentSite.__isAmbassador = true;
  return __createDevelopmentSite;
}
function getDevelopmentSites(payload) {
  var _a = serializer(_getDevelopmentSitesRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_getDevelopmentSitesResponse, {}).fromJSON;
  function __getDevelopmentSites(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.dsm.v1.development_site",
      method: "GET",
      methodFqn: "com.wixpress.devcenter.dsm.DevelopmentSitesManager.GetDevelopmentSites",
      url: resolveComWixpressDevcenterDsmDevelopmentSitesManagerUrl({
        protoPath: "/v1/development-sites",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes
    };
    return metadata;
  }
  __getDevelopmentSites.fromReq = fromReq;
  __getDevelopmentSites.__isAmbassador = true;
  return __getDevelopmentSites;
}
function getDevelopmentSitesLimit(payload) {
  var _a = serializer(_getDevelopmentSitesLimitRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_getDevelopmentSitesLimitResponse, {}).fromJSON;
  function __getDevelopmentSitesLimit(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.dsm.v1.development_site",
      method: "GET",
      methodFqn: "com.wixpress.devcenter.dsm.DevelopmentSitesManager.GetDevelopmentSitesLimit",
      url: resolveComWixpressDevcenterDsmDevelopmentSitesManagerUrl({
        protoPath: "/v1/development-sites-limit",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes
    };
    return metadata;
  }
  __getDevelopmentSitesLimit.fromReq = fromReq;
  __getDevelopmentSitesLimit.__isAmbassador = true;
  return __getDevelopmentSitesLimit;
}

// ../../node_modules/@wix/ambassador-devcenter-app-market-listing-v1-market-listing/build/es/http.impl.js
init_esm_shims();
var _marketListing = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
var _queryMarketListingRequest = {};
var _queryMarketListingResponse = { marketListing: "_marketListing" };
var _updateMarketListingRequest = {
  mask: "google.protobuf.FieldMask",
  marketListing: "_marketListing"
};
var _updateMarketListingResponse = { marketListing: "_marketListing" };
function resolveComWixpressDevcenterAppmarketlistingMarketListingServiceUrl(opts) {
  var domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/app-market-listing",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/app-market-listing",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/app-market-listing",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/app-market-listing",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/app-market-listing",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/app-market-listing",
        destPath: ""
      },
      {
        srcPath: "/_api/app-market-listing",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/app-market-listing",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/app-market-listing",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/app-market-listing",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/app-market-listing",
        destPath: ""
      }
    ],
    "platform.rise.ai": [
      {
        srcPath: "/v1/marketListings",
        destPath: "/v1/marketListings"
      }
    ],
    "vibe._base_domain_": [
      {
        srcPath: "/_api/app-market-listing",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function updateMarketListing(payload) {
  var _a = serializer(_updateMarketListingRequest, { _marketListing }), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_updateMarketListingResponse, {
    _marketListing
  }).fromJSON;
  function __updateMarketListing(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.app_market_listing.v1.market_listing",
      method: "PUT",
      methodFqn: "com.wixpress.devcenter.appmarketlisting.MarketListingService.UpdateMarketListing",
      url: resolveComWixpressDevcenterAppmarketlistingMarketListingServiceUrl({
        protoPath: "/v1/marketListings/{marketListing.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __updateMarketListing.fromReq = fromReq;
  __updateMarketListing.__isAmbassador = true;
  return __updateMarketListing;
}
function queryMarketListing(payload) {
  var _a = serializer(_queryMarketListingRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_queryMarketListingResponse, {
    _marketListing
  }).fromJSON;
  function __queryMarketListing(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.app_market_listing.v1.market_listing",
      method: "POST",
      methodFqn: "com.wixpress.devcenter.appmarketlisting.MarketListingService.QueryMarketListing",
      url: resolveComWixpressDevcenterAppmarketlistingMarketListingServiceUrl({
        protoPath: "/v1/marketListings/query",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __queryMarketListing.fromReq = fromReq;
  __queryMarketListing.__isAmbassador = true;
  return __queryMarketListing;
}

// ../../node_modules/@wix/ambassador-devcenter-apps-v1-app-template/build/es/http.impl.js
init_esm_shims();
var _app = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
var _createAppFromTemplateRequest = {};
var _createAppFromTemplateResponse = { app: "_app" };
var _createBlocksAppFromTemplateRequest = {};
var _createBlocksAppFromTemplateResponse = { app: "_app" };
var _listAppTemplatesRequest = {};
var _listAppTemplatesResponse = {};
function resolveWixDevcenterAppsTemplatesV1AppTemplatesServiceUrl(opts) {
  var domainToMappings = {
    "dev._base_domain_": [
      {
        srcPath: "/app-templates-service",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/app-templates-service",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function createAppFromTemplate(payload) {
  var _a = serializer(_createAppFromTemplateRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_createAppFromTemplateResponse, {
    _app
  }).fromJSON;
  function __createAppFromTemplate(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app_template",
      method: "POST",
      methodFqn: "wix.devcenter.apps.templates.v1.AppTemplatesService.CreateAppFromTemplate",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixDevcenterAppsTemplatesV1AppTemplatesServiceUrl({
        protoPath: "/v1/create-app-from-template",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __createAppFromTemplate.fromReq = fromReq;
  __createAppFromTemplate.__isAmbassador = true;
  return __createAppFromTemplate;
}
function createBlocksAppFromTemplate(payload) {
  var _a = serializer(_createBlocksAppFromTemplateRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_createBlocksAppFromTemplateResponse, { _app }).fromJSON;
  function __createBlocksAppFromTemplate(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app_template",
      method: "POST",
      methodFqn: "wix.devcenter.apps.templates.v1.AppTemplatesService.CreateBlocksAppFromTemplate",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixDevcenterAppsTemplatesV1AppTemplatesServiceUrl({
        protoPath: "/v1/create-blocks-app-from-template",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __createBlocksAppFromTemplate.fromReq = fromReq;
  __createBlocksAppFromTemplate.__isAmbassador = true;
  return __createBlocksAppFromTemplate;
}
function listAppTemplates(payload) {
  var _a = serializer(_listAppTemplatesRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_listAppTemplatesResponse, {}).fromJSON;
  function __listAppTemplates(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app_template",
      method: "GET",
      methodFqn: "wix.devcenter.apps.templates.v1.AppTemplatesService.ListAppTemplates",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixDevcenterAppsTemplatesV1AppTemplatesServiceUrl({
        protoPath: "/v1/app-templates",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes
    };
    return metadata;
  }
  __listAppTemplates.fromReq = fromReq;
  __listAppTemplates.__isAmbassador = true;
  return __listAppTemplates;
}

// ../../node_modules/@wix/ambassador-devcenter-managedapps-v1-managed-app/build/es/http.impl.js
init_esm_shims();
var __Array3 = {
  checkboxGroupOptions: "_checkboxGroup",
  tagsOptions: "_tags",
  validation: "_arrayType"
};
var __Boolean3 = { checkboxOptions: "_checkbox" };
var __Number3 = {
  numberInputOptions: "_numberInput",
  ratingInputOptions: "_ratingInput",
  validation: "_numberType"
};
var __Object3 = { validation: "_objectType" };
var __String3 = {
  textInputOptions: "_textInput",
  radioGroupOptions: "_radioGroup",
  dropdownOptions: "_dropdown",
  dateTimeOptions: "_dateTimeInput",
  phoneInputOptions: "_phoneInput",
  dateInputOptions: "_dateInput",
  timeInputOptions: "_timeInput",
  datePickerOptions: "_datePicker"
};
var _actionProviderSPIConfig3 = { actionConfig: "_actionSPIConfig" };
var _actionSPIConfig3 = { icon: "_commonImage" };
var _address3 = { multilineAddressOptions: "_multilineAddress" };
var _adminConfigurableTextInput3 = {
  requiredSettings: "google.protobuf.FieldMask",
  adminConfigurableSettings: "google.protobuf.FieldMask"
};
var _andCondition3 = { conditions: "_conditionNode" };
var _api_Number2 = {
  minimum: "google.protobuf.FloatValue",
  maximum: "google.protobuf.FloatValue",
  multipleOf: "google.protobuf.FloatValue"
};
var _apiArrayItems2 = { data: "_dataItems", dataItem: "_dataItem" };
var _appEmbedData3 = { image: "_media" };
var _appointment3 = { description: "_richContent" };
var _arrayItems3 = {
  numberOptions: "_numberType",
  objectOptions: "_objectType"
};
var _arrayType3 = { items: "_arrayItems" };
var _audioData3 = { audio: "_media", coverImage: "_media" };
var _authenticatorConfig3 = { expectedInputs: "_expectedInputs" };
var _background3 = { image: "_media" };
var _breakPoint3 = { items: "_itemLayout" };
var _breakpointPresetStyleOverrides3 = {
  default: "_presetStyleOverrides",
  small: "_presetStyleOverrides"
};
var _checkbox3 = { label: "_richContent" };
var _checkboxGroup3 = {
  description: "_richContent",
  options: "_option",
  media: "_mediaItem"
};
var _commonImage3 = {
  urlExpirationDate: "google.protobuf.Timestamp",
  focalPoint: "_focalPoint"
};
var _component2 = { compData: "_componentData" };
var _componentData3 = {
  widgetComponentData: "_widgetComponentData",
  widgetOutOfIframeData: "_widgetOutOfIframeComponentData",
  studioWidgetComponentData: "_studioWidgetComponentData",
  shippingLabelCarrier: "_shippingLabelCarrierSpiConfig",
  fictionalShippingProvider: "_shippingProviderConfig",
  automationsActionProvider: "_actionProviderSPIConfig",
  identityAuthenticator: "_authenticatorConfig",
  devCenterTestingComponent: "_devCenterTestingComponentData",
  multilingualTranslationSchema: "_multilingualTranslationSchema",
  formTemplate: "_formTemplate",
  functionsShopPriceProvider: "_functionsShopPriceSpiConfig",
  function: "_function",
  papiProvider: "_pluginConfig",
  multilingualTranslationSchemaGroup: "_schemaGroup",
  editorReactComponent: "_editorReactComponent"
};
var _conditionNode3 = { and: "_andCondition", or: "_orCondition" };
var _cssCustomPropertyItem3 = { number: "_cssNumber" };
var _cssNumber3 = {
  minimum: "google.protobuf.FloatValue",
  maximum: "google.protobuf.FloatValue",
  multipleOf: "google.protobuf.FloatValue"
};
var _dataItem3 = {
  number: "_api_Number",
  arrayItems: "_apiArrayItems",
  data: "_dataItems"
};
var _dataItems3 = { items: "Map#_dataItem" };
var _dateInput3 = { description: "_richContent", media: "_mediaItem" };
var _datePicker3 = { description: "_richContent", media: "_mediaItem" };
var _dateTimeInput3 = { description: "_richContent", media: "_mediaItem" };
var _description3 = { representativeImage: "_commonImage" };
var _design3 = { poll: "_pollDesign" };
var _devCenterTestingComponentData3 = {
  translatableMessageInOneOf: "_messageContainingTranslatables",
  translatableMessage: "_messageContainingTranslatables",
  mapOfTranslatableMessages: "Map#_messageContainingTranslatables",
  translatableRichContent: "_richContent",
  nonTranslatableRichContent: "_richContent",
  richContentMap: "Map#_richContent"
};
var _discount = { saleInfo: "_saleInfo" };
var _displayField3 = { richContentOptions: "_richContentOptions" };
var _donationInput3 = { description: "_richContent", media: "_mediaItem" };
var _dropdown3 = { description: "_richContent", media: "_mediaItem" };
var _editorElement3 = {
  style: "Map#_styleItem",
  data: "Map#_dataItem",
  elements: "Map#_elementItem",
  presets: "Map#_presetItem",
  cssCustomProperties: "Map#_cssCustomPropertyItem"
};
var _editorPresence3 = { presetsEditorPresence: "_presetEditorPresence" };
var _editorReactComponent3 = { editorElement: "_editorElement" };
var _elementItem3 = {
  inlineElement: "_inlineElement",
  refElement: "_refElement"
};
var _elementStyleDefaults3 = { elements: "Map#_elementStyleDefaults" };
var _elementStyleOverrides3 = { elements: "Map#_elementStyleOverrides" };
var _expectedInputs3 = {
  expectedStartInputs: "_predefinedExpectedInput",
  expectedVerifyInputs: "_predefinedExpectedInput"
};
var _field3 = { inputOptions: "_inputField", displayOptions: "_displayField" };
var _fileUpload3 = { description: "_richContent", media: "_mediaItem" };
var _fixedPayment3 = { description: "_richContent", media: "_mediaItem" };
var _focalPoint3 = { x: "DOUBLE", y: "DOUBLE" };
var _formLayout3 = {
  large: "_breakPoint",
  medium: "_breakPoint",
  small: "_breakPoint"
};
var _formTemplate3 = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp",
  fields: "_field",
  deletedFields: "_field",
  steps: "_step",
  rules: "_v2Rule",
  submitSettings: "_submitSettings"
};
var _freeTrialData = { endDate: "google.protobuf.Timestamp" };
var _function2 = { description: "_description" };
var _functionsShopPriceSpiConfig3 = {
  shopNumber: "google.protobuf.DoubleValue"
};
var _galleryData3 = { items: "_item", options: "_galleryOptions" };
var _galleryOptions3 = { item: "_itemStyle" };
var _group3 = { items: "_itemLayout" };
var _image3 = { urlExpirationDate: "google.protobuf.Timestamp" };
var _imageData3 = { image: "_media" };
var _inlineElement3 = {
  style: "Map#_styleItem",
  data: "Map#_dataItem",
  elements: "Map#_elementItem",
  presets: "Map#_presetItem",
  cssCustomProperties: "Map#_cssCustomPropertyItem"
};
var _inputField3 = {
  stringOptions: "__String",
  numberOptions: "__Number",
  booleanOptions: "__Boolean",
  arrayOptions: "__Array",
  objectOptions: "__Object",
  wixFileOptions: "_wixFile",
  paymentOptions: "_payment",
  multilineAddressOptions: "_address",
  schedulingOptions: "_scheduling",
  addressOptions: "_address"
};
var _item3 = { image: "_itemImage", video: "_video" };
var _itemImage3 = { media: "_media" };
var _itemLayout3 = { group: "_group" };
var _itemStyle3 = { ratio: "google.protobuf.DoubleValue" };
var _managedApp = {
  premiumInfo: "_premiumInfo",
  components: "_component",
  pricingDetails: "_pricingDetails"
};
var _managedAppsRequest = {};
var _managedAppsResponse = { managedApps: "_managedApp" };
var _mapData3 = { mapSettings: "_mapSettings" };
var _mapSettings3 = {
  lat: "google.protobuf.DoubleValue",
  lng: "google.protobuf.DoubleValue"
};
var _media3 = { duration: "google.protobuf.DoubleValue" };
var _mediaItem3 = { image: "_upstreamWixCommonImage" };
var _messageContainingTranslatables3 = {
  innerTranslatableRichContent: "_richContent"
};
var _multilineAddress2 = { description: "_richContent" };
var _multilingualTranslationSchema3 = { referenceData: "_schema" };
var _node3 = {
  galleryData: "_galleryData",
  imageData: "_imageData",
  mapData: "_mapData",
  pollData: "_pollData",
  appEmbedData: "_appEmbedData",
  videoData: "_videoData",
  audioData: "_audioData",
  nodes: "_node"
};
var _numberInput3 = {
  default: "google.protobuf.DoubleValue",
  description: "_richContent",
  media: "_mediaItem"
};
var _numberType3 = {
  maximum: "google.protobuf.DoubleValue",
  minimum: "google.protobuf.DoubleValue",
  multipleOf: "google.protobuf.DoubleValue",
  enum: "google.protobuf.DoubleValue"
};
var _objectType3 = { properties: "Map#_propertiesType" };
var _option2 = { media: "_mediaItem" };
var _orCondition3 = { conditions: "_conditionNode" };
var _packageDimension3 = {
  width: "DOUBLE",
  length: "DOUBLE",
  height: "google.protobuf.DoubleValue"
};
var _packageType3 = { dimension: "_packageDimension", image: "_image" };
var _payment3 = {
  checkboxGroupOptions: "_productCheckboxGroup",
  donationInputOptions: "_donationInput",
  paymentInputOptions: "_paymentInput",
  fixedPaymentOptions: "_fixedPayment"
};
var _paymentInput3 = {
  default: "google.protobuf.DoubleValue",
  description: "_richContent",
  media: "_mediaItem"
};
var _phoneInput3 = { description: "_richContent", media: "_mediaItem" };
var _pluginConfig3 = { startingEnforcementDate: "google.protobuf.Timestamp" };
var _poll3 = { image: "_media", options: "_pollOption" };
var _pollData3 = { poll: "_poll", design: "_design" };
var _pollDesign3 = { background: "_background" };
var _pollOption3 = { image: "_media" };
var _predefinedExpectedInput3 = {
  configuration: "_predefinedExpectedInputConfiguration"
};
var _predefinedExpectedInputConfiguration3 = {
  textInput: "_adminConfigurableTextInput"
};
var _premiumInfo = { freeTrialData: "_freeTrialData" };
var _presetEditorPresence3 = { wixMediaThumbnail: "_commonImage" };
var _presetElementDefaults3 = { elements: "Map#_presetInnerElementDefaults" };
var _presetInnerElementDefaults3 = {
  elements: "Map#_presetInnerElementDefaults"
};
var _presetItem3 = {
  styleDefaults: "_presetStyleDefaults",
  styleOverrides: "_breakpointPresetStyleOverrides",
  presetDefaults: "_presetElementDefaults"
};
var _presetStyleDefaults3 = { elements: "Map#_elementStyleDefaults" };
var _presetStyleOverrides3 = { elements: "Map#_elementStyleOverrides" };
var _pricingDetails = { discount: "_discount" };
var _productCheckboxGroup3 = {
  description: "_richContent",
  options: "_productCheckboxGroupOption",
  media: "_mediaItem"
};
var _productCheckboxGroupOption3 = { media: "_mediaItem" };
var _propertiesType3 = {
  numberOptions: "_numberType",
  arrayOptions: "_arrayType"
};
var _radioGroup3 = { description: "_richContent", media: "_mediaItem" };
var _ratingInput3 = { description: "_richContent", media: "_mediaItem" };
var _refElement3 = {
  resolvedElement: "_inlineElement",
  elementsDefaults: "Map#_refInnerElementDefaults",
  elements: "Map#_refInnerElementDefaults"
};
var _refInnerElementDefaults3 = { elements: "Map#_refInnerElementDefaults" };
var _richContent3 = { nodes: "_node", metadata: "_v1Metadata" };
var _richContentOptions3 = { richContent: "_richContent" };
var _saleInfo = {
  startDate: "google.protobuf.Timestamp",
  endDate: "google.protobuf.Timestamp"
};
var _scheduling3 = { appointmentOptions: "_appointment" };
var _schema3 = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp",
  fields: "Map#_v1SchemaField"
};
var _schemaGroup3 = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
var _shippingLabelCarrierSpiConfig3 = { packageTypes: "_packageType" };
var _shippingProviderConfig3 = { shippingPrice: "DOUBLE" };
var _signature3 = { description: "_richContent", media: "_mediaItem" };
var _step3 = { layout: "_formLayout" };
var _studioWidgetComponentData3 = {
  widgetDisplay: "_widgetDisplay",
  editorPresence: "_editorPresence"
};
var _styleItem3 = { number: "_cssNumber" };
var _submitSettings3 = { thankYouMessageOptions: "_thankYouMessageOptions" };
var _tags3 = {
  description: "_richContent",
  options: "_tagsOption",
  media: "_mediaItem"
};
var _tagsOption3 = { media: "_mediaItem" };
var _textInput3 = { description: "_richContent", media: "_mediaItem" };
var _thankYouMessageOptions3 = { richContent: "_richContent" };
var _timeInput3 = { description: "_richContent", media: "_mediaItem" };
var _upstreamWixCommonImage2 = {
  urlExpirationDate: "google.protobuf.Timestamp"
};
var _v1Metadata3 = {
  createdTimestamp: "google.protobuf.Timestamp",
  updatedTimestamp: "google.protobuf.Timestamp"
};
var _v1SchemaField3 = { index: "google.protobuf.DoubleValue" };
var _v2Rule3 = { expression: "_conditionNode" };
var _video3 = { media: "_media", thumbnail: "_media" };
var _videoData3 = { video: "_media", thumbnail: "_media" };
var _widgetComponentData3 = { widgetDisplay: "_widgetDisplay" };
var _widgetDisplay3 = { price: "google.protobuf.FloatValue" };
var _widgetOutOfIframeComponentData3 = { widgetData: "_widgetComponentData" };
var _wixFile3 = {
  fileUploadOptions: "_fileUpload",
  signatureOptions: "_signature"
};
function resolveComWixpressDevcenterManagedappsManagedAppsUrl(opts) {
  var domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/managed-apps",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/managed-apps",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/managed-apps",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/managed-apps",
        destPath: ""
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/managed-apps",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/managed-apps",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/managed-apps",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/managed-apps",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/managed-apps",
        destPath: ""
      }
    ],
    "wixapis.com": [
      {
        srcPath: "/managed-apps",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function managedApps(payload) {
  var _a = serializer(_managedAppsRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_managedAppsResponse, {
    __Array: __Array3,
    __Boolean: __Boolean3,
    __Number: __Number3,
    __Object: __Object3,
    __String: __String3,
    _actionProviderSPIConfig: _actionProviderSPIConfig3,
    _actionSPIConfig: _actionSPIConfig3,
    _address: _address3,
    _adminConfigurableTextInput: _adminConfigurableTextInput3,
    _andCondition: _andCondition3,
    _apiArrayItems: _apiArrayItems2,
    _api_Number: _api_Number2,
    _appEmbedData: _appEmbedData3,
    _appointment: _appointment3,
    _arrayItems: _arrayItems3,
    _arrayType: _arrayType3,
    _audioData: _audioData3,
    _authenticatorConfig: _authenticatorConfig3,
    _background: _background3,
    _breakPoint: _breakPoint3,
    _breakpointPresetStyleOverrides: _breakpointPresetStyleOverrides3,
    _checkbox: _checkbox3,
    _checkboxGroup: _checkboxGroup3,
    _commonImage: _commonImage3,
    _component: _component2,
    _componentData: _componentData3,
    _conditionNode: _conditionNode3,
    _cssCustomPropertyItem: _cssCustomPropertyItem3,
    _cssNumber: _cssNumber3,
    _dataItem: _dataItem3,
    _dataItems: _dataItems3,
    _dateInput: _dateInput3,
    _datePicker: _datePicker3,
    _dateTimeInput: _dateTimeInput3,
    _description: _description3,
    _design: _design3,
    _devCenterTestingComponentData: _devCenterTestingComponentData3,
    _discount,
    _displayField: _displayField3,
    _donationInput: _donationInput3,
    _dropdown: _dropdown3,
    _editorElement: _editorElement3,
    _editorPresence: _editorPresence3,
    _editorReactComponent: _editorReactComponent3,
    _elementItem: _elementItem3,
    _elementStyleDefaults: _elementStyleDefaults3,
    _elementStyleOverrides: _elementStyleOverrides3,
    _expectedInputs: _expectedInputs3,
    _field: _field3,
    _fileUpload: _fileUpload3,
    _fixedPayment: _fixedPayment3,
    _focalPoint: _focalPoint3,
    _formLayout: _formLayout3,
    _formTemplate: _formTemplate3,
    _freeTrialData,
    _function: _function2,
    _functionsShopPriceSpiConfig: _functionsShopPriceSpiConfig3,
    _galleryData: _galleryData3,
    _galleryOptions: _galleryOptions3,
    _group: _group3,
    _image: _image3,
    _imageData: _imageData3,
    _inlineElement: _inlineElement3,
    _inputField: _inputField3,
    _item: _item3,
    _itemImage: _itemImage3,
    _itemLayout: _itemLayout3,
    _itemStyle: _itemStyle3,
    _managedApp,
    _mapData: _mapData3,
    _mapSettings: _mapSettings3,
    _media: _media3,
    _mediaItem: _mediaItem3,
    _messageContainingTranslatables: _messageContainingTranslatables3,
    _multilineAddress: _multilineAddress2,
    _multilingualTranslationSchema: _multilingualTranslationSchema3,
    _node: _node3,
    _numberInput: _numberInput3,
    _numberType: _numberType3,
    _objectType: _objectType3,
    _option: _option2,
    _orCondition: _orCondition3,
    _packageDimension: _packageDimension3,
    _packageType: _packageType3,
    _payment: _payment3,
    _paymentInput: _paymentInput3,
    _phoneInput: _phoneInput3,
    _pluginConfig: _pluginConfig3,
    _poll: _poll3,
    _pollData: _pollData3,
    _pollDesign: _pollDesign3,
    _pollOption: _pollOption3,
    _predefinedExpectedInput: _predefinedExpectedInput3,
    _predefinedExpectedInputConfiguration: _predefinedExpectedInputConfiguration3,
    _premiumInfo,
    _presetEditorPresence: _presetEditorPresence3,
    _presetElementDefaults: _presetElementDefaults3,
    _presetInnerElementDefaults: _presetInnerElementDefaults3,
    _presetItem: _presetItem3,
    _presetStyleDefaults: _presetStyleDefaults3,
    _presetStyleOverrides: _presetStyleOverrides3,
    _pricingDetails,
    _productCheckboxGroup: _productCheckboxGroup3,
    _productCheckboxGroupOption: _productCheckboxGroupOption3,
    _propertiesType: _propertiesType3,
    _radioGroup: _radioGroup3,
    _ratingInput: _ratingInput3,
    _refElement: _refElement3,
    _refInnerElementDefaults: _refInnerElementDefaults3,
    _richContent: _richContent3,
    _richContentOptions: _richContentOptions3,
    _saleInfo,
    _scheduling: _scheduling3,
    _schema: _schema3,
    _schemaGroup: _schemaGroup3,
    _shippingLabelCarrierSpiConfig: _shippingLabelCarrierSpiConfig3,
    _shippingProviderConfig: _shippingProviderConfig3,
    _signature: _signature3,
    _step: _step3,
    _studioWidgetComponentData: _studioWidgetComponentData3,
    _styleItem: _styleItem3,
    _submitSettings: _submitSettings3,
    _tags: _tags3,
    _tagsOption: _tagsOption3,
    _textInput: _textInput3,
    _thankYouMessageOptions: _thankYouMessageOptions3,
    _timeInput: _timeInput3,
    _upstreamWixCommonImage: _upstreamWixCommonImage2,
    _v1Metadata: _v1Metadata3,
    _v1SchemaField: _v1SchemaField3,
    _v2Rule: _v2Rule3,
    _video: _video3,
    _videoData: _videoData3,
    _widgetComponentData: _widgetComponentData3,
    _widgetDisplay: _widgetDisplay3,
    _widgetOutOfIframeComponentData: _widgetOutOfIframeComponentData3,
    _wixFile: _wixFile3
  }).fromJSON;
  function __managedApps(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.managedapps.v1.managed_app",
      method: "GET",
      methodFqn: "com.wixpress.devcenter.managedapps.ManagedApps.ManagedApps",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveComWixpressDevcenterManagedappsManagedAppsUrl({
        protoPath: "/v1/managed-apps",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes
    };
    return metadata;
  }
  __managedApps.fromReq = fromReq;
  __managedApps.__isAmbassador = true;
  return __managedApps;
}

// ../../node_modules/@wix/ambassador-devcenter-managedapps-v1-managed-app/build/es/types.impl.js
init_esm_shims();
var UninstallActions;
(function(UninstallActions2) {
  UninstallActions2["NONE_ACTION"] = "NONE_ACTION";
  UninstallActions2["NO_ACTION"] = "NO_ACTION";
  UninstallActions2["REMOVE_ALL_PRODUCT"] = "REMOVE_ALL_PRODUCT";
  UninstallActions2["SHIPPING_RATES_REGION"] = "SHIPPING_RATES_REGION";
})(UninstallActions || (UninstallActions = {}));
var OpenConsentIn;
(function(OpenConsentIn2) {
  OpenConsentIn2["NONE_VALUE"] = "NONE_VALUE";
  OpenConsentIn2["NEW_WINDOW"] = "NEW_WINDOW";
  OpenConsentIn2["NEW_TAB"] = "NEW_TAB";
})(OpenConsentIn || (OpenConsentIn = {}));
var RenewalType;
(function(RenewalType2) {
  RenewalType2["UNKNOWN"] = "UNKNOWN";
  RenewalType2["AUTO_RENEW_ON"] = "AUTO_RENEW_ON";
  RenewalType2["AUTO_RENEW_OFF"] = "AUTO_RENEW_OFF";
  RenewalType2["MANUAL"] = "MANUAL";
})(RenewalType || (RenewalType = {}));
var PaymentCollectionType;
(function(PaymentCollectionType2) {
  PaymentCollectionType2["PMT_UNKNOWN"] = "PMT_UNKNOWN";
  PaymentCollectionType2["SUBSCRIPTION"] = "SUBSCRIPTION";
  PaymentCollectionType2["NON_PAYABLE"] = "NON_PAYABLE";
  PaymentCollectionType2["ONE_TIME"] = "ONE_TIME";
})(PaymentCollectionType || (PaymentCollectionType = {}));
var IncompleteSetupReason;
(function(IncompleteSetupReason2) {
  IncompleteSetupReason2["NO_REASON"] = "NO_REASON";
  IncompleteSetupReason2["PENDING_CONSENT"] = "PENDING_CONSENT";
  IncompleteSetupReason2["PENDING_CONFIGURATION"] = "PENDING_CONFIGURATION";
  IncompleteSetupReason2["PENDING_REQUIRED_INSTALLATIONS"] = "PENDING_REQUIRED_INSTALLATIONS";
  IncompleteSetupReason2["PENDING_EDITOR"] = "PENDING_EDITOR";
})(IncompleteSetupReason || (IncompleteSetupReason = {}));
var AppGroup;
(function(AppGroup2) {
  AppGroup2["EMPTY"] = "EMPTY";
  AppGroup2["INSTALLED"] = "INSTALLED";
  AppGroup2["PENDING"] = "PENDING";
  AppGroup2["BUSINESS_SOLUTIONS"] = "BUSINESS_SOLUTIONS";
})(AppGroup || (AppGroup = {}));
var ComponentType3;
(function(ComponentType4) {
  ComponentType4["NONE"] = "NONE";
  ComponentType4["STUDIO"] = "STUDIO";
  ComponentType4["PLATFORM"] = "PLATFORM";
  ComponentType4["WORKER"] = "WORKER";
  ComponentType4["DASHBOARD"] = "DASHBOARD";
  ComponentType4["WIDGET"] = "WIDGET";
  ComponentType4["PAGE"] = "PAGE";
  ComponentType4["DASHBOARD_PLATFORM"] = "DASHBOARD_PLATFORM";
  ComponentType4["STUDIO_WIDGET"] = "STUDIO_WIDGET";
  ComponentType4["EMBEDDED_SCRIPT"] = "EMBEDDED_SCRIPT";
  ComponentType4["EXTENSION"] = "EXTENSION";
  ComponentType4["SNIPPET_SOLUTION"] = "SNIPPET_SOLUTION";
  ComponentType4["DATA_COMPONENT"] = "DATA_COMPONENT";
  ComponentType4["WEB"] = "WEB";
  ComponentType4["DC_CONFIG"] = "DC_CONFIG";
  ComponentType4["WIDGET_OUT_OF_IFRAME"] = "WIDGET_OUT_OF_IFRAME";
  ComponentType4["PAGE_OUT_OF_IFRAME"] = "PAGE_OUT_OF_IFRAME";
  ComponentType4["STATIC_FILE"] = "STATIC_FILE";
  ComponentType4["APP_CONFIG"] = "APP_CONFIG";
  ComponentType4["MULTIPLE_DASHBOARDS"] = "MULTIPLE_DASHBOARDS";
  ComponentType4["PAYMENTS_GATEWAY"] = "PAYMENTS_GATEWAY";
  ComponentType4["CODE_PACKAGE"] = "CODE_PACKAGE";
  ComponentType4["AUTOMATION_TRIGGER"] = "AUTOMATION_TRIGGER";
  ComponentType4["INVOICES_ACTIONS"] = "INVOICES_ACTIONS";
  ComponentType4["DASHBOARD_APPLICATION"] = "DASHBOARD_APPLICATION";
  ComponentType4["CONTACT_LABELS"] = "CONTACT_LABELS";
  ComponentType4["WIDGET_PLUGIN"] = "WIDGET_PLUGIN";
  ComponentType4["CROSS_SELL"] = "CROSS_SELL";
  ComponentType4["LOCAL_DELIVERY"] = "LOCAL_DELIVERY";
  ComponentType4["PAYMENT_PROVIDER"] = "PAYMENT_PROVIDER";
  ComponentType4["ECOM_MEMBERSHIPS"] = "ECOM_MEMBERSHIPS";
  ComponentType4["ECOM_LINE_ITEMS_ENRICHER"] = "ECOM_LINE_ITEMS_ENRICHER";
  ComponentType4["ECOM_SHIPPING_RATES"] = "ECOM_SHIPPING_RATES";
  ComponentType4["SHIPPING_LABEL_CARRIER"] = "SHIPPING_LABEL_CARRIER";
  ComponentType4["RESTAURANTS_POS"] = "RESTAURANTS_POS";
  ComponentType4["FICTIONAL_SHIPPING_PROVIDER"] = "FICTIONAL_SHIPPING_PROVIDER";
  ComponentType4["ALERT_ENRICHER"] = "ALERT_ENRICHER";
  ComponentType4["DATA_EXTENSIONS"] = "DATA_EXTENSIONS";
  ComponentType4["GENERIC_HOOKS"] = "GENERIC_HOOKS";
  ComponentType4["AUTOMATIONS_ACTION_PROVIDER"] = "AUTOMATIONS_ACTION_PROVIDER";
  ComponentType4["ECOM_CATALOG"] = "ECOM_CATALOG";
  ComponentType4["BACK_OFFICE_EXTENSION_CONTAINER"] = "BACK_OFFICE_EXTENSION_CONTAINER";
  ComponentType4["BACK_OFFICE_EXTENSION"] = "BACK_OFFICE_EXTENSION";
  ComponentType4["AUTOMATIONS_TRIGGER_PROVIDER"] = "AUTOMATIONS_TRIGGER_PROVIDER";
  ComponentType4["IDENTITY_PRE_REGISTRATION"] = "IDENTITY_PRE_REGISTRATION";
  ComponentType4["PREMIUM_PRODUCTS_PATHS"] = "PREMIUM_PRODUCTS_PATHS";
  ComponentType4["ECOM_CUSTOM_SCOPE"] = "ECOM_CUSTOM_SCOPE";
  ComponentType4["GIFT_CARDS_PROVIDER"] = "GIFT_CARDS_PROVIDER";
  ComponentType4["DEALER_EXTERNAL_FILTER_PROVIDER"] = "DEALER_EXTERNAL_FILTER_PROVIDER";
  ComponentType4["ECOM_DROPSHIPPING_PROVIDER"] = "ECOM_DROPSHIPPING_PROVIDER";
  ComponentType4["INVOICES_PROVIDER"] = "INVOICES_PROVIDER";
  ComponentType4["SEO_KEYWORDS_SUGGESTIONS"] = "SEO_KEYWORDS_SUGGESTIONS";
  ComponentType4["ECOM_DISCOUNTS_TRIGGER"] = "ECOM_DISCOUNTS_TRIGGER";
  ComponentType4["MULTILINGUAL_CONTENT_PROVIDER"] = "MULTILINGUAL_CONTENT_PROVIDER";
  ComponentType4["APPLICATION_AUTOMATION"] = "APPLICATION_AUTOMATION";
  ComponentType4["BACK_OFFICE_SIDEBAR_CATEGORY"] = "BACK_OFFICE_SIDEBAR_CATEGORY";
  ComponentType4["BACK_OFFICE_PAGE"] = "BACK_OFFICE_PAGE";
  ComponentType4["ECOM_ADDITIONAL_FEES"] = "ECOM_ADDITIONAL_FEES";
  ComponentType4["PING_USER_NOTIFICATION"] = "PING_USER_NOTIFICATION";
  ComponentType4["ECOM_RECOMMENDATIONS_PROVIDER"] = "ECOM_RECOMMENDATIONS_PROVIDER";
  ComponentType4["BOOKINGS_PRICING_PROVIDER"] = "BOOKINGS_PRICING_PROVIDER";
  ComponentType4["IDENTITY_AUTHENTICATOR"] = "IDENTITY_AUTHENTICATOR";
  ComponentType4["IDENTITY_IDP_CONNECTOR"] = "IDENTITY_IDP_CONNECTOR";
  ComponentType4["ITEMS_SELECTION_PROVIDER"] = "ITEMS_SELECTION_PROVIDER";
  ComponentType4["PORTFOLIO_SYNCED_PROJECTS_PROVIDER"] = "PORTFOLIO_SYNCED_PROJECTS_PROVIDER";
  ComponentType4["COMMUNICATION_CHANNEL"] = "COMMUNICATION_CHANNEL";
  ComponentType4["IDENTITY_POST_LOGIN"] = "IDENTITY_POST_LOGIN";
  ComponentType4["BACK_OFFICE_WIDGET"] = "BACK_OFFICE_WIDGET";
  ComponentType4["SOCIAL_MARKETING_DESIGN"] = "SOCIAL_MARKETING_DESIGN";
  ComponentType4["FORMS_SUBMISSIONS_PROVIDER"] = "FORMS_SUBMISSIONS_PROVIDER";
  ComponentType4["WIX_OFFERING"] = "WIX_OFFERING";
  ComponentType4["DEV_CENTER_TESTING_COMPONENT"] = "DEV_CENTER_TESTING_COMPONENT";
  ComponentType4["COMPONENTS_VALIDATOR_PROVIDER"] = "COMPONENTS_VALIDATOR_PROVIDER";
  ComponentType4["COMPONENTS_TRANSLATIONS_ADDITIONAL_FIELDS_PROVIDER"] = "COMPONENTS_TRANSLATIONS_ADDITIONAL_FIELDS_PROVIDER";
  ComponentType4["FORMS_SCHEMA_PROVIDER"] = "FORMS_SCHEMA_PROVIDER";
  ComponentType4["BOOKINGS_EXTERNAL_CALENDAR_PROVIDER"] = "BOOKINGS_EXTERNAL_CALENDAR_PROVIDER";
  ComponentType4["ECOM_DEFAULT_TAXATION_CATEGORY"] = "ECOM_DEFAULT_TAXATION_CATEGORY";
  ComponentType4["VIEWER_DYNAMIC_SITE_STRUCTURE_PROVIDER"] = "VIEWER_DYNAMIC_SITE_STRUCTURE_PROVIDER";
  ComponentType4["PING_UOU_NOTIFICATION"] = "PING_UOU_NOTIFICATION";
  ComponentType4["HEADLESS_OAUTH"] = "HEADLESS_OAUTH";
  ComponentType4["ECOM_TAX_CALCULATOR_SPI"] = "ECOM_TAX_CALCULATOR_SPI";
  ComponentType4["COMMENTS_MODERATION_PROVIDER"] = "COMMENTS_MODERATION_PROVIDER";
  ComponentType4["GRID_APP_FILES_TRANSFORMER"] = "GRID_APP_FILES_TRANSFORMER";
  ComponentType4["BENEFIT_PROGRAMS_POLICY_PROVIDER"] = "BENEFIT_PROGRAMS_POLICY_PROVIDER";
  ComponentType4["PREMIUM_CUSTOM_CHARGES"] = "PREMIUM_CUSTOM_CHARGES";
  ComponentType4["ECOM_VALIDATIONS"] = "ECOM_VALIDATIONS";
  ComponentType4["COMPONENT_REFERENCE_DATA_PROVIDER"] = "COMPONENT_REFERENCE_DATA_PROVIDER";
  ComponentType4["WIX_REVIEWS_PRODUCT_CATALOG"] = "WIX_REVIEWS_PRODUCT_CATALOG";
  ComponentType4["SOCIAL_MARKETING_DESIGNS_PROVIDER"] = "SOCIAL_MARKETING_DESIGNS_PROVIDER";
  ComponentType4["GOOGLE_BUSINESS_PROFILE_FEATURE_PROVIDER"] = "GOOGLE_BUSINESS_PROFILE_FEATURE_PROVIDER";
  ComponentType4["COMMENTS_FILTER_PROVIDER"] = "COMMENTS_FILTER_PROVIDER";
  ComponentType4["BILLING_TAX_ID_VALIDATOR"] = "BILLING_TAX_ID_VALIDATOR";
  ComponentType4["PING_SETTINGS_GROUP"] = "PING_SETTINGS_GROUP";
  ComponentType4["FORMS_SPAM_SUBMISSIONS_PROVIDER"] = "FORMS_SPAM_SUBMISSIONS_PROVIDER";
  ComponentType4["EDITOR_ADDON"] = "EDITOR_ADDON";
  ComponentType4["EXTERNAL_DATABASE_PROVIDER"] = "EXTERNAL_DATABASE_PROVIDER";
  ComponentType4["ECOM_PAYMENT_SETTINGS"] = "ECOM_PAYMENT_SETTINGS";
  ComponentType4["NOTIFICATION_TOPIC"] = "NOTIFICATION_TOPIC";
  ComponentType4["NOTIFICATION_PREFERENCES_FILTER_PROVIDER"] = "NOTIFICATION_PREFERENCES_FILTER_PROVIDER";
  ComponentType4["BOOKINGS_RESOURCE_TYPES_PROVIDER"] = "BOOKINGS_RESOURCE_TYPES_PROVIDER";
  ComponentType4["PRICING_PLANS_FORM_CONFIGURATION"] = "PRICING_PLANS_FORM_CONFIGURATION";
  ComponentType4["USER_NOTIFICATION"] = "USER_NOTIFICATION";
  ComponentType4["CONTACT_NOTIFICATION"] = "CONTACT_NOTIFICATION";
  ComponentType4["UNIFIED_PAGE"] = "UNIFIED_PAGE";
  ComponentType4["AVAILABILITY_TIME_SLOTS_CONFIGURATION_PROVIDER"] = "AVAILABILITY_TIME_SLOTS_CONFIGURATION_PROVIDER";
  ComponentType4["PROPOSAL_EDITOR_PROVIDER"] = "PROPOSAL_EDITOR_PROVIDER";
  ComponentType4["CUSTOM_TABLE_RESERVATIONS_PROVIDER"] = "CUSTOM_TABLE_RESERVATIONS_PROVIDER";
  ComponentType4["COMMENTS_CONTEXT_PROVIDER"] = "COMMENTS_CONTEXT_PROVIDER";
  ComponentType4["FORMS_SPAM_SUBMISSION_REPORTS_PROVIDER"] = "FORMS_SPAM_SUBMISSION_REPORTS_PROVIDER";
  ComponentType4["AUTOMATIONS_VELO_ACTION_PROVIDER"] = "AUTOMATIONS_VELO_ACTION_PROVIDER";
  ComponentType4["CALENDAR_EVENT_TYPE_PROVIDER"] = "CALENDAR_EVENT_TYPE_PROVIDER";
  ComponentType4["RESERVED"] = "RESERVED";
  ComponentType4["SMS_ACTION_MESSAGE"] = "SMS_ACTION_MESSAGE";
  ComponentType4["BOOKING_POLICY_PROVIDER"] = "BOOKING_POLICY_PROVIDER";
  ComponentType4["MULTI_SERVICE_BOOKING_POLICY_PROVIDER"] = "MULTI_SERVICE_BOOKING_POLICY_PROVIDER";
  ComponentType4["AI_ASSISTANT"] = "AI_ASSISTANT";
  ComponentType4["FORMS_SUBMISSIONS_EXTENSION_PROVIDER"] = "FORMS_SUBMISSIONS_EXTENSION_PROVIDER";
  ComponentType4["MULTILINGUAL_TRANSLATION_SCHEMA"] = "MULTILINGUAL_TRANSLATION_SCHEMA";
  ComponentType4["TAX_CALCULATION_PROVIDER"] = "TAX_CALCULATION_PROVIDER";
  ComponentType4["TAX_GROUPS_PROVIDER"] = "TAX_GROUPS_PROVIDER";
  ComponentType4["BACK_OFFICE_MODAL"] = "BACK_OFFICE_MODAL";
  ComponentType4["DEPLOYMENT_PIPELINE_PROVIDER"] = "DEPLOYMENT_PIPELINE_PROVIDER";
  ComponentType4["CUSTOM_ELEMENT_WIDGET"] = "CUSTOM_ELEMENT_WIDGET";
  ComponentType4["BACK_OFFICE_EXTENSION_WIDGET"] = "BACK_OFFICE_EXTENSION_WIDGET";
  ComponentType4["BACK_OFFICE_EXTENSION_MENU_ITEM"] = "BACK_OFFICE_EXTENSION_MENU_ITEM";
  ComponentType4["FORM_TEMPLATE"] = "FORM_TEMPLATE";
  ComponentType4["NOTIFICATION_CONTENT"] = "NOTIFICATION_CONTENT";
  ComponentType4["BROADCAST_LIST"] = "BROADCAST_LIST";
  ComponentType4["PARTNERS_PAYOUTS"] = "PARTNERS_PAYOUTS";
  ComponentType4["WIX_REVIEWS_ENTITY_CATALOG"] = "WIX_REVIEWS_ENTITY_CATALOG";
  ComponentType4["VELO_PUBLISH_PIPELINE_TASK_PROVIDER"] = "VELO_PUBLISH_PIPELINE_TASK_PROVIDER";
  ComponentType4["FUNCTIONS_SHOP_PRICE_PROVIDER"] = "FUNCTIONS_SHOP_PRICE_PROVIDER";
  ComponentType4["FUNCTION"] = "FUNCTION";
  ComponentType4["ECOM_CHECKOUT_CONTENT"] = "ECOM_CHECKOUT_CONTENT";
  ComponentType4["COMMUNICATION_CHANNEL_PROVIDER"] = "COMMUNICATION_CHANNEL_PROVIDER";
  ComponentType4["WEBHOOK"] = "WEBHOOK";
  ComponentType4["TOPOLOGY"] = "TOPOLOGY";
  ComponentType4["LOYALTY_CUSTOM_REWARDS"] = "LOYALTY_CUSTOM_REWARDS";
  ComponentType4["FUNCTION_RECIPE"] = "FUNCTION_RECIPE";
  ComponentType4["BACK_OFFICE_EXTERNAL_URL"] = "BACK_OFFICE_EXTERNAL_URL";
  ComponentType4["IDENTITY_FACTOR"] = "IDENTITY_FACTOR";
  ComponentType4["ECOM_DISCOUNTS"] = "ECOM_DISCOUNTS";
  ComponentType4["VELO_CUSTOM_CSS"] = "VELO_CUSTOM_CSS";
  ComponentType4["DEALER_ADAPTIVE_COMPONENT_PROVIDER"] = "DEALER_ADAPTIVE_COMPONENT_PROVIDER";
  ComponentType4["AI_ASSISTANT_ACTION"] = "AI_ASSISTANT_ACTION";
  ComponentType4["ECOM_INVENTORY"] = "ECOM_INVENTORY";
  ComponentType4["MONITORING"] = "MONITORING";
  ComponentType4["PAPI_PROVIDER"] = "PAPI_PROVIDER";
  ComponentType4["UNIFIED_LIGHTBOX"] = "UNIFIED_LIGHTBOX";
  ComponentType4["FORMS_EXTENSION_PROVIDER"] = "FORMS_EXTENSION_PROVIDER";
  ComponentType4["MULTILINGUAL_TRANSLATION_SCHEMA_GROUP"] = "MULTILINGUAL_TRANSLATION_SCHEMA_GROUP";
  ComponentType4["PANEL"] = "PANEL";
  ComponentType4["PREMIUM_PURCHASE_VALIDATIONS"] = "PREMIUM_PURCHASE_VALIDATIONS";
  ComponentType4["BROWSER_STORAGE"] = "BROWSER_STORAGE";
  ComponentType4["SDK_DEFINITION"] = "SDK_DEFINITION";
  ComponentType4["SITE_WIDGET_SLOT"] = "SITE_WIDGET_SLOT";
  ComponentType4["CALENDAR_EVENT_VALIDATION_PROVIDER"] = "CALENDAR_EVENT_VALIDATION_PROVIDER";
  ComponentType4["CLIENT_SIDE_SERVICE"] = "CLIENT_SIDE_SERVICE";
  ComponentType4["BILLING_SETTINGS"] = "BILLING_SETTINGS";
  ComponentType4["PATTERNS_WIZARD"] = "PATTERNS_WIZARD";
  ComponentType4["APPLICATION_PROFILE"] = "APPLICATION_PROFILE";
  ComponentType4["TEXT_TO_SPEECH_ACTION_MESSAGE"] = "TEXT_TO_SPEECH_ACTION_MESSAGE";
  ComponentType4["AUDIENCE_PROVIDER"] = "AUDIENCE_PROVIDER";
  ComponentType4["PRICING_PLANS_PRICE"] = "PRICING_PLANS_PRICE";
  ComponentType4["PRICING_PLAN_START_DATE_LIMITS"] = "PRICING_PLAN_START_DATE_LIMITS";
  ComponentType4["PRICING_PLAN_START_DATE_RULES"] = "PRICING_PLAN_START_DATE_RULES";
  ComponentType4["EVENTS_TICKET_RESERVATIONS"] = "EVENTS_TICKET_RESERVATIONS";
  ComponentType4["PAYMENTS_DISPUTE_SERVICE_PLUGIN"] = "PAYMENTS_DISPUTE_SERVICE_PLUGIN";
  ComponentType4["PRICING_PLANS_FEES"] = "PRICING_PLANS_FEES";
  ComponentType4["EDITOR_REACT_COMPONENT"] = "EDITOR_REACT_COMPONENT";
  ComponentType4["SUPPLIERS_HUB_MARKETPLACE"] = "SUPPLIERS_HUB_MARKETPLACE";
  ComponentType4["FORM_SCHEMA_DYNAMIC_VALUES"] = "FORM_SCHEMA_DYNAMIC_VALUES";
  ComponentType4["BLOG_PAYWALL_PROVIDER"] = "BLOG_PAYWALL_PROVIDER";
  ComponentType4["LOYALTY_CUSTOM_REWARDS_V2"] = "LOYALTY_CUSTOM_REWARDS_V2";
  ComponentType4["STORES_PRODUCT_RESTRICTIONS"] = "STORES_PRODUCT_RESTRICTIONS";
  ComponentType4["FORM_SUBMISSION_MODERATION"] = "FORM_SUBMISSION_MODERATION";
  ComponentType4["EVENTS_EVENT_BADGES"] = "EVENTS_EVENT_BADGES";
  ComponentType4["BILLING_OPERATION"] = "BILLING_OPERATION";
  ComponentType4["BACK_OFFICE_CUSTOMIZATION"] = "BACK_OFFICE_CUSTOMIZATION";
  ComponentType4["COMPONENT_ENRICHER_PROVIDER"] = "COMPONENT_ENRICHER_PROVIDER";
  ComponentType4["BACK_OFFICE_RESTRICTED_CUSTOMIZATION"] = "BACK_OFFICE_RESTRICTED_CUSTOMIZATION";
  ComponentType4["EDITOR_APP_PREVIEWS_POC"] = "EDITOR_APP_PREVIEWS_POC";
  ComponentType4["LEGENDS_PERSONA_CONFIGURATION"] = "LEGENDS_PERSONA_CONFIGURATION";
  ComponentType4["WIX_HOSTING_APP_DEPLOYMENT_PROVIDER"] = "WIX_HOSTING_APP_DEPLOYMENT_PROVIDER";
  ComponentType4["BACKEND_WORKER"] = "BACKEND_WORKER";
  ComponentType4["EVENT_TIME_SLOTS_CONFIGURATION_PROVIDER"] = "EVENT_TIME_SLOTS_CONFIGURATION_PROVIDER";
  ComponentType4["WIX_HOSTING_APP_ENVIRONMENT_PROVIDER"] = "WIX_HOSTING_APP_ENVIRONMENT_PROVIDER";
  ComponentType4["SDK_EXPORTS"] = "SDK_EXPORTS";
  ComponentType4["VIEWER_SERVICE"] = "VIEWER_SERVICE";
  ComponentType4["WIX_PAYMENTS_PROVIDER_ACCOUNT_SERVICE_PLUGIN"] = "WIX_PAYMENTS_PROVIDER_ACCOUNT_SERVICE_PLUGIN";
  ComponentType4["CONTACTS_SEGMENTS_V2_FILTER_PROVIDER"] = "CONTACTS_SEGMENTS_V2_FILTER_PROVIDER";
  ComponentType4["ANALYTICS_PRODUCT_CATALOG"] = "ANALYTICS_PRODUCT_CATALOG";
  ComponentType4["SITE_MIGRATION"] = "SITE_MIGRATION";
  ComponentType4["RESTAURANTS_POS_PROVIDER_SETTINGS_SERVICE_PLUGIN"] = "RESTAURANTS_POS_PROVIDER_SETTINGS_SERVICE_PLUGIN";
  ComponentType4["WIX_VIBE_CODING_INSTRUCTIONS"] = "WIX_VIBE_CODING_INSTRUCTIONS";
  ComponentType4["TAX_EXEMPT_GROUPS_PROVIDER"] = "TAX_EXEMPT_GROUPS_PROVIDER";
  ComponentType4["BOOKING_AUTOMATIONS_CONFIGURATION"] = "BOOKING_AUTOMATIONS_CONFIGURATION";
  ComponentType4["WIX_VIBE_COMPONENT"] = "WIX_VIBE_COMPONENT";
  ComponentType4["WIXEL"] = "WIXEL";
  ComponentType4["STAFF_SORTING_PROVIDER"] = "STAFF_SORTING_PROVIDER";
  ComponentType4["FUNCTION_ECOM_DISCOUNT_TRIGGER_ELIGIBILITY_PROVIDER"] = "FUNCTION_ECOM_DISCOUNT_TRIGGER_ELIGIBILITY_PROVIDER";
})(ComponentType3 || (ComponentType3 = {}));
var WidgetVertical2;
(function(WidgetVertical3) {
  WidgetVertical3["NONE_VERTICAL"] = "NONE_VERTICAL";
  WidgetVertical3["TOP"] = "TOP";
  WidgetVertical3["CENTER_VERTICAL"] = "CENTER_VERTICAL";
  WidgetVertical3["BOTTOM"] = "BOTTOM";
})(WidgetVertical2 || (WidgetVertical2 = {}));
var WidgetHorizontal2;
(function(WidgetHorizontal3) {
  WidgetHorizontal3["NONE_HORIZONTAL"] = "NONE_HORIZONTAL";
  WidgetHorizontal3["LEFT"] = "LEFT";
  WidgetHorizontal3["CENTER_HORIZONTAL"] = "CENTER_HORIZONTAL";
  WidgetHorizontal3["RIGHT"] = "RIGHT";
})(WidgetHorizontal2 || (WidgetHorizontal2 = {}));
var WidgetWidthType2;
(function(WidgetWidthType3) {
  WidgetWidthType3["NONE_TYPE"] = "NONE_TYPE";
  WidgetWidthType3["CUSTOM"] = "CUSTOM";
  WidgetWidthType3["FULL"] = "FULL";
})(WidgetWidthType2 || (WidgetWidthType2 = {}));
var Region2;
(function(Region3) {
  Region3["no_region"] = "no_region";
  Region3["header"] = "header";
  Region3["pageContainer"] = "pageContainer";
  Region3["footer"] = "footer";
})(Region2 || (Region2 = {}));
var UnitType2;
(function(UnitType3) {
  UnitType3["NO_UNIT"] = "NO_UNIT";
  UnitType3["AUTO"] = "AUTO";
  UnitType3["PX"] = "PX";
  UnitType3["VH"] = "VH";
  UnitType3["VW"] = "VW";
  UnitType3["PERCENTAGE"] = "PERCENTAGE";
})(UnitType2 || (UnitType2 = {}));
var HorizontalDocking2;
(function(HorizontalDocking3) {
  HorizontalDocking3["NO_HDOCKING"] = "NO_HDOCKING";
  HorizontalDocking3["LEFT_DOCKING"] = "LEFT_DOCKING";
  HorizontalDocking3["HCENTER"] = "HCENTER";
  HorizontalDocking3["RIGHT_DOCKING"] = "RIGHT_DOCKING";
})(HorizontalDocking2 || (HorizontalDocking2 = {}));
var VerticalDocking2;
(function(VerticalDocking3) {
  VerticalDocking3["NO_VDOCKING"] = "NO_VDOCKING";
  VerticalDocking3["TOP_DOCKING"] = "TOP_DOCKING";
  VerticalDocking3["VCENTER"] = "VCENTER";
  VerticalDocking3["BOTTOM_DOCKING"] = "BOTTOM_DOCKING";
})(VerticalDocking2 || (VerticalDocking2 = {}));
var SiteMembersSsrCaching2;
(function(SiteMembersSsrCaching3) {
  SiteMembersSsrCaching3["UNKNOWN_SITE_MEMBERS_SSR_CACHING"] = "UNKNOWN_SITE_MEMBERS_SSR_CACHING";
  SiteMembersSsrCaching3["CACHING_ALLOWED"] = "CACHING_ALLOWED";
  SiteMembersSsrCaching3["CACHING_NOT_ALLOWED"] = "CACHING_NOT_ALLOWED";
})(SiteMembersSsrCaching2 || (SiteMembersSsrCaching2 = {}));
var ReplacementType2;
(function(ReplacementType3) {
  ReplacementType3["UNKNOWN_REPLACEMENT"] = "UNKNOWN_REPLACEMENT";
  ReplacementType3["REPLACING"] = "REPLACING";
  ReplacementType3["REPLACEABLE"] = "REPLACEABLE";
})(ReplacementType2 || (ReplacementType2 = {}));
var PluginInterface2;
(function(PluginInterface3) {
  PluginInterface3["NONE_INTERFACE"] = "NONE_INTERFACE";
  PluginInterface3["REVIEWS"] = "REVIEWS";
  PluginInterface3["RATINGS_SUMMARY"] = "RATINGS_SUMMARY";
  PluginInterface3["RATINGS_SUMMARY_OOI_LIST"] = "RATINGS_SUMMARY_OOI_LIST";
  PluginInterface3["BOOKINGS_SERVICE"] = "BOOKINGS_SERVICE";
  PluginInterface3["BOOKINGS_FORM"] = "BOOKINGS_FORM";
  PluginInterface3["BASE"] = "BASE";
  PluginInterface3["EVENT"] = "EVENT";
  PluginInterface3["PRODUCT"] = "PRODUCT";
  PluginInterface3["CHECKOUT"] = "CHECKOUT";
  PluginInterface3["CATEGORY"] = "CATEGORY";
  PluginInterface3["BOOKINGS_CALENDAR"] = "BOOKINGS_CALENDAR";
  PluginInterface3["CART"] = "CART";
})(PluginInterface2 || (PluginInterface2 = {}));
var ExtensionExposureExposure2;
(function(ExtensionExposureExposure3) {
  ExtensionExposureExposure3["PRIVATE"] = "PRIVATE";
  ExtensionExposureExposure3["INTERNAL"] = "INTERNAL";
  ExtensionExposureExposure3["PUBLIC"] = "PUBLIC";
})(ExtensionExposureExposure2 || (ExtensionExposureExposure2 = {}));
var Maturity2;
(function(Maturity3) {
  Maturity3["ALPHA"] = "ALPHA";
  Maturity3["BETA"] = "BETA";
  Maturity3["GA"] = "GA";
  Maturity3["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
})(Maturity2 || (Maturity2 = {}));
var HTTPMethod2;
(function(HTTPMethod3) {
  HTTPMethod3["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  HTTPMethod3["GET"] = "GET";
  HTTPMethod3["POST"] = "POST";
})(HTTPMethod2 || (HTTPMethod2 = {}));
var InstallPage2;
(function(InstallPage3) {
  InstallPage3["NO_PAGE"] = "NO_PAGE";
  InstallPage3["CURRENT"] = "CURRENT";
  InstallPage3["PAGE"] = "PAGE";
  InstallPage3["LIGHTBOX"] = "LIGHTBOX";
})(InstallPage2 || (InstallPage2 = {}));
var RegionType2;
(function(RegionType3) {
  RegionType3["HEADER"] = "HEADER";
  RegionType3["BODY"] = "BODY";
  RegionType3["FOOTER"] = "FOOTER";
})(RegionType2 || (RegionType2 = {}));
var StaticContainer2;
(function(StaticContainer3) {
  StaticContainer3["UNKNOWN_CONTAINER"] = "UNKNOWN_CONTAINER";
  StaticContainer3["HOMEPAGE"] = "HOMEPAGE";
})(StaticContainer2 || (StaticContainer2 = {}));
var EmbeddedScriptPages2;
(function(EmbeddedScriptPages3) {
  EmbeddedScriptPages3["NONE_PAGES"] = "NONE_PAGES";
  EmbeddedScriptPages3["ONCE"] = "ONCE";
  EmbeddedScriptPages3["SPECIFIC_PAGES"] = "SPECIFIC_PAGES";
})(EmbeddedScriptPages2 || (EmbeddedScriptPages2 = {}));
var EmbeddedScriptPlacement2;
(function(EmbeddedScriptPlacement3) {
  EmbeddedScriptPlacement3["NONE_PLACEMENT"] = "NONE_PLACEMENT";
  EmbeddedScriptPlacement3["HEAD"] = "HEAD";
  EmbeddedScriptPlacement3["BODY_START"] = "BODY_START";
  EmbeddedScriptPlacement3["BODY_END"] = "BODY_END";
})(EmbeddedScriptPlacement2 || (EmbeddedScriptPlacement2 = {}));
var EmbedCategory2;
(function(EmbedCategory3) {
  EmbedCategory3["UNKNOWN"] = "UNKNOWN";
  EmbedCategory3["ESSENTIAL"] = "ESSENTIAL";
  EmbedCategory3["FUNCTIONAL"] = "FUNCTIONAL";
  EmbedCategory3["ANALYTICS"] = "ANALYTICS";
  EmbedCategory3["ADVERTISING"] = "ADVERTISING";
})(EmbedCategory2 || (EmbedCategory2 = {}));
var TemplateDefaultColor2;
(function(TemplateDefaultColor3) {
  TemplateDefaultColor3["BACKGROUND"] = "BACKGROUND";
  TemplateDefaultColor3["SECONDARY_TEXTS"] = "SECONDARY_TEXTS";
  TemplateDefaultColor3["MAIN_TEXT_AND_ICONS"] = "MAIN_TEXT_AND_ICONS";
  TemplateDefaultColor3["BORDERS_AND_DIVIDERS"] = "BORDERS_AND_DIVIDERS";
  TemplateDefaultColor3["BUTTONS_AND_LINKS"] = "BUTTONS_AND_LINKS";
})(TemplateDefaultColor2 || (TemplateDefaultColor2 = {}));
var ThumbnailsSize2;
(function(ThumbnailsSize3) {
  ThumbnailsSize3["SMALL"] = "SMALL";
  ThumbnailsSize3["MEDIUM"] = "MEDIUM";
  ThumbnailsSize3["LARGE"] = "LARGE";
  ThumbnailsSize3["XLARGE"] = "XLARGE";
})(ThumbnailsSize2 || (ThumbnailsSize2 = {}));
var BarAlignmentSelected2;
(function(BarAlignmentSelected3) {
  BarAlignmentSelected3["ALIGN_LEFT"] = "ALIGN_LEFT";
  BarAlignmentSelected3["ALIGN_CENTER"] = "ALIGN_CENTER";
  BarAlignmentSelected3["ALIGN_RIGHT"] = "ALIGN_RIGHT";
})(BarAlignmentSelected2 || (BarAlignmentSelected2 = {}));
var DefaultTextStyle2;
(function(DefaultTextStyle3) {
  DefaultTextStyle3["TITLE"] = "TITLE";
  DefaultTextStyle3["PARAGRAPH"] = "PARAGRAPH";
  DefaultTextStyle3["LOWER_HIERARCHY_TEXTS"] = "LOWER_HIERARCHY_TEXTS";
})(DefaultTextStyle2 || (DefaultTextStyle2 = {}));
var ElementType2;
(function(ElementType3) {
  ElementType3["WIDGET"] = "WIDGET";
  ElementType3["PAGE"] = "PAGE";
})(ElementType2 || (ElementType2 = {}));
var ScriptType2;
(function(ScriptType3) {
  ScriptType3["NO_SCRIPT_TYPE"] = "NO_SCRIPT_TYPE";
  ScriptType3["MODULE"] = "MODULE";
})(ScriptType2 || (ScriptType2 = {}));
var ExtensionType2;
(function(ExtensionType3) {
  ExtensionType3["NONE_EXTENSION"] = "NONE_EXTENSION";
  ExtensionType3["PAYMENTS_GATEWAY_EXTENSION"] = "PAYMENTS_GATEWAY_EXTENSION";
  ExtensionType3["COUPONS_EXTENSION"] = "COUPONS_EXTENSION";
  ExtensionType3["DROPSHIPPING_EXTENSION"] = "DROPSHIPPING_EXTENSION";
  ExtensionType3["FULFILMENT_EXTENSION"] = "FULFILMENT_EXTENSION";
  ExtensionType3["DROPSHIPPING_SUPPLIER_EXTENSION"] = "DROPSHIPPING_SUPPLIER_EXTENSION";
  ExtensionType3["FULFILLMENT_CENTER_EXTENSION"] = "FULFILLMENT_CENTER_EXTENSION";
  ExtensionType3["RESTAURANTS_POS_EXTENSION"] = "RESTAURANTS_POS_EXTENSION";
  ExtensionType3["ART_STORE_EXTENSION"] = "ART_STORE_EXTENSION";
  ExtensionType3["ASCEND_AUTOMATION_EXTENSION"] = "ASCEND_AUTOMATION_EXTENSION";
  ExtensionType3["CONTACT_LABELS_EXTENSION"] = "CONTACT_LABELS_EXTENSION";
})(ExtensionType2 || (ExtensionType2 = {}));
var PrimitiveType2;
(function(PrimitiveType3) {
  PrimitiveType3["UNKNOWN_PRIMITIVE_TYPE"] = "UNKNOWN_PRIMITIVE_TYPE";
  PrimitiveType3["TEXT"] = "TEXT";
  PrimitiveType3["BOOLEAN"] = "BOOLEAN";
  PrimitiveType3["NUMBER"] = "NUMBER";
})(PrimitiveType2 || (PrimitiveType2 = {}));
var SimpleType2;
(function(SimpleType3) {
  SimpleType3["UNKNOWN_SIMPLE_TYPE"] = "UNKNOWN_SIMPLE_TYPE";
  SimpleType3["MONEY"] = "MONEY";
  SimpleType3["LINK"] = "LINK";
  SimpleType3["BACKOFFICE_LINK"] = "BACKOFFICE_LINK";
  SimpleType3["LIVESITE_LINK"] = "LIVESITE_LINK";
  SimpleType3["MULTILINGUAL"] = "MULTILINGUAL";
  SimpleType3["IMAGE_LINK"] = "IMAGE_LINK";
  SimpleType3["GUID"] = "GUID";
  SimpleType3["EMAIL"] = "EMAIL";
  SimpleType3["PHONE"] = "PHONE";
  SimpleType3["CONTACT_ID"] = "CONTACT_ID";
})(SimpleType2 || (SimpleType2 = {}));
var Exposure2;
(function(Exposure3) {
  Exposure3["UNKNOWN_EXPOSURE"] = "UNKNOWN_EXPOSURE";
  Exposure3["SETUP"] = "SETUP";
  Exposure3["HIDDEN"] = "HIDDEN";
  Exposure3["EXPOSED"] = "EXPOSED";
})(Exposure2 || (Exposure2 = {}));
var PartialPaymentRestriction2;
(function(PartialPaymentRestriction3) {
  PartialPaymentRestriction3["UNDEFINED"] = "UNDEFINED";
  PartialPaymentRestriction3["ALLOW"] = "ALLOW";
  PartialPaymentRestriction3["DISALLOW"] = "DISALLOW";
})(PartialPaymentRestriction2 || (PartialPaymentRestriction2 = {}));
var HostContainerId2;
(function(HostContainerId3) {
  HostContainerId3["BUSINESS_MANAGER"] = "BUSINESS_MANAGER";
  HostContainerId3["BUSINESS_DASHBOARD_HOST"] = "BUSINESS_DASHBOARD_HOST";
  HostContainerId3["SIDEBAR_FOOTER"] = "SIDEBAR_FOOTER";
})(HostContainerId2 || (HostContainerId2 = {}));
var MandatoryField2;
(function(MandatoryField3) {
  MandatoryField3["ZIPCODE"] = "ZIPCODE";
  MandatoryField3["CITY"] = "CITY";
  MandatoryField3["STATE"] = "STATE";
  MandatoryField3["ADDRESS"] = "ADDRESS";
  MandatoryField3["COUNTRY_CODE"] = "COUNTRY_CODE";
  MandatoryField3["EMAIL"] = "EMAIL";
  MandatoryField3["PHONE"] = "PHONE";
  MandatoryField3["FIRST_NAME"] = "FIRST_NAME";
  MandatoryField3["LAST_NAME"] = "LAST_NAME";
  MandatoryField3["STREET"] = "STREET";
  MandatoryField3["HOUSE_NUMBER"] = "HOUSE_NUMBER";
  MandatoryField3["TAX_IDENTIFIER"] = "TAX_IDENTIFIER";
})(MandatoryField2 || (MandatoryField2 = {}));
var MeasurementSystem2;
(function(MeasurementSystem3) {
  MeasurementSystem3["Metric"] = "Metric";
  MeasurementSystem3["Imperial"] = "Imperial";
})(MeasurementSystem2 || (MeasurementSystem2 = {}));
var Default2;
(function(Default3) {
  Default3["WIX"] = "WIX";
  Default3["POS"] = "POS";
})(Default2 || (Default2 = {}));
var HookType2;
(function(HookType3) {
  HookType3["UNDEFINED"] = "UNDEFINED";
  HookType3["BEFORE_BLOCKING"] = "BEFORE_BLOCKING";
  HookType3["BEFORE"] = "BEFORE";
  HookType3["AFTER"] = "AFTER";
})(HookType2 || (HookType2 = {}));
var Type2;
(function(Type3) {
  Type3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  Type3["WIDGET_COMPONENT"] = "WIDGET_COMPONENT";
  Type3["GENERIC"] = "GENERIC";
})(Type2 || (Type2 = {}));
var SourceType2;
(function(SourceType3) {
  SourceType3["UNKNOWN_SOURCE_TYPE"] = "UNKNOWN_SOURCE_TYPE";
  SourceType3["DEV_CENTER"] = "DEV_CENTER";
  SourceType3["WIX_API"] = "WIX_API";
})(SourceType2 || (SourceType2 = {}));
var ExecutionType2;
(function(ExecutionType3) {
  ExecutionType3["UNKNOWN_EXECUTION_TYPE"] = "UNKNOWN_EXECUTION_TYPE";
  ExecutionType3["SYNC"] = "SYNC";
  ExecutionType3["ASYNC"] = "ASYNC";
})(ExecutionType2 || (ExecutionType2 = {}));
var ExtendingComponentType2;
(function(ExtendingComponentType3) {
  ExtendingComponentType3["INVALID"] = "INVALID";
  ExtendingComponentType3["BACK_OFFICE_MENU_ITEM"] = "BACK_OFFICE_MENU_ITEM";
  ExtendingComponentType3["BACK_OFFICE_EXTENSION_WIDGET"] = "BACK_OFFICE_EXTENSION_WIDGET";
})(ExtendingComponentType2 || (ExtendingComponentType2 = {}));
var BackOfficeHostingPlatforms3;
(function(BackOfficeHostingPlatforms4) {
  BackOfficeHostingPlatforms4["NO_HOSTING_PLATFORM"] = "NO_HOSTING_PLATFORM";
  BackOfficeHostingPlatforms4["BUSINESS_MANAGER"] = "BUSINESS_MANAGER";
  BackOfficeHostingPlatforms4["ACCOUNT_MANAGER"] = "ACCOUNT_MANAGER";
  BackOfficeHostingPlatforms4["DEV_CENTER"] = "DEV_CENTER";
  BackOfficeHostingPlatforms4["ENTERPRISE"] = "ENTERPRISE";
  BackOfficeHostingPlatforms4["PARTNERS_DASHBOARD"] = "PARTNERS_DASHBOARD";
  BackOfficeHostingPlatforms4["FINANCIALS_INTERNAL_BO"] = "FINANCIALS_INTERNAL_BO";
  BackOfficeHostingPlatforms4["FED_GUILD_POC"] = "FED_GUILD_POC";
  BackOfficeHostingPlatforms4["STUDIO_DASHBOARD"] = "STUDIO_DASHBOARD";
  BackOfficeHostingPlatforms4["CHANNELS"] = "CHANNELS";
  BackOfficeHostingPlatforms4["DATA_TOOLS"] = "DATA_TOOLS";
  BackOfficeHostingPlatforms4["PSP_BACKOFFICE"] = "PSP_BACKOFFICE";
  BackOfficeHostingPlatforms4["RISE_PLATFORM_ACCOUNT_DASHBOARD"] = "RISE_PLATFORM_ACCOUNT_DASHBOARD";
  BackOfficeHostingPlatforms4["DEMO_DASHBOARD_ENTERPRISE"] = "DEMO_DASHBOARD_ENTERPRISE";
  BackOfficeHostingPlatforms4["AI_SCHEDULING_ASSISTANT_DASHBOARD"] = "AI_SCHEDULING_ASSISTANT_DASHBOARD";
  BackOfficeHostingPlatforms4["GETTING_PAID"] = "GETTING_PAID";
  BackOfficeHostingPlatforms4["DATA"] = "DATA";
  BackOfficeHostingPlatforms4["LITE_DASHBOARD"] = "LITE_DASHBOARD";
  BackOfficeHostingPlatforms4["PICASSO_EDITOR"] = "PICASSO_EDITOR";
  BackOfficeHostingPlatforms4["BASE44_DASHBOARD_POC"] = "BASE44_DASHBOARD_POC";
  BackOfficeHostingPlatforms4["WIXEL_EDITOR"] = "WIXEL_EDITOR";
  BackOfficeHostingPlatforms4["BASE44_PLATFORM"] = "BASE44_PLATFORM";
})(BackOfficeHostingPlatforms3 || (BackOfficeHostingPlatforms3 = {}));
var DtsDefinitionType2;
(function(DtsDefinitionType3) {
  DtsDefinitionType3["UNKNOWN"] = "UNKNOWN";
  DtsDefinitionType3["DTS_HTTP_LINK"] = "DTS_HTTP_LINK";
  DtsDefinitionType3["DTS_CONTENT"] = "DTS_CONTENT";
})(DtsDefinitionType2 || (DtsDefinitionType2 = {}));
var SlotDataType2;
(function(SlotDataType3) {
  SlotDataType3["UNKNOWN"] = "UNKNOWN";
  SlotDataType3["WIDGET"] = "WIDGET";
  SlotDataType3["MENU"] = "MENU";
})(SlotDataType2 || (SlotDataType2 = {}));
var BackOfficeScriptAssetType2;
(function(BackOfficeScriptAssetType3) {
  BackOfficeScriptAssetType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  BackOfficeScriptAssetType3["MODULE"] = "MODULE";
})(BackOfficeScriptAssetType2 || (BackOfficeScriptAssetType2 = {}));
var ViewMode2;
(function(ViewMode3) {
  ViewMode3["PAGE"] = "PAGE";
  ViewMode3["MODAL"] = "MODAL";
})(ViewMode2 || (ViewMode2 = {}));
var AlgorithmType2;
(function(AlgorithmType3) {
  AlgorithmType3["UNSPECIFIED"] = "UNSPECIFIED";
  AlgorithmType3["RELATED_ITEMS"] = "RELATED_ITEMS";
  AlgorithmType3["GLOBAL"] = "GLOBAL";
})(AlgorithmType2 || (AlgorithmType2 = {}));
var LockableOperation2;
(function(LockableOperation3) {
  LockableOperation3["UNSPECIFIED_LOCKABLE"] = "UNSPECIFIED_LOCKABLE";
  LockableOperation3["LOCKED"] = "LOCKED";
  LockableOperation3["UNLOCKED"] = "UNLOCKED";
})(LockableOperation2 || (LockableOperation2 = {}));
var RestrictedOperation2;
(function(RestrictedOperation3) {
  RestrictedOperation3["UNSPECIFIED_RESTRICTED"] = "UNSPECIFIED_RESTRICTED";
  RestrictedOperation3["ALLOW"] = "ALLOW";
  RestrictedOperation3["WARN"] = "WARN";
})(RestrictedOperation2 || (RestrictedOperation2 = {}));
var BlockType2;
(function(BlockType3) {
  BlockType3["UNKNOWN"] = "UNKNOWN";
  BlockType3["OR"] = "OR";
  BlockType3["AND"] = "AND";
})(BlockType2 || (BlockType2 = {}));
var Domain2;
(function(Domain3) {
  Domain3["USER"] = "USER";
  Domain3["WIX"] = "WIX";
})(Domain2 || (Domain2 = {}));
var Status2;
(function(Status4) {
  Status4["ACTIVE"] = "ACTIVE";
  Status4["INACTIVE"] = "INACTIVE";
})(Status2 || (Status2 = {}));
var LayoutMode2;
(function(LayoutMode3) {
  LayoutMode3["STANDARD_VIEW"] = "STANDARD_VIEW";
  LayoutMode3["BUILDER_VIEW"] = "BUILDER_VIEW";
  LayoutMode3["EXPANDED_VIEW"] = "EXPANDED_VIEW";
})(LayoutMode2 || (LayoutMode2 = {}));
var TextInputDisplayType2;
(function(TextInputDisplayType3) {
  TextInputDisplayType3["TEXT"] = "TEXT";
  TextInputDisplayType3["PASSWORD"] = "PASSWORD";
  TextInputDisplayType3["CODE"] = "CODE";
})(TextInputDisplayType2 || (TextInputDisplayType2 = {}));
var ThumbnailType2;
(function(ThumbnailType3) {
  ThumbnailType3["UNKNOWN_THUMBNAIL_TYPE"] = "UNKNOWN_THUMBNAIL_TYPE";
  ThumbnailType3["IMAGE"] = "IMAGE";
  ThumbnailType3["AVATAR"] = "AVATAR";
})(ThumbnailType2 || (ThumbnailType2 = {}));
var ImageShape2;
(function(ImageShape3) {
  ImageShape3["UNKNOWN_SHAPE"] = "UNKNOWN_SHAPE";
  ImageShape3["CIRCLE"] = "CIRCLE";
  ImageShape3["SQUARE"] = "SQUARE";
  ImageShape3["RECTANGLE"] = "RECTANGLE";
})(ImageShape2 || (ImageShape2 = {}));
var AvatarShape2;
(function(AvatarShape3) {
  AvatarShape3["UNKNOWN_SHAPE"] = "UNKNOWN_SHAPE";
  AvatarShape3["CIRCLE"] = "CIRCLE";
  AvatarShape3["SQUARE"] = "SQUARE";
})(AvatarShape2 || (AvatarShape2 = {}));
var Tag2;
(function(Tag3) {
  Tag3["UNKNOWN_TAG"] = "UNKNOWN_TAG";
  Tag3["EMBEDDABLE"] = "EMBEDDABLE";
  Tag3["ECOM_EDIT_ORDER"] = "ECOM_EDIT_ORDER";
  Tag3["ECOM_CREATE_ORDER"] = "ECOM_CREATE_ORDER";
  Tag3["INBOX"] = "INBOX";
  Tag3["ECOM_CREATE_PAY_LINK"] = "ECOM_CREATE_PAY_LINK";
  Tag3["ECOM_DELIVERY_PROFILES"] = "ECOM_DELIVERY_PROFILES";
  Tag3["ADD_TO_CATEGORY"] = "ADD_TO_CATEGORY";
  Tag3["MY_BUSINESS"] = "MY_BUSINESS";
  Tag3["PIPELINE_LINKED_ENTITY"] = "PIPELINE_LINKED_ENTITY";
  Tag3["GET_PAID"] = "GET_PAID";
  Tag3["PIPELINE_CARD_CATALOG_ITEM"] = "PIPELINE_CARD_CATALOG_ITEM";
})(Tag2 || (Tag2 = {}));
var FilterSelectionType2;
(function(FilterSelectionType3) {
  FilterSelectionType3["UNKNOWN_SELECTION"] = "UNKNOWN_SELECTION";
  FilterSelectionType3["SINGLE_SELECTION"] = "SINGLE_SELECTION";
  FilterSelectionType3["MULTIPLE_SELECTION"] = "MULTIPLE_SELECTION";
})(FilterSelectionType2 || (FilterSelectionType2 = {}));
var FilterOptionsType2;
(function(FilterOptionsType3) {
  FilterOptionsType3["UNKNOWN_FILTER_OPTIONS"] = "UNKNOWN_FILTER_OPTIONS";
  FilterOptionsType3["STATIC"] = "STATIC";
  FilterOptionsType3["PROVIDER"] = "PROVIDER";
})(FilterOptionsType2 || (FilterOptionsType2 = {}));
var PaginationMode2;
(function(PaginationMode3) {
  PaginationMode3["UNKNOWN_PAGINATION_MODE"] = "UNKNOWN_PAGINATION_MODE";
  PaginationMode3["CURSOR"] = "CURSOR";
  PaginationMode3["OFFSET"] = "OFFSET";
})(PaginationMode2 || (PaginationMode2 = {}));
var ChannelType2;
(function(ChannelType3) {
  ChannelType3["UNKNOWN_CHANNEL_TYPE"] = "UNKNOWN_CHANNEL_TYPE";
  ChannelType3["DIRECT_MESSAGING"] = "DIRECT_MESSAGING";
  ChannelType3["EMAIL"] = "EMAIL";
  ChannelType3["SMS"] = "SMS";
})(ChannelType2 || (ChannelType2 = {}));
var AcceptedDirectMessageType2;
(function(AcceptedDirectMessageType3) {
  AcceptedDirectMessageType3["TEXT"] = "TEXT";
  AcceptedDirectMessageType3["MEDIA"] = "MEDIA";
  AcceptedDirectMessageType3["CARD"] = "CARD";
  AcceptedDirectMessageType3["ANNOUNCEMENT"] = "ANNOUNCEMENT";
  AcceptedDirectMessageType3["FORM"] = "FORM";
})(AcceptedDirectMessageType2 || (AcceptedDirectMessageType2 = {}));
var MediaMimeType2;
(function(MediaMimeType3) {
  MediaMimeType3["UNKNOWN_MIME_TYPE"] = "UNKNOWN_MIME_TYPE";
  MediaMimeType3["IMAGE_JPEG"] = "IMAGE_JPEG";
  MediaMimeType3["IMAGE_PNG"] = "IMAGE_PNG";
  MediaMimeType3["IMAGE_WEBP"] = "IMAGE_WEBP";
  MediaMimeType3["VIDEO_MPEG"] = "VIDEO_MPEG";
  MediaMimeType3["VIDEO_MP4"] = "VIDEO_MP4";
  MediaMimeType3["VIDEO_3GP"] = "VIDEO_3GP";
  MediaMimeType3["AUDIO_AAC"] = "AUDIO_AAC";
  MediaMimeType3["AUDIO_MP4"] = "AUDIO_MP4";
  MediaMimeType3["AUDIO_MPEG"] = "AUDIO_MPEG";
  MediaMimeType3["AUDIO_OGG"] = "AUDIO_OGG";
  MediaMimeType3["AUDIO_OPUS"] = "AUDIO_OPUS";
  MediaMimeType3["APPLICATION_PDF"] = "APPLICATION_PDF";
  MediaMimeType3["APPLICATION_OCTET_STREAM"] = "APPLICATION_OCTET_STREAM";
})(MediaMimeType2 || (MediaMimeType2 = {}));
var AcceptedSmsMessageType2;
(function(AcceptedSmsMessageType3) {
  AcceptedSmsMessageType3["SMS"] = "SMS";
  AcceptedSmsMessageType3["MMS"] = "MMS";
})(AcceptedSmsMessageType2 || (AcceptedSmsMessageType2 = {}));
var InitDirection2;
(function(InitDirection3) {
  InitDirection3["UNKNOWN_INIT_DIRECTION"] = "UNKNOWN_INIT_DIRECTION";
  InitDirection3["BUSINESS"] = "BUSINESS";
  InitDirection3["CUSTOMER"] = "CUSTOMER";
  InitDirection3["BOTH"] = "BOTH";
})(InitDirection2 || (InitDirection2 = {}));
var NodeType2;
(function(NodeType3) {
  NodeType3["PARAGRAPH"] = "PARAGRAPH";
  NodeType3["TEXT"] = "TEXT";
  NodeType3["HEADING"] = "HEADING";
  NodeType3["BULLETED_LIST"] = "BULLETED_LIST";
  NodeType3["ORDERED_LIST"] = "ORDERED_LIST";
  NodeType3["LIST_ITEM"] = "LIST_ITEM";
  NodeType3["BLOCKQUOTE"] = "BLOCKQUOTE";
  NodeType3["CODE_BLOCK"] = "CODE_BLOCK";
  NodeType3["VIDEO"] = "VIDEO";
  NodeType3["DIVIDER"] = "DIVIDER";
  NodeType3["FILE"] = "FILE";
  NodeType3["GALLERY"] = "GALLERY";
  NodeType3["GIF"] = "GIF";
  NodeType3["HTML"] = "HTML";
  NodeType3["IMAGE"] = "IMAGE";
  NodeType3["LINK_PREVIEW"] = "LINK_PREVIEW";
  NodeType3["MAP"] = "MAP";
  NodeType3["POLL"] = "POLL";
  NodeType3["APP_EMBED"] = "APP_EMBED";
  NodeType3["BUTTON"] = "BUTTON";
  NodeType3["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
  NodeType3["TABLE"] = "TABLE";
  NodeType3["EMBED"] = "EMBED";
  NodeType3["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
  NodeType3["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
  NodeType3["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
  NodeType3["TABLE_CELL"] = "TABLE_CELL";
  NodeType3["TABLE_ROW"] = "TABLE_ROW";
  NodeType3["EXTERNAL"] = "EXTERNAL";
  NodeType3["AUDIO"] = "AUDIO";
  NodeType3["CAPTION"] = "CAPTION";
  NodeType3["LAYOUT"] = "LAYOUT";
  NodeType3["LAYOUT_CELL"] = "LAYOUT_CELL";
})(NodeType2 || (NodeType2 = {}));
var WidthType2;
(function(WidthType3) {
  WidthType3["CONTENT"] = "CONTENT";
  WidthType3["SMALL"] = "SMALL";
  WidthType3["ORIGINAL"] = "ORIGINAL";
  WidthType3["FULL_WIDTH"] = "FULL_WIDTH";
})(WidthType2 || (WidthType2 = {}));
var PluginContainerDataAlignment2;
(function(PluginContainerDataAlignment3) {
  PluginContainerDataAlignment3["CENTER"] = "CENTER";
  PluginContainerDataAlignment3["LEFT"] = "LEFT";
  PluginContainerDataAlignment3["RIGHT"] = "RIGHT";
})(PluginContainerDataAlignment2 || (PluginContainerDataAlignment2 = {}));
var ButtonDataType2;
(function(ButtonDataType3) {
  ButtonDataType3["LINK"] = "LINK";
  ButtonDataType3["ACTION"] = "ACTION";
})(ButtonDataType2 || (ButtonDataType2 = {}));
var LinkTarget2;
(function(LinkTarget3) {
  LinkTarget3["SELF"] = "SELF";
  LinkTarget3["BLANK"] = "BLANK";
  LinkTarget3["PARENT"] = "PARENT";
  LinkTarget3["TOP"] = "TOP";
})(LinkTarget2 || (LinkTarget2 = {}));
var TextAlignment2;
(function(TextAlignment3) {
  TextAlignment3["AUTO"] = "AUTO";
  TextAlignment3["LEFT"] = "LEFT";
  TextAlignment3["RIGHT"] = "RIGHT";
  TextAlignment3["CENTER"] = "CENTER";
  TextAlignment3["JUSTIFY"] = "JUSTIFY";
})(TextAlignment2 || (TextAlignment2 = {}));
var LineStyle2;
(function(LineStyle3) {
  LineStyle3["SINGLE"] = "SINGLE";
  LineStyle3["DOUBLE"] = "DOUBLE";
  LineStyle3["DASHED"] = "DASHED";
  LineStyle3["DOTTED"] = "DOTTED";
})(LineStyle2 || (LineStyle2 = {}));
var DividerDataWidth2;
(function(DividerDataWidth3) {
  DividerDataWidth3["LARGE"] = "LARGE";
  DividerDataWidth3["MEDIUM"] = "MEDIUM";
  DividerDataWidth3["SMALL"] = "SMALL";
})(DividerDataWidth2 || (DividerDataWidth2 = {}));
var Alignment2;
(function(Alignment3) {
  Alignment3["CENTER"] = "CENTER";
  Alignment3["LEFT"] = "LEFT";
  Alignment3["RIGHT"] = "RIGHT";
})(Alignment2 || (Alignment2 = {}));
var PDFSettingsViewMode2;
(function(PDFSettingsViewMode3) {
  PDFSettingsViewMode3["NONE"] = "NONE";
  PDFSettingsViewMode3["FULL"] = "FULL";
  PDFSettingsViewMode3["MINI"] = "MINI";
})(PDFSettingsViewMode2 || (PDFSettingsViewMode2 = {}));
var LayoutType2;
(function(LayoutType3) {
  LayoutType3["COLLAGE"] = "COLLAGE";
  LayoutType3["MASONRY"] = "MASONRY";
  LayoutType3["GRID"] = "GRID";
  LayoutType3["THUMBNAIL"] = "THUMBNAIL";
  LayoutType3["SLIDER"] = "SLIDER";
  LayoutType3["SLIDESHOW"] = "SLIDESHOW";
  LayoutType3["PANORAMA"] = "PANORAMA";
  LayoutType3["COLUMN"] = "COLUMN";
  LayoutType3["MAGIC"] = "MAGIC";
  LayoutType3["FULLSIZE"] = "FULLSIZE";
})(LayoutType2 || (LayoutType2 = {}));
var Orientation2;
(function(Orientation3) {
  Orientation3["ROWS"] = "ROWS";
  Orientation3["COLUMNS"] = "COLUMNS";
})(Orientation2 || (Orientation2 = {}));
var Crop2;
(function(Crop3) {
  Crop3["FILL"] = "FILL";
  Crop3["FIT"] = "FIT";
})(Crop2 || (Crop2 = {}));
var ThumbnailsAlignment2;
(function(ThumbnailsAlignment3) {
  ThumbnailsAlignment3["TOP"] = "TOP";
  ThumbnailsAlignment3["RIGHT"] = "RIGHT";
  ThumbnailsAlignment3["BOTTOM"] = "BOTTOM";
  ThumbnailsAlignment3["LEFT"] = "LEFT";
  ThumbnailsAlignment3["NONE"] = "NONE";
})(ThumbnailsAlignment2 || (ThumbnailsAlignment2 = {}));
var GIFType2;
(function(GIFType3) {
  GIFType3["NORMAL"] = "NORMAL";
  GIFType3["STICKER"] = "STICKER";
})(GIFType2 || (GIFType2 = {}));
var Source2;
(function(Source3) {
  Source3["HTML"] = "HTML";
  Source3["ADSENSE"] = "ADSENSE";
})(Source2 || (Source2 = {}));
var StylesPosition2;
(function(StylesPosition3) {
  StylesPosition3["START"] = "START";
  StylesPosition3["END"] = "END";
  StylesPosition3["TOP"] = "TOP";
  StylesPosition3["HIDDEN"] = "HIDDEN";
})(StylesPosition2 || (StylesPosition2 = {}));
var MapType2;
(function(MapType3) {
  MapType3["ROADMAP"] = "ROADMAP";
  MapType3["SATELITE"] = "SATELITE";
  MapType3["HYBRID"] = "HYBRID";
  MapType3["TERRAIN"] = "TERRAIN";
})(MapType2 || (MapType2 = {}));
var ViewRole2;
(function(ViewRole3) {
  ViewRole3["CREATOR"] = "CREATOR";
  ViewRole3["VOTERS"] = "VOTERS";
  ViewRole3["EVERYONE"] = "EVERYONE";
})(ViewRole2 || (ViewRole2 = {}));
var VoteRole2;
(function(VoteRole3) {
  VoteRole3["SITE_MEMBERS"] = "SITE_MEMBERS";
  VoteRole3["ALL"] = "ALL";
})(VoteRole2 || (VoteRole2 = {}));
var PollLayoutType2;
(function(PollLayoutType3) {
  PollLayoutType3["LIST"] = "LIST";
  PollLayoutType3["GRID"] = "GRID";
})(PollLayoutType2 || (PollLayoutType2 = {}));
var PollLayoutDirection2;
(function(PollLayoutDirection3) {
  PollLayoutDirection3["LTR"] = "LTR";
  PollLayoutDirection3["RTL"] = "RTL";
})(PollLayoutDirection2 || (PollLayoutDirection2 = {}));
var BackgroundType2;
(function(BackgroundType3) {
  BackgroundType3["COLOR"] = "COLOR";
  BackgroundType3["IMAGE"] = "IMAGE";
  BackgroundType3["GRADIENT"] = "GRADIENT";
})(BackgroundType2 || (BackgroundType2 = {}));
var DecorationType2;
(function(DecorationType3) {
  DecorationType3["BOLD"] = "BOLD";
  DecorationType3["ITALIC"] = "ITALIC";
  DecorationType3["UNDERLINE"] = "UNDERLINE";
  DecorationType3["SPOILER"] = "SPOILER";
  DecorationType3["ANCHOR"] = "ANCHOR";
  DecorationType3["MENTION"] = "MENTION";
  DecorationType3["LINK"] = "LINK";
  DecorationType3["COLOR"] = "COLOR";
  DecorationType3["FONT_SIZE"] = "FONT_SIZE";
  DecorationType3["EXTERNAL"] = "EXTERNAL";
  DecorationType3["STRIKETHROUGH"] = "STRIKETHROUGH";
  DecorationType3["SUPERSCRIPT"] = "SUPERSCRIPT";
  DecorationType3["SUBSCRIPT"] = "SUBSCRIPT";
})(DecorationType2 || (DecorationType2 = {}));
var FontType2;
(function(FontType3) {
  FontType3["PX"] = "PX";
  FontType3["EM"] = "EM";
})(FontType2 || (FontType2 = {}));
var ImageStylesPosition2;
(function(ImageStylesPosition3) {
  ImageStylesPosition3["START"] = "START";
  ImageStylesPosition3["END"] = "END";
  ImageStylesPosition3["TOP"] = "TOP";
})(ImageStylesPosition2 || (ImageStylesPosition2 = {}));
var AspectRatio2;
(function(AspectRatio3) {
  AspectRatio3["SQUARE"] = "SQUARE";
  AspectRatio3["RECTANGLE"] = "RECTANGLE";
})(AspectRatio2 || (AspectRatio2 = {}));
var Resizing2;
(function(Resizing3) {
  Resizing3["FILL"] = "FILL";
  Resizing3["FIT"] = "FIT";
})(Resizing2 || (Resizing2 = {}));
var Placement2;
(function(Placement3) {
  Placement3["IMAGE"] = "IMAGE";
  Placement3["PRODUCT_INFO"] = "PRODUCT_INFO";
})(Placement2 || (Placement2 = {}));
var CardStylesType2;
(function(CardStylesType3) {
  CardStylesType3["CONTAINED"] = "CONTAINED";
  CardStylesType3["FRAMELESS"] = "FRAMELESS";
})(CardStylesType2 || (CardStylesType2 = {}));
var CardStylesAlignment2;
(function(CardStylesAlignment3) {
  CardStylesAlignment3["START"] = "START";
  CardStylesAlignment3["CENTER"] = "CENTER";
  CardStylesAlignment3["END"] = "END";
})(CardStylesAlignment2 || (CardStylesAlignment2 = {}));
var CardStylesLayout2;
(function(CardStylesLayout3) {
  CardStylesLayout3["STACKED"] = "STACKED";
  CardStylesLayout3["SIDE_BY_SIDE"] = "SIDE_BY_SIDE";
})(CardStylesLayout2 || (CardStylesLayout2 = {}));
var AppType2;
(function(AppType4) {
  AppType4["PRODUCT"] = "PRODUCT";
  AppType4["EVENT"] = "EVENT";
  AppType4["BOOKING"] = "BOOKING";
})(AppType2 || (AppType2 = {}));
var InitialExpandedItems2;
(function(InitialExpandedItems3) {
  InitialExpandedItems3["FIRST"] = "FIRST";
  InitialExpandedItems3["ALL"] = "ALL";
  InitialExpandedItems3["NONE"] = "NONE";
})(InitialExpandedItems2 || (InitialExpandedItems2 = {}));
var Direction2;
(function(Direction3) {
  Direction3["LTR"] = "LTR";
  Direction3["RTL"] = "RTL";
})(Direction2 || (Direction2 = {}));
var VerticalAlignment2;
(function(VerticalAlignment3) {
  VerticalAlignment3["TOP"] = "TOP";
  VerticalAlignment3["MIDDLE"] = "MIDDLE";
  VerticalAlignment3["BOTTOM"] = "BOTTOM";
})(VerticalAlignment2 || (VerticalAlignment2 = {}));
var NullValue2;
(function(NullValue3) {
  NullValue3["NULL_VALUE"] = "NULL_VALUE";
})(NullValue2 || (NullValue2 = {}));
var CalendarType2;
(function(CalendarType3) {
  CalendarType3["UNDEFINED"] = "UNDEFINED";
  CalendarType3["GOOGLE"] = "GOOGLE";
  CalendarType3["I_CAL"] = "I_CAL";
  CalendarType3["MICROSOFT"] = "MICROSOFT";
  CalendarType3["OTHER"] = "OTHER";
})(CalendarType2 || (CalendarType2 = {}));
var ConnectMethod2;
(function(ConnectMethod3) {
  ConnectMethod3["OAUTH"] = "OAUTH";
  ConnectMethod3["CREDENTIALS"] = "CREDENTIALS";
})(ConnectMethod2 || (ConnectMethod2 = {}));
var ListEventFromCalendars2;
(function(ListEventFromCalendars3) {
  ListEventFromCalendars3["LIST_NOT_SUPPORTED"] = "LIST_NOT_SUPPORTED";
  ListEventFromCalendars3["LIST_FROM_PRIMARY_CALENDAR_ONLY"] = "LIST_FROM_PRIMARY_CALENDAR_ONLY";
  ListEventFromCalendars3["LIST_FROM_SPECIFIC_CALENDARS"] = "LIST_FROM_SPECIFIC_CALENDARS";
})(ListEventFromCalendars2 || (ListEventFromCalendars2 = {}));
var SyncToCalendar2;
(function(SyncToCalendar3) {
  SyncToCalendar3["SYNC_NOT_SUPPORTED"] = "SYNC_NOT_SUPPORTED";
  SyncToCalendar3["SYNC_TO_PRIMARY_CALENDAR_ONLY"] = "SYNC_TO_PRIMARY_CALENDAR_ONLY";
  SyncToCalendar3["SYNC_TO_DEDICATED_CALENDAR"] = "SYNC_TO_DEDICATED_CALENDAR";
})(SyncToCalendar2 || (SyncToCalendar2 = {}));
var OAuthAppType2;
(function(OAuthAppType3) {
  OAuthAppType3["OAUTH_APP_TYPE_UNSPECIFIED"] = "OAUTH_APP_TYPE_UNSPECIFIED";
  OAuthAppType3["WEB_APP"] = "WEB_APP";
  OAuthAppType3["MOBILE"] = "MOBILE";
  OAuthAppType3["OTHER"] = "OTHER";
  OAuthAppType3["SYSTEM"] = "SYSTEM";
})(OAuthAppType2 || (OAuthAppType2 = {}));
var OAuthTechnologies2;
(function(OAuthTechnologies3) {
  OAuthTechnologies3["OAUTH_TECHNOLOGY_UNSPECIFIED"] = "OAUTH_TECHNOLOGY_UNSPECIFIED";
  OAuthTechnologies3["JAVASCRIPT"] = "JAVASCRIPT";
  OAuthTechnologies3["ANGULAR"] = "ANGULAR";
  OAuthTechnologies3["VUE"] = "VUE";
  OAuthTechnologies3["REACT"] = "REACT";
  OAuthTechnologies3["REACT_NATIVE"] = "REACT_NATIVE";
  OAuthTechnologies3["IOS"] = "IOS";
  OAuthTechnologies3["ANDROID"] = "ANDROID";
  OAuthTechnologies3["OTHER_TECHNOLOGY"] = "OTHER_TECHNOLOGY";
})(OAuthTechnologies2 || (OAuthTechnologies2 = {}));
var NavigationType2;
(function(NavigationType3) {
  NavigationType3["NAVIGATE"] = "NAVIGATE";
  NavigationType3["MODAL"] = "MODAL";
})(NavigationType2 || (NavigationType2 = {}));
var State2;
(function(State3) {
  State3["UNKNOWN_STATE"] = "UNKNOWN_STATE";
  State3["DEFAULT_ON"] = "DEFAULT_ON";
  State3["DEFAULT_OFF"] = "DEFAULT_OFF";
  State3["ALWAYS_ON"] = "ALWAYS_ON";
})(State2 || (State2 = {}));
var NotificationTopicState;
(function(NotificationTopicState2) {
  NotificationTopicState2["UNKNOWN_STATE"] = "UNKNOWN_STATE";
  NotificationTopicState2["DEFAULT_ON"] = "DEFAULT_ON";
  NotificationTopicState2["DEFAULT_OFF"] = "DEFAULT_OFF";
  NotificationTopicState2["ALWAYS_ON"] = "ALWAYS_ON";
})(NotificationTopicState || (NotificationTopicState = {}));
var NotificationTopicType2;
(function(NotificationTopicType3) {
  NotificationTopicType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  NotificationTopicType3["PROMOTIONAL"] = "PROMOTIONAL";
  NotificationTopicType3["TRANSACTIONAL"] = "TRANSACTIONAL";
})(NotificationTopicType2 || (NotificationTopicType2 = {}));
var RecipientType2;
(function(RecipientType3) {
  RecipientType3["UNKNOWN_RECIPIENT_TYPE"] = "UNKNOWN_RECIPIENT_TYPE";
  RecipientType3["WIX_USER"] = "WIX_USER";
  RecipientType3["CONTACT"] = "CONTACT";
})(RecipientType2 || (RecipientType2 = {}));
var PlanFormPricingOption2;
(function(PlanFormPricingOption3) {
  PlanFormPricingOption3["UNKNOWN_OPTION"] = "UNKNOWN_OPTION";
  PlanFormPricingOption3["FREE"] = "FREE";
  PlanFormPricingOption3["ONE_TIME"] = "ONE_TIME";
  PlanFormPricingOption3["RECURRING"] = "RECURRING";
})(PlanFormPricingOption2 || (PlanFormPricingOption2 = {}));
var PlanFormPricingType2;
(function(PlanFormPricingType3) {
  PlanFormPricingType3["UNKNOWN_OPTION"] = "UNKNOWN_OPTION";
  PlanFormPricingType3["FREE"] = "FREE";
  PlanFormPricingType3["ONE_TIME"] = "ONE_TIME";
  PlanFormPricingType3["RECURRING"] = "RECURRING";
})(PlanFormPricingType2 || (PlanFormPricingType2 = {}));
var PlanFormDefaultSection2;
(function(PlanFormDefaultSection3) {
  PlanFormDefaultSection3["UNKNWON_PLAN_FORM_SECTION"] = "UNKNWON_PLAN_FORM_SECTION";
  PlanFormDefaultSection3["INFO"] = "INFO";
  PlanFormDefaultSection3["BENEFITS"] = "BENEFITS";
  PlanFormDefaultSection3["PAGE_PERMISSIONS"] = "PAGE_PERMISSIONS";
  PlanFormDefaultSection3["PRICING_AND_DURATION"] = "PRICING_AND_DURATION";
  PlanFormDefaultSection3["ADVANCED_SETTINGS"] = "ADVANCED_SETTINGS";
  PlanFormDefaultSection3["PRICING"] = "PRICING";
  PlanFormDefaultSection3["DURATION"] = "DURATION";
})(PlanFormDefaultSection2 || (PlanFormDefaultSection2 = {}));
var PlanPeriodUnit2;
(function(PlanPeriodUnit3) {
  PlanPeriodUnit3["UNDEFINED"] = "UNDEFINED";
  PlanPeriodUnit3["DAY"] = "DAY";
  PlanPeriodUnit3["WEEK"] = "WEEK";
  PlanPeriodUnit3["MONTH"] = "MONTH";
  PlanPeriodUnit3["YEAR"] = "YEAR";
})(PlanPeriodUnit2 || (PlanPeriodUnit2 = {}));
var TypedDynamicParamType2;
(function(TypedDynamicParamType3) {
  TypedDynamicParamType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  TypedDynamicParamType3["STRING"] = "STRING";
  TypedDynamicParamType3["ARRAY"] = "ARRAY";
})(TypedDynamicParamType2 || (TypedDynamicParamType2 = {}));
var UserNotificationDataRecipientFilterType2;
(function(UserNotificationDataRecipientFilterType3) {
  UserNotificationDataRecipientFilterType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  UserNotificationDataRecipientFilterType3["WIX_USERS"] = "WIX_USERS";
  UserNotificationDataRecipientFilterType3["SITE_CONTRIBUTORS"] = "SITE_CONTRIBUTORS";
})(UserNotificationDataRecipientFilterType2 || (UserNotificationDataRecipientFilterType2 = {}));
var UserNotificationDataInitiatorType;
(function(UserNotificationDataInitiatorType2) {
  UserNotificationDataInitiatorType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  UserNotificationDataInitiatorType2["WIX_USER"] = "WIX_USER";
  UserNotificationDataInitiatorType2["WIX_APP"] = "WIX_APP";
})(UserNotificationDataInitiatorType || (UserNotificationDataInitiatorType = {}));
var Level2;
(function(Level3) {
  Level3["UNKNOWN_LEVEL"] = "UNKNOWN_LEVEL";
  Level3["ACCOUNT"] = "ACCOUNT";
  Level3["USER"] = "USER";
  Level3["SITE"] = "SITE";
})(Level2 || (Level2 = {}));
var IconType2;
(function(IconType3) {
  IconType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  IconType3["URL"] = "URL";
  IconType3["SPOUT"] = "SPOUT";
  IconType3["INITIATOR"] = "INITIATOR";
})(IconType2 || (IconType2 = {}));
var MobileApplication2;
(function(MobileApplication3) {
  MobileApplication3["UNKNOWN_MOBILE_APPLICATION"] = "UNKNOWN_MOBILE_APPLICATION";
  MobileApplication3["OWNER"] = "OWNER";
  MobileApplication3["SPACES"] = "SPACES";
  MobileApplication3["DINE"] = "DINE";
  MobileApplication3["FITNESS"] = "FITNESS";
  MobileApplication3["WIX_LIFE"] = "WIX_LIFE";
  MobileApplication3["WIX_PARTNERS"] = "WIX_PARTNERS";
  MobileApplication3["BRANDED"] = "BRANDED";
  MobileApplication3["WIX_STUDIO"] = "WIX_STUDIO";
  MobileApplication3["NO_SPECIFIC_TARGET_APP"] = "NO_SPECIFIC_TARGET_APP";
})(MobileApplication2 || (MobileApplication2 = {}));
var AndroidStyle2;
(function(AndroidStyle3) {
  AndroidStyle3["UNKNOWN_ANDROID_STYLE"] = "UNKNOWN_ANDROID_STYLE";
  AndroidStyle3["BIG_TEXT"] = "BIG_TEXT";
  AndroidStyle3["MESSAGING"] = "MESSAGING";
  AndroidStyle3["INBOX"] = "INBOX";
})(AndroidStyle2 || (AndroidStyle2 = {}));
var ExposureRuleType2;
(function(ExposureRuleType3) {
  ExposureRuleType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  ExposureRuleType3["OPEN_TO_ALL"] = "OPEN_TO_ALL";
  ExposureRuleType3["OPEN_TO_NONE"] = "OPEN_TO_NONE";
  ExposureRuleType3["BOOLEAN_EXPERIMENT"] = "BOOLEAN_EXPERIMENT";
  ExposureRuleType3["CUSTOM_EXPERIMENT"] = "CUSTOM_EXPERIMENT";
})(ExposureRuleType2 || (ExposureRuleType2 = {}));
var Intent2;
(function(Intent3) {
  Intent3["UNKNOWN_INTENT"] = "UNKNOWN_INTENT";
  Intent3["MARKETING"] = "MARKETING";
  Intent3["TRANSACTIONAL"] = "TRANSACTIONAL";
})(Intent2 || (Intent2 = {}));
var UserNotificationDataType2;
(function(UserNotificationDataType3) {
  UserNotificationDataType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  UserNotificationDataType3["REGULAR"] = "REGULAR";
  UserNotificationDataType3["ALERT_WARNING"] = "ALERT_WARNING";
  UserNotificationDataType3["ALERT_INFO"] = "ALERT_INFO";
})(UserNotificationDataType2 || (UserNotificationDataType2 = {}));
var RecipientFilterType2;
(function(RecipientFilterType3) {
  RecipientFilterType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  RecipientFilterType3["CONTACTS"] = "CONTACTS";
})(RecipientFilterType2 || (RecipientFilterType2 = {}));
var InitiatorType2;
(function(InitiatorType3) {
  InitiatorType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  InitiatorType3["CONTACT"] = "CONTACT";
  InitiatorType3["SITE_MEMBER"] = "SITE_MEMBER";
})(InitiatorType2 || (InitiatorType2 = {}));
var Environment2;
(function(Environment3) {
  Environment3["LIVE_SITE"] = "LIVE_SITE";
  Environment3["BUSINESS_MANAGER"] = "BUSINESS_MANAGER";
})(Environment2 || (Environment2 = {}));
var SchemaScope2;
(function(SchemaScope3) {
  SchemaScope3["UNKNOWN_SCOPE"] = "UNKNOWN_SCOPE";
  SchemaScope3["GLOBAL"] = "GLOBAL";
  SchemaScope3["SITE"] = "SITE";
})(SchemaScope2 || (SchemaScope2 = {}));
var FieldType2;
(function(FieldType3) {
  FieldType3["UNDEFINED_TYPE"] = "UNDEFINED_TYPE";
  FieldType3["SHORT_TEXT"] = "SHORT_TEXT";
  FieldType3["LONG_TEXT"] = "LONG_TEXT";
  FieldType3["HTML"] = "HTML";
  FieldType3["RICH_CONTENT"] = "RICH_CONTENT";
  FieldType3["IMAGE"] = "IMAGE";
  FieldType3["IMAGE_LINK"] = "IMAGE_LINK";
  FieldType3["JSON"] = "JSON";
  FieldType3["VIDEO"] = "VIDEO";
  FieldType3["DOCUMENT"] = "DOCUMENT";
})(FieldType2 || (FieldType2 = {}));
var CustomElementScriptType2;
(function(CustomElementScriptType3) {
  CustomElementScriptType3["NONE"] = "NONE";
  CustomElementScriptType3["COMMON_JS"] = "COMMON_JS";
  CustomElementScriptType3["ES_MODULE"] = "ES_MODULE";
})(CustomElementScriptType2 || (CustomElementScriptType2 = {}));
var HeightMode2;
(function(HeightMode3) {
  HeightMode3["UNKNOWN"] = "UNKNOWN";
  HeightMode3["AUTO"] = "AUTO";
  HeightMode3["FIXED"] = "FIXED";
})(HeightMode2 || (HeightMode2 = {}));
var FieldFieldType2;
(function(FieldFieldType3) {
  FieldFieldType3["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
  FieldFieldType3["INPUT"] = "INPUT";
  FieldFieldType3["DISPLAY"] = "DISPLAY";
})(FieldFieldType2 || (FieldFieldType2 = {}));
var Format2;
(function(Format3) {
  Format3["UNKNOWN_FORMAT"] = "UNKNOWN_FORMAT";
  Format3["DATE"] = "DATE";
  Format3["TIME"] = "TIME";
  Format3["DATE_TIME"] = "DATE_TIME";
  Format3["EMAIL"] = "EMAIL";
  Format3["URL"] = "URL";
  Format3["UUID"] = "UUID";
  Format3["PHONE"] = "PHONE";
  Format3["URI"] = "URI";
  Format3["HOSTNAME"] = "HOSTNAME";
  Format3["COLOR_HEX"] = "COLOR_HEX";
  Format3["CURRENCY"] = "CURRENCY";
  Format3["LANGUAGE"] = "LANGUAGE";
  Format3["DATE_OPTIONAL_TIME"] = "DATE_OPTIONAL_TIME";
})(Format2 || (Format2 = {}));
var StringComponentType2;
(function(StringComponentType3) {
  StringComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  StringComponentType3["TEXT_INPUT"] = "TEXT_INPUT";
  StringComponentType3["RADIO_GROUP"] = "RADIO_GROUP";
  StringComponentType3["DROPDOWN"] = "DROPDOWN";
  StringComponentType3["DATE_TIME"] = "DATE_TIME";
  StringComponentType3["PHONE_INPUT"] = "PHONE_INPUT";
  StringComponentType3["DATE_INPUT"] = "DATE_INPUT";
  StringComponentType3["TIME_INPUT"] = "TIME_INPUT";
  StringComponentType3["DATE_PICKER"] = "DATE_PICKER";
  StringComponentType3["SERVICES_DROPDOWN"] = "SERVICES_DROPDOWN";
})(StringComponentType2 || (StringComponentType2 = {}));
var ImagePosition2;
(function(ImagePosition3) {
  ImagePosition3["UNKNOWN_IMAGE_POSITION"] = "UNKNOWN_IMAGE_POSITION";
  ImagePosition3["ABOVE"] = "ABOVE";
  ImagePosition3["BELOW"] = "BELOW";
})(ImagePosition2 || (ImagePosition2 = {}));
var AlignmentEnumAlignment2;
(function(AlignmentEnumAlignment3) {
  AlignmentEnumAlignment3["UNKNOWN_ALIGNMENT"] = "UNKNOWN_ALIGNMENT";
  AlignmentEnumAlignment3["LEFT"] = "LEFT";
  AlignmentEnumAlignment3["CENTER"] = "CENTER";
  AlignmentEnumAlignment3["RIGHT"] = "RIGHT";
})(AlignmentEnumAlignment2 || (AlignmentEnumAlignment2 = {}));
var ImageFit2;
(function(ImageFit3) {
  ImageFit3["UNKNOWN_IMAGE_FIT"] = "UNKNOWN_IMAGE_FIT";
  ImageFit3["COVER"] = "COVER";
  ImageFit3["CONTAIN"] = "CONTAIN";
})(ImageFit2 || (ImageFit2 = {}));
var NumberOfColumns2;
(function(NumberOfColumns3) {
  NumberOfColumns3["UNKNOWN"] = "UNKNOWN";
  NumberOfColumns3["ZERO"] = "ZERO";
  NumberOfColumns3["ONE"] = "ONE";
  NumberOfColumns3["TWO"] = "TWO";
  NumberOfColumns3["THREE"] = "THREE";
})(NumberOfColumns2 || (NumberOfColumns2 = {}));
var FirstDayOfWeek2;
(function(FirstDayOfWeek3) {
  FirstDayOfWeek3["MONDAY"] = "MONDAY";
  FirstDayOfWeek3["SUNDAY"] = "SUNDAY";
})(FirstDayOfWeek2 || (FirstDayOfWeek2 = {}));
var NumberComponentType2;
(function(NumberComponentType3) {
  NumberComponentType3["UNKNOWN"] = "UNKNOWN";
  NumberComponentType3["NUMBER_INPUT"] = "NUMBER_INPUT";
  NumberComponentType3["RATING_INPUT"] = "RATING_INPUT";
})(NumberComponentType2 || (NumberComponentType2 = {}));
var BooleanComponentType2;
(function(BooleanComponentType3) {
  BooleanComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  BooleanComponentType3["CHECKBOX"] = "CHECKBOX";
})(BooleanComponentType2 || (BooleanComponentType2 = {}));
var ItemType2;
(function(ItemType3) {
  ItemType3["UNKNOWN_ITEM_TYPE"] = "UNKNOWN_ITEM_TYPE";
  ItemType3["STRING"] = "STRING";
  ItemType3["NUMBER"] = "NUMBER";
  ItemType3["BOOLEAN"] = "BOOLEAN";
  ItemType3["INTEGER"] = "INTEGER";
  ItemType3["OBJECT"] = "OBJECT";
})(ItemType2 || (ItemType2 = {}));
var PropertiesTypeEnum2;
(function(PropertiesTypeEnum3) {
  PropertiesTypeEnum3["UNKNOWN_PROPERTY_TYPE"] = "UNKNOWN_PROPERTY_TYPE";
  PropertiesTypeEnum3["STRING"] = "STRING";
  PropertiesTypeEnum3["NUMBER"] = "NUMBER";
  PropertiesTypeEnum3["BOOLEAN"] = "BOOLEAN";
  PropertiesTypeEnum3["INTEGER"] = "INTEGER";
  PropertiesTypeEnum3["ARRAY"] = "ARRAY";
})(PropertiesTypeEnum2 || (PropertiesTypeEnum2 = {}));
var ArrayComponentType2;
(function(ArrayComponentType3) {
  ArrayComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  ArrayComponentType3["CHECKBOX_GROUP"] = "CHECKBOX_GROUP";
  ArrayComponentType3["TAGS"] = "TAGS";
})(ArrayComponentType2 || (ArrayComponentType2 = {}));
var WixFileComponentType2;
(function(WixFileComponentType3) {
  WixFileComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  WixFileComponentType3["FILE_UPLOAD"] = "FILE_UPLOAD";
  WixFileComponentType3["SIGNATURE"] = "SIGNATURE";
})(WixFileComponentType2 || (WixFileComponentType2 = {}));
var UploadFileFormatEnumUploadFileFormat2;
(function(UploadFileFormatEnumUploadFileFormat3) {
  UploadFileFormatEnumUploadFileFormat3["UNKNOWN_UPLOAD_FILE_FORMAT"] = "UNKNOWN_UPLOAD_FILE_FORMAT";
  UploadFileFormatEnumUploadFileFormat3["VIDEO"] = "VIDEO";
  UploadFileFormatEnumUploadFileFormat3["IMAGE"] = "IMAGE";
  UploadFileFormatEnumUploadFileFormat3["AUDIO"] = "AUDIO";
  UploadFileFormatEnumUploadFileFormat3["DOCUMENT"] = "DOCUMENT";
  UploadFileFormatEnumUploadFileFormat3["ARCHIVE"] = "ARCHIVE";
})(UploadFileFormatEnumUploadFileFormat2 || (UploadFileFormatEnumUploadFileFormat2 = {}));
var UploadFileFormat2;
(function(UploadFileFormat3) {
  UploadFileFormat3["UNDEFINED"] = "UNDEFINED";
  UploadFileFormat3["VIDEO"] = "VIDEO";
  UploadFileFormat3["IMAGE"] = "IMAGE";
  UploadFileFormat3["AUDIO"] = "AUDIO";
  UploadFileFormat3["DOCUMENT"] = "DOCUMENT";
  UploadFileFormat3["ARCHIVE"] = "ARCHIVE";
})(UploadFileFormat2 || (UploadFileFormat2 = {}));
var PaymentComponentType2;
(function(PaymentComponentType3) {
  PaymentComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  PaymentComponentType3["CHECKBOX_GROUP"] = "CHECKBOX_GROUP";
  PaymentComponentType3["DONATION_INPUT"] = "DONATION_INPUT";
  PaymentComponentType3["PAYMENT_INPUT"] = "PAYMENT_INPUT";
  PaymentComponentType3["FIXED_PAYMENT"] = "FIXED_PAYMENT";
})(PaymentComponentType2 || (PaymentComponentType2 = {}));
var ProductType2;
(function(ProductType3) {
  ProductType3["UNKNOWN"] = "UNKNOWN";
  ProductType3["SHIPPABLE"] = "SHIPPABLE";
  ProductType3["DIGITAL"] = "DIGITAL";
})(ProductType2 || (ProductType2 = {}));
var PriceType2;
(function(PriceType3) {
  PriceType3["UNKNOWN"] = "UNKNOWN";
  PriceType3["FIXED_PRICE"] = "FIXED_PRICE";
  PriceType3["DYNAMIC_PRICE"] = "DYNAMIC_PRICE";
})(PriceType2 || (PriceType2 = {}));
var AddressComponentType2;
(function(AddressComponentType3) {
  AddressComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  AddressComponentType3["MULTILINE_ADDRESS"] = "MULTILINE_ADDRESS";
})(AddressComponentType2 || (AddressComponentType2 = {}));
var DefaultCountryConfigType2;
(function(DefaultCountryConfigType3) {
  DefaultCountryConfigType3["UNKNOWN_DEFAULT_COUNTRY"] = "UNKNOWN_DEFAULT_COUNTRY";
  DefaultCountryConfigType3["BY_IP"] = "BY_IP";
  DefaultCountryConfigType3["COUNTRY"] = "COUNTRY";
})(DefaultCountryConfigType2 || (DefaultCountryConfigType2 = {}));
var SchedulingComponentType2;
(function(SchedulingComponentType3) {
  SchedulingComponentType3["UNKNOWN_COMPONENT_TYPE"] = "UNKNOWN_COMPONENT_TYPE";
  SchedulingComponentType3["APPOINTMENT"] = "APPOINTMENT";
})(SchedulingComponentType2 || (SchedulingComponentType2 = {}));
var AppointmentFormat2;
(function(AppointmentFormat3) {
  AppointmentFormat3["UNKNOWN_FORMAT_TYPE"] = "UNKNOWN_FORMAT_TYPE";
  AppointmentFormat3["IN_PERSON"] = "IN_PERSON";
  AppointmentFormat3["VIDEO_CONFERENCE"] = "VIDEO_CONFERENCE";
  AppointmentFormat3["PHONE"] = "PHONE";
})(AppointmentFormat2 || (AppointmentFormat2 = {}));
var InputType2;
(function(InputType3) {
  InputType3["UNKNOWN_INPUT_TYPE"] = "UNKNOWN_INPUT_TYPE";
  InputType3["STRING"] = "STRING";
  InputType3["NUMBER"] = "NUMBER";
  InputType3["BOOLEAN"] = "BOOLEAN";
  InputType3["ARRAY"] = "ARRAY";
  InputType3["OBJECT"] = "OBJECT";
  InputType3["WIX_FILE"] = "WIX_FILE";
  InputType3["PAYMENT"] = "PAYMENT";
  InputType3["MULTILINE_ADDRESS"] = "MULTILINE_ADDRESS";
  InputType3["SCHEDULING"] = "SCHEDULING";
  InputType3["ADDRESS"] = "ADDRESS";
})(InputType2 || (InputType2 = {}));
var EmailInfoTag2;
(function(EmailInfoTag3) {
  EmailInfoTag3["UNTAGGED"] = "UNTAGGED";
  EmailInfoTag3["MAIN"] = "MAIN";
})(EmailInfoTag2 || (EmailInfoTag2 = {}));
var PhoneInfoTag2;
(function(PhoneInfoTag3) {
  PhoneInfoTag3["UNTAGGED"] = "UNTAGGED";
  PhoneInfoTag3["MAIN"] = "MAIN";
})(PhoneInfoTag2 || (PhoneInfoTag2 = {}));
var AddressInfoTag2;
(function(AddressInfoTag3) {
  AddressInfoTag3["UNTAGGED"] = "UNTAGGED";
  AddressInfoTag3["HOME"] = "HOME";
})(AddressInfoTag2 || (AddressInfoTag2 = {}));
var ConfirmationLevel2;
(function(ConfirmationLevel3) {
  ConfirmationLevel3["UNKNOWN_CONFIRMATION_LEVEL"] = "UNKNOWN_CONFIRMATION_LEVEL";
  ConfirmationLevel3["SINGLE_CONFIRMATION"] = "SINGLE_CONFIRMATION";
  ConfirmationLevel3["DOUBLE_CONFIRMATION"] = "DOUBLE_CONFIRMATION";
})(ConfirmationLevel2 || (ConfirmationLevel2 = {}));
var ContactField2;
(function(ContactField3) {
  ContactField3["UNKNOWN_CONTACT_FIELD"] = "UNKNOWN_CONTACT_FIELD";
  ContactField3["FIRST_NAME"] = "FIRST_NAME";
  ContactField3["LAST_NAME"] = "LAST_NAME";
  ContactField3["COMPANY"] = "COMPANY";
  ContactField3["POSITION"] = "POSITION";
  ContactField3["EMAIL"] = "EMAIL";
  ContactField3["PHONE"] = "PHONE";
  ContactField3["ADDRESS"] = "ADDRESS";
  ContactField3["BIRTHDATE"] = "BIRTHDATE";
  ContactField3["CUSTOM_FIELD"] = "CUSTOM_FIELD";
  ContactField3["SUBSCRIPTION"] = "SUBSCRIPTION";
  ContactField3["VAT_ID"] = "VAT_ID";
})(ContactField2 || (ContactField2 = {}));
var DisplayFieldType2;
(function(DisplayFieldType3) {
  DisplayFieldType3["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
  DisplayFieldType3["RICH_CONTENT"] = "RICH_CONTENT";
  DisplayFieldType3["PAGE_NAVIGATION"] = "PAGE_NAVIGATION";
  DisplayFieldType3["LOGIN_BAR"] = "LOGIN_BAR";
})(DisplayFieldType2 || (DisplayFieldType2 = {}));
var ChangeableProperty2;
(function(ChangeableProperty3) {
  ChangeableProperty3["UNKNOWN"] = "UNKNOWN";
  ChangeableProperty3["REQUIRED"] = "REQUIRED";
  ChangeableProperty3["HIDDEN"] = "HIDDEN";
  ChangeableProperty3["ALLOWED_VALUES"] = "ALLOWED_VALUES";
})(ChangeableProperty2 || (ChangeableProperty2 = {}));
var OverrideEntityType2;
(function(OverrideEntityType3) {
  OverrideEntityType3["UNKNOWN"] = "UNKNOWN";
  OverrideEntityType3["FIELD"] = "FIELD";
})(OverrideEntityType2 || (OverrideEntityType2 = {}));
var Operator2;
(function(Operator3) {
  Operator3["UNKNOWN"] = "UNKNOWN";
  Operator3["EQUAL"] = "EQUAL";
  Operator3["NOT_EQUAL"] = "NOT_EQUAL";
  Operator3["EMPTY"] = "EMPTY";
  Operator3["NOT_EMPTY"] = "NOT_EMPTY";
  Operator3["CONTAINS"] = "CONTAINS";
  Operator3["NOT_CONTAINS"] = "NOT_CONTAINS";
  Operator3["LESS_THAN"] = "LESS_THAN";
  Operator3["LESS_THAN_OR_EQUALS"] = "LESS_THAN_OR_EQUALS";
  Operator3["GREATER_THAN"] = "GREATER_THAN";
  Operator3["GREATER_THAN_OR_EQUALS"] = "GREATER_THAN_OR_EQUALS";
  Operator3["BEFORE"] = "BEFORE";
  Operator3["BEFORE_OR_EQUAL"] = "BEFORE_OR_EQUAL";
  Operator3["AFTER"] = "AFTER";
  Operator3["AFTER_OR_EQUAL"] = "AFTER_OR_EQUAL";
  Operator3["BETWEEN"] = "BETWEEN";
  Operator3["ANY"] = "ANY";
  Operator3["ARRAY_EQUAL"] = "ARRAY_EQUAL";
  Operator3["ARRAY_NOT_EQUAL"] = "ARRAY_NOT_EQUAL";
  Operator3["CHECKED"] = "CHECKED";
  Operator3["NOT_CHECKED"] = "NOT_CHECKED";
  Operator3["IN"] = "IN";
  Operator3["NOT_IN"] = "NOT_IN";
  Operator3["IS_DATE_OLDER_THAN"] = "IS_DATE_OLDER_THAN";
  Operator3["IS_DATE_OLDER_THAN_OR_EQUAL"] = "IS_DATE_OLDER_THAN_OR_EQUAL";
  Operator3["IS_DATE_NEWER_THAN"] = "IS_DATE_NEWER_THAN";
  Operator3["IS_DATE_NEWER_THAN_OR_EQUAL"] = "IS_DATE_NEWER_THAN_OR_EQUAL";
})(Operator2 || (Operator2 = {}));
var Target2;
(function(Target3) {
  Target3["UNKNOWN_TARGET"] = "UNKNOWN_TARGET";
  Target3["SELF"] = "SELF";
  Target3["BLANK"] = "BLANK";
})(Target2 || (Target2 = {}));
var SubmitSuccessAction2;
(function(SubmitSuccessAction3) {
  SubmitSuccessAction3["UNKNOWN_SUBMIT_SUCCESS_ACTION"] = "UNKNOWN_SUBMIT_SUCCESS_ACTION";
  SubmitSuccessAction3["NO_ACTION"] = "NO_ACTION";
  SubmitSuccessAction3["THANK_YOU_MESSAGE"] = "THANK_YOU_MESSAGE";
  SubmitSuccessAction3["REDIRECT"] = "REDIRECT";
})(SubmitSuccessAction2 || (SubmitSuccessAction2 = {}));
var TemplateType2;
(function(TemplateType3) {
  TemplateType3["UNKNOWN"] = "UNKNOWN";
  TemplateType3["EXTENDABLE"] = "EXTENDABLE";
  TemplateType3["DEMO"] = "DEMO";
  TemplateType3["FORM_INPUT"] = "FORM_INPUT";
})(TemplateType2 || (TemplateType2 = {}));
var CustomFieldsType2;
(function(CustomFieldsType3) {
  CustomFieldsType3["ANY"] = "ANY";
})(CustomFieldsType2 || (CustomFieldsType2 = {}));
var EditableProperties2;
(function(EditableProperties3) {
  EditableProperties3["UNKNOWN"] = "UNKNOWN";
  EditableProperties3["REQUIRED"] = "REQUIRED";
  EditableProperties3["HIDDEN"] = "HIDDEN";
  EditableProperties3["LABEL"] = "LABEL";
  EditableProperties3["PLACEHOLDER"] = "PLACEHOLDER";
  EditableProperties3["DESCRIPTION"] = "DESCRIPTION";
  EditableProperties3["INPUT_VALUE_LIMITS"] = "INPUT_VALUE_LIMITS";
  EditableProperties3["DEFAULT_VALUE"] = "DEFAULT_VALUE";
})(EditableProperties2 || (EditableProperties2 = {}));
var RequiredIndicator2;
(function(RequiredIndicator3) {
  RequiredIndicator3["UNKNOWN_INDICATOR"] = "UNKNOWN_INDICATOR";
  RequiredIndicator3["ASTERISK"] = "ASTERISK";
  RequiredIndicator3["TEXT"] = "TEXT";
  RequiredIndicator3["NONE"] = "NONE";
})(RequiredIndicator2 || (RequiredIndicator2 = {}));
var RequiredIndicatorPlacement2;
(function(RequiredIndicatorPlacement3) {
  RequiredIndicatorPlacement3["UNKNOWN_PLACEMENT"] = "UNKNOWN_PLACEMENT";
  RequiredIndicatorPlacement3["AFTER_FIELD_TITLE"] = "AFTER_FIELD_TITLE";
  RequiredIndicatorPlacement3["BEFORE_FIELD_TITLE"] = "BEFORE_FIELD_TITLE";
})(RequiredIndicatorPlacement2 || (RequiredIndicatorPlacement2 = {}));
var WixCodePublishTaskName2;
(function(WixCodePublishTaskName3) {
  WixCodePublishTaskName3["UNKNOWN"] = "UNKNOWN";
  WixCodePublishTaskName3["USER_CODE_BUNDLE"] = "USER_CODE_BUNDLE";
  WixCodePublishTaskName3["EXPORTED_FUNCTIONS_ANALYSIS"] = "EXPORTED_FUNCTIONS_ANALYSIS";
  WixCodePublishTaskName3["IMPORTED_NAMESPACES_ANALYSIS"] = "IMPORTED_NAMESPACES_ANALYSIS";
  WixCodePublishTaskName3["PAGE_DETAILS_ANALYSIS"] = "PAGE_DETAILS_ANALYSIS";
  WixCodePublishTaskName3["USER_CODE_VALIDATION"] = "USER_CODE_VALIDATION";
  WixCodePublishTaskName3["CODE_PACKAGES_REGISTRATION"] = "CODE_PACKAGES_REGISTRATION";
})(WixCodePublishTaskName2 || (WixCodePublishTaskName2 = {}));
var ChannelConfigurationChannelType2;
(function(ChannelConfigurationChannelType3) {
  ChannelConfigurationChannelType3["UNKNOWN_CHANNEL_TYPE"] = "UNKNOWN_CHANNEL_TYPE";
  ChannelConfigurationChannelType3["DIRECT_MESSAGING"] = "DIRECT_MESSAGING";
  ChannelConfigurationChannelType3["EMAIL"] = "EMAIL";
  ChannelConfigurationChannelType3["SMS"] = "SMS";
})(ChannelConfigurationChannelType2 || (ChannelConfigurationChannelType2 = {}));
var AcceptedMessageTypesAcceptedDirectMessageType2;
(function(AcceptedMessageTypesAcceptedDirectMessageType3) {
  AcceptedMessageTypesAcceptedDirectMessageType3["UNKNOWN_DIRECT_MESSAGE_TYPE"] = "UNKNOWN_DIRECT_MESSAGE_TYPE";
  AcceptedMessageTypesAcceptedDirectMessageType3["MEDIA"] = "MEDIA";
  AcceptedMessageTypesAcceptedDirectMessageType3["CARD"] = "CARD";
  AcceptedMessageTypesAcceptedDirectMessageType3["MINIMAL"] = "MINIMAL";
  AcceptedMessageTypesAcceptedDirectMessageType3["FORM"] = "FORM";
  AcceptedMessageTypesAcceptedDirectMessageType3["SYSTEM"] = "SYSTEM";
})(AcceptedMessageTypesAcceptedDirectMessageType2 || (AcceptedMessageTypesAcceptedDirectMessageType2 = {}));
var AcceptedMessageTypesAcceptedSmsMessageType2;
(function(AcceptedMessageTypesAcceptedSmsMessageType3) {
  AcceptedMessageTypesAcceptedSmsMessageType3["UNKNOWN_SMS_MESSAGE_TYPE"] = "UNKNOWN_SMS_MESSAGE_TYPE";
  AcceptedMessageTypesAcceptedSmsMessageType3["SMS"] = "SMS";
  AcceptedMessageTypesAcceptedSmsMessageType3["MMS"] = "MMS";
})(AcceptedMessageTypesAcceptedSmsMessageType2 || (AcceptedMessageTypesAcceptedSmsMessageType2 = {}));
var FactorType2;
(function(FactorType3) {
  FactorType3["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
  FactorType3["PASSWORD"] = "PASSWORD";
  FactorType3["SMS"] = "SMS";
  FactorType3["CALL"] = "CALL";
  FactorType3["EMAIL"] = "EMAIL";
  FactorType3["TOTP"] = "TOTP";
  FactorType3["PUSH"] = "PUSH";
  FactorType3["WEBAUTHN"] = "WEBAUTHN";
  FactorType3["RECOVERY_CODE"] = "RECOVERY_CODE";
})(FactorType2 || (FactorType2 = {}));
var MonitoringType2;
(function(MonitoringType3) {
  MonitoringType3["UNKNOWN_PROVIDER"] = "UNKNOWN_PROVIDER";
  MonitoringType3["SENTRY"] = "SENTRY";
  MonitoringType3["PANORAMA"] = "PANORAMA";
})(MonitoringType2 || (MonitoringType2 = {}));
var Escalation2;
(function(Escalation3) {
  Escalation3["BREAK_BUILD"] = "BREAK_BUILD";
  Escalation3["BLOCK_ROLLOUT"] = "BLOCK_ROLLOUT";
  Escalation3["BLOCK_FUTURE_ROLLOUT"] = "BLOCK_FUTURE_ROLLOUT";
  Escalation3["OPEN_BUG_SLA"] = "OPEN_BUG_SLA";
  Escalation3["VISIBILITY"] = "VISIBILITY";
})(Escalation2 || (Escalation2 = {}));
var ImportanceLevel2;
(function(ImportanceLevel3) {
  ImportanceLevel3["LOW"] = "LOW";
  ImportanceLevel3["MEDIUM"] = "MEDIUM";
  ImportanceLevel3["HIGH"] = "HIGH";
})(ImportanceLevel2 || (ImportanceLevel2 = {}));
var PanelSizeWidth2;
(function(PanelSizeWidth3) {
  PanelSizeWidth3["UNKNOWN_WIDTH"] = "UNKNOWN_WIDTH";
  PanelSizeWidth3["SMALL"] = "SMALL";
  PanelSizeWidth3["MEDIUM"] = "MEDIUM";
  PanelSizeWidth3["LARGE"] = "LARGE";
})(PanelSizeWidth2 || (PanelSizeWidth2 = {}));
var PanelContentType2;
(function(PanelContentType3) {
  PanelContentType3["UNKNOWN_PanelContentType"] = "UNKNOWN_PanelContentType";
  PanelContentType3["url"] = "url";
  PanelContentType3["code"] = "code";
})(PanelContentType2 || (PanelContentType2 = {}));
var StorageType2;
(function(StorageType3) {
  StorageType3["UNKNOWN_STORAGE_TYPE"] = "UNKNOWN_STORAGE_TYPE";
  StorageType3["COOKIE"] = "COOKIE";
  StorageType3["LOCALSTORAGE"] = "LOCALSTORAGE";
  StorageType3["SESSIONSTORAGE"] = "SESSIONSTORAGE";
  StorageType3["INDEXDB"] = "INDEXDB";
})(StorageType2 || (StorageType2 = {}));
var ConsentCategory2;
(function(ConsentCategory3) {
  ConsentCategory3["UNKNOWN_CATEGORY"] = "UNKNOWN_CATEGORY";
  ConsentCategory3["essential"] = "essential";
  ConsentCategory3["functional"] = "functional";
  ConsentCategory3["analytics"] = "analytics";
  ConsentCategory3["advertising"] = "advertising";
})(ConsentCategory2 || (ConsentCategory2 = {}));
var StorageDomain2;
(function(StorageDomain3) {
  StorageDomain3["UNKNOWN_STORAGE_DOMAIN"] = "UNKNOWN_STORAGE_DOMAIN";
  StorageDomain3["SITE_DOMAIN"] = "SITE_DOMAIN";
  StorageDomain3["WIX_DOMAIN"] = "WIX_DOMAIN";
  StorageDomain3["APP_DOMAIN"] = "APP_DOMAIN";
})(StorageDomain2 || (StorageDomain2 = {}));
var Method2;
(function(Method3) {
  Method3["CREATE"] = "CREATE";
  Method3["UPDATE"] = "UPDATE";
  Method3["CANCEL"] = "CANCEL";
})(Method2 || (Method2 = {}));
var ParticipantType2;
(function(ParticipantType3) {
  ParticipantType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  ParticipantType3["WIX_USER"] = "WIX_USER";
  ParticipantType3["CONTACT"] = "CONTACT";
  ParticipantType3["ANONYMOUS"] = "ANONYMOUS";
})(ParticipantType2 || (ParticipantType2 = {}));
var InterfaceConfigurationType2;
(function(InterfaceConfigurationType3) {
  InterfaceConfigurationType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  InterfaceConfigurationType3["WIDGET_COMPONENT"] = "WIDGET_COMPONENT";
  InterfaceConfigurationType3["ITEM_SELECTION"] = "ITEM_SELECTION";
})(InterfaceConfigurationType2 || (InterfaceConfigurationType2 = {}));
var Scope2;
(function(Scope3) {
  Scope3["UNKNOWN_SCOPE"] = "UNKNOWN_SCOPE";
  Scope3["SPECIFIC_SITE"] = "SPECIFIC_SITE";
  Scope3["NON_SPECIFIC_SITE"] = "NON_SPECIFIC_SITE";
})(Scope2 || (Scope2 = {}));
var CssPropertyType2;
(function(CssPropertyType3) {
  CssPropertyType3["UNKNOWN_CssPropertyType"] = "UNKNOWN_CssPropertyType";
  CssPropertyType3["background"] = "background";
  CssPropertyType3["backgroundSize"] = "backgroundSize";
  CssPropertyType3["backgroundColor"] = "backgroundColor";
  CssPropertyType3["backgroundImage"] = "backgroundImage";
  CssPropertyType3["backgroundClip"] = "backgroundClip";
  CssPropertyType3["backgroundOrigin"] = "backgroundOrigin";
  CssPropertyType3["backgroundPosition"] = "backgroundPosition";
  CssPropertyType3["backgroundRepeat"] = "backgroundRepeat";
  CssPropertyType3["backgroundAttachment"] = "backgroundAttachment";
  CssPropertyType3["fill"] = "fill";
  CssPropertyType3["fillOpacity"] = "fillOpacity";
  CssPropertyType3["margin"] = "margin";
  CssPropertyType3["marginTop"] = "marginTop";
  CssPropertyType3["marginRight"] = "marginRight";
  CssPropertyType3["marginBottom"] = "marginBottom";
  CssPropertyType3["marginLeft"] = "marginLeft";
  CssPropertyType3["marginInlineStart"] = "marginInlineStart";
  CssPropertyType3["marginInlineEnd"] = "marginInlineEnd";
  CssPropertyType3["padding"] = "padding";
  CssPropertyType3["paddingTop"] = "paddingTop";
  CssPropertyType3["paddingRight"] = "paddingRight";
  CssPropertyType3["paddingBottom"] = "paddingBottom";
  CssPropertyType3["paddingLeft"] = "paddingLeft";
  CssPropertyType3["paddingInlineStart"] = "paddingInlineStart";
  CssPropertyType3["paddingInlineEnd"] = "paddingInlineEnd";
  CssPropertyType3["border"] = "border";
  CssPropertyType3["borderWidth"] = "borderWidth";
  CssPropertyType3["borderStyle"] = "borderStyle";
  CssPropertyType3["borderColor"] = "borderColor";
  CssPropertyType3["borderTop"] = "borderTop";
  CssPropertyType3["borderTopColor"] = "borderTopColor";
  CssPropertyType3["borderTopWidth"] = "borderTopWidth";
  CssPropertyType3["borderTopStyle"] = "borderTopStyle";
  CssPropertyType3["borderRight"] = "borderRight";
  CssPropertyType3["borderRightColor"] = "borderRightColor";
  CssPropertyType3["borderRightWidth"] = "borderRightWidth";
  CssPropertyType3["borderRightStyle"] = "borderRightStyle";
  CssPropertyType3["borderBottom"] = "borderBottom";
  CssPropertyType3["borderBottomColor"] = "borderBottomColor";
  CssPropertyType3["borderBottomWidth"] = "borderBottomWidth";
  CssPropertyType3["borderBottomStyle"] = "borderBottomStyle";
  CssPropertyType3["borderLeft"] = "borderLeft";
  CssPropertyType3["borderLeftColor"] = "borderLeftColor";
  CssPropertyType3["borderLeftWidth"] = "borderLeftWidth";
  CssPropertyType3["borderLeftStyle"] = "borderLeftStyle";
  CssPropertyType3["borderInlineStart"] = "borderInlineStart";
  CssPropertyType3["borderInlineStartColor"] = "borderInlineStartColor";
  CssPropertyType3["borderInlineStartWidth"] = "borderInlineStartWidth";
  CssPropertyType3["borderInlineStartStyle"] = "borderInlineStartStyle";
  CssPropertyType3["borderInlineEnd"] = "borderInlineEnd";
  CssPropertyType3["borderInlineEndColor"] = "borderInlineEndColor";
  CssPropertyType3["borderInlineEndWidth"] = "borderInlineEndWidth";
  CssPropertyType3["borderInlineEndStyle"] = "borderInlineEndStyle";
  CssPropertyType3["borderRadius"] = "borderRadius";
  CssPropertyType3["borderTopLeftRadius"] = "borderTopLeftRadius";
  CssPropertyType3["borderTopRightRadius"] = "borderTopRightRadius";
  CssPropertyType3["borderBottomRightRadius"] = "borderBottomRightRadius";
  CssPropertyType3["borderBottomLeftRadius"] = "borderBottomLeftRadius";
  CssPropertyType3["borderStartStartRadius"] = "borderStartStartRadius";
  CssPropertyType3["borderStartEndRadius"] = "borderStartEndRadius";
  CssPropertyType3["borderEndStartRadius"] = "borderEndStartRadius";
  CssPropertyType3["borderEndEndRadius"] = "borderEndEndRadius";
  CssPropertyType3["font"] = "font";
  CssPropertyType3["fontFamily"] = "fontFamily";
  CssPropertyType3["fontSize"] = "fontSize";
  CssPropertyType3["fontStretch"] = "fontStretch";
  CssPropertyType3["fontStyle"] = "fontStyle";
  CssPropertyType3["fontVariant"] = "fontVariant";
  CssPropertyType3["fontWeight"] = "fontWeight";
  CssPropertyType3["lineHeight"] = "lineHeight";
  CssPropertyType3["color"] = "color";
  CssPropertyType3["letterSpacing"] = "letterSpacing";
  CssPropertyType3["writingMode"] = "writingMode";
  CssPropertyType3["textAlign"] = "textAlign";
  CssPropertyType3["textTransform"] = "textTransform";
  CssPropertyType3["textShadow"] = "textShadow";
  CssPropertyType3["textOverflow"] = "textOverflow";
  CssPropertyType3["textIndent"] = "textIndent";
  CssPropertyType3["textDecoration"] = "textDecoration";
  CssPropertyType3["textDecorationColor"] = "textDecorationColor";
  CssPropertyType3["textDecorationLine"] = "textDecorationLine";
  CssPropertyType3["textDecorationStyle"] = "textDecorationStyle";
  CssPropertyType3["textDecorationThickness"] = "textDecorationThickness";
  CssPropertyType3["boxShadow"] = "boxShadow";
  CssPropertyType3["opacity"] = "opacity";
  CssPropertyType3["overflow"] = "overflow";
  CssPropertyType3["display"] = "display";
  CssPropertyType3["alignSelf"] = "alignSelf";
  CssPropertyType3["justifyContent"] = "justifyContent";
  CssPropertyType3["alignItems"] = "alignItems";
  CssPropertyType3["flexDirection"] = "flexDirection";
  CssPropertyType3["gap"] = "gap";
  CssPropertyType3["height"] = "height";
  CssPropertyType3["width"] = "width";
  CssPropertyType3["columnGap"] = "columnGap";
  CssPropertyType3["rowGap"] = "rowGap";
  CssPropertyType3["filter"] = "filter";
  CssPropertyType3["backdropFilter"] = "backdropFilter";
  CssPropertyType3["objectFit"] = "objectFit";
  CssPropertyType3["objectPosition"] = "objectPosition";
  CssPropertyType3["mixBlendMode"] = "mixBlendMode";
  CssPropertyType3["isolation"] = "isolation";
  CssPropertyType3["stroke"] = "stroke";
  CssPropertyType3["strokeWidth"] = "strokeWidth";
  CssPropertyType3["strokeOpacity"] = "strokeOpacity";
})(CssPropertyType2 || (CssPropertyType2 = {}));
var CssDataType2;
(function(CssDataType3) {
  CssDataType3["UNKNOWN_CssDataType"] = "UNKNOWN_CssDataType";
  CssDataType3["number"] = "number";
  CssDataType3["length"] = "length";
  CssDataType3["color"] = "color";
  CssDataType3["angle"] = "angle";
  CssDataType3["percentage"] = "percentage";
  CssDataType3["lengthPercentage"] = "lengthPercentage";
  CssDataType3["blendMode"] = "blendMode";
  CssDataType3["customEnum"] = "customEnum";
  CssDataType3["string"] = "string";
  CssDataType3["time"] = "time";
})(CssDataType2 || (CssDataType2 = {}));
var StyleType2;
(function(StyleType3) {
  StyleType3["UNKNOWN_StyleType"] = "UNKNOWN_StyleType";
  StyleType3["number"] = "number";
  StyleType3["string"] = "string";
  StyleType3["angle"] = "angle";
  StyleType3["length"] = "length";
  StyleType3["percentage"] = "percentage";
  StyleType3["lengthPercentage"] = "lengthPercentage";
  StyleType3["blendMode"] = "blendMode";
  StyleType3["customEnum"] = "customEnum";
  StyleType3["time"] = "time";
  StyleType3["background"] = "background";
  StyleType3["backgroundSize"] = "backgroundSize";
  StyleType3["backgroundColor"] = "backgroundColor";
  StyleType3["backgroundImage"] = "backgroundImage";
  StyleType3["backgroundClip"] = "backgroundClip";
  StyleType3["backgroundOrigin"] = "backgroundOrigin";
  StyleType3["backgroundPosition"] = "backgroundPosition";
  StyleType3["backgroundRepeat"] = "backgroundRepeat";
  StyleType3["backgroundAttachment"] = "backgroundAttachment";
  StyleType3["margin"] = "margin";
  StyleType3["marginTop"] = "marginTop";
  StyleType3["marginRight"] = "marginRight";
  StyleType3["marginBottom"] = "marginBottom";
  StyleType3["marginLeft"] = "marginLeft";
  StyleType3["marginInlineStart"] = "marginInlineStart";
  StyleType3["marginInlineEnd"] = "marginInlineEnd";
  StyleType3["padding"] = "padding";
  StyleType3["paddingTop"] = "paddingTop";
  StyleType3["paddingRight"] = "paddingRight";
  StyleType3["paddingBottom"] = "paddingBottom";
  StyleType3["paddingLeft"] = "paddingLeft";
  StyleType3["paddingInlineStart"] = "paddingInlineStart";
  StyleType3["paddingInlineEnd"] = "paddingInlineEnd";
  StyleType3["border"] = "border";
  StyleType3["borderWidth"] = "borderWidth";
  StyleType3["borderStyle"] = "borderStyle";
  StyleType3["borderColor"] = "borderColor";
  StyleType3["borderTop"] = "borderTop";
  StyleType3["borderTopColor"] = "borderTopColor";
  StyleType3["borderTopWidth"] = "borderTopWidth";
  StyleType3["borderTopStyle"] = "borderTopStyle";
  StyleType3["borderRight"] = "borderRight";
  StyleType3["borderRightColor"] = "borderRightColor";
  StyleType3["borderRightWidth"] = "borderRightWidth";
  StyleType3["borderRightStyle"] = "borderRightStyle";
  StyleType3["borderBottom"] = "borderBottom";
  StyleType3["borderBottomColor"] = "borderBottomColor";
  StyleType3["borderBottomWidth"] = "borderBottomWidth";
  StyleType3["borderBottomStyle"] = "borderBottomStyle";
  StyleType3["borderLeft"] = "borderLeft";
  StyleType3["borderLeftColor"] = "borderLeftColor";
  StyleType3["borderLeftWidth"] = "borderLeftWidth";
  StyleType3["borderLeftStyle"] = "borderLeftStyle";
  StyleType3["borderInlineStart"] = "borderInlineStart";
  StyleType3["borderInlineStartColor"] = "borderInlineStartColor";
  StyleType3["borderInlineStartWidth"] = "borderInlineStartWidth";
  StyleType3["borderInlineStartStyle"] = "borderInlineStartStyle";
  StyleType3["borderInlineEnd"] = "borderInlineEnd";
  StyleType3["borderInlineEndColor"] = "borderInlineEndColor";
  StyleType3["borderInlineEndWidth"] = "borderInlineEndWidth";
  StyleType3["borderInlineEndStyle"] = "borderInlineEndStyle";
  StyleType3["borderRadius"] = "borderRadius";
  StyleType3["borderTopLeftRadius"] = "borderTopLeftRadius";
  StyleType3["borderTopRightRadius"] = "borderTopRightRadius";
  StyleType3["borderBottomRightRadius"] = "borderBottomRightRadius";
  StyleType3["borderBottomLeftRadius"] = "borderBottomLeftRadius";
  StyleType3["borderStartStartRadius"] = "borderStartStartRadius";
  StyleType3["borderStartEndRadius"] = "borderStartEndRadius";
  StyleType3["borderEndStartRadius"] = "borderEndStartRadius";
  StyleType3["borderEndEndRadius"] = "borderEndEndRadius";
  StyleType3["font"] = "font";
  StyleType3["fontFamily"] = "fontFamily";
  StyleType3["fontSize"] = "fontSize";
  StyleType3["fontStretch"] = "fontStretch";
  StyleType3["fontStyle"] = "fontStyle";
  StyleType3["fontVariant"] = "fontVariant";
  StyleType3["fontWeight"] = "fontWeight";
  StyleType3["lineHeight"] = "lineHeight";
  StyleType3["color"] = "color";
  StyleType3["letterSpacing"] = "letterSpacing";
  StyleType3["writingMode"] = "writingMode";
  StyleType3["textAlign"] = "textAlign";
  StyleType3["textTransform"] = "textTransform";
  StyleType3["textShadow"] = "textShadow";
  StyleType3["textOverflow"] = "textOverflow";
  StyleType3["textIndent"] = "textIndent";
  StyleType3["textDecoration"] = "textDecoration";
  StyleType3["textDecorationColor"] = "textDecorationColor";
  StyleType3["textDecorationLine"] = "textDecorationLine";
  StyleType3["textDecorationStyle"] = "textDecorationStyle";
  StyleType3["textDecorationThickness"] = "textDecorationThickness";
  StyleType3["boxShadow"] = "boxShadow";
  StyleType3["opacity"] = "opacity";
  StyleType3["overflow"] = "overflow";
  StyleType3["overflowX"] = "overflowX";
  StyleType3["overflowY"] = "overflowY";
  StyleType3["display"] = "display";
  StyleType3["alignSelf"] = "alignSelf";
  StyleType3["justifyContent"] = "justifyContent";
  StyleType3["alignItems"] = "alignItems";
  StyleType3["flexDirection"] = "flexDirection";
  StyleType3["height"] = "height";
  StyleType3["width"] = "width";
  StyleType3["gap"] = "gap";
  StyleType3["columnGap"] = "columnGap";
  StyleType3["rowGap"] = "rowGap";
  StyleType3["filter"] = "filter";
  StyleType3["backdropFilter"] = "backdropFilter";
  StyleType3["objectFit"] = "objectFit";
  StyleType3["objectPosition"] = "objectPosition";
  StyleType3["mixBlendMode"] = "mixBlendMode";
  StyleType3["isolation"] = "isolation";
  StyleType3["stroke"] = "stroke";
  StyleType3["strokeWidth"] = "strokeWidth";
  StyleType3["strokeOpacity"] = "strokeOpacity";
  StyleType3["fill"] = "fill";
  StyleType3["fillOpacity"] = "fillOpacity";
})(StyleType2 || (StyleType2 = {}));
var FilterFunction2;
(function(FilterFunction3) {
  FilterFunction3["UNKNOWN_FilterFunctions"] = "UNKNOWN_FilterFunctions";
  FilterFunction3["blur"] = "blur";
  FilterFunction3["brightness"] = "brightness";
  FilterFunction3["contrast"] = "contrast";
  FilterFunction3["drop_shadow"] = "drop_shadow";
  FilterFunction3["grayscale"] = "grayscale";
  FilterFunction3["hue_rotate"] = "hue_rotate";
  FilterFunction3["invert"] = "invert";
  FilterFunction3["opacity"] = "opacity";
  FilterFunction3["sepia"] = "sepia";
  FilterFunction3["saturate"] = "saturate";
})(FilterFunction2 || (FilterFunction2 = {}));
var DisplayValueEnumDisplayValue2;
(function(DisplayValueEnumDisplayValue3) {
  DisplayValueEnumDisplayValue3["UNKNOWN_DisplayValue"] = "UNKNOWN_DisplayValue";
  DisplayValueEnumDisplayValue3["none"] = "none";
  DisplayValueEnumDisplayValue3["block"] = "block";
  DisplayValueEnumDisplayValue3["inline"] = "inline";
  DisplayValueEnumDisplayValue3["flow"] = "flow";
  DisplayValueEnumDisplayValue3["flowRoot"] = "flowRoot";
  DisplayValueEnumDisplayValue3["table"] = "table";
  DisplayValueEnumDisplayValue3["flex"] = "flex";
  DisplayValueEnumDisplayValue3["grid"] = "grid";
  DisplayValueEnumDisplayValue3["list_item"] = "list_item";
  DisplayValueEnumDisplayValue3["contents"] = "contents";
  DisplayValueEnumDisplayValue3["inline_block"] = "inline_block";
  DisplayValueEnumDisplayValue3["inline_table"] = "inline_table";
  DisplayValueEnumDisplayValue3["inline_flex"] = "inline_flex";
  DisplayValueEnumDisplayValue3["inline_grid"] = "inline_grid";
})(DisplayValueEnumDisplayValue2 || (DisplayValueEnumDisplayValue2 = {}));
var WritingModeValue2;
(function(WritingModeValue3) {
  WritingModeValue3["UNKNOWN_WritingModeValue"] = "UNKNOWN_WritingModeValue";
  WritingModeValue3["horizontalTb"] = "horizontalTb";
  WritingModeValue3["verticalRl"] = "verticalRl";
  WritingModeValue3["verticalLr"] = "verticalLr";
  WritingModeValue3["sidewaysRl"] = "sidewaysRl";
  WritingModeValue3["sidewaysLr"] = "sidewaysLr";
})(WritingModeValue2 || (WritingModeValue2 = {}));
var BackgroundModeEnum2;
(function(BackgroundModeEnum3) {
  BackgroundModeEnum3["UNKNOWN_BackgroundModeEnum"] = "UNKNOWN_BackgroundModeEnum";
  BackgroundModeEnum3["shapeDividerSvg"] = "shapeDividerSvg";
})(BackgroundModeEnum2 || (BackgroundModeEnum2 = {}));
var ImageCategoryTypes2;
(function(ImageCategoryTypes3) {
  ImageCategoryTypes3["UNKNOWN_CategoryName"] = "UNKNOWN_CategoryName";
  ImageCategoryTypes3["IMAGE"] = "IMAGE";
  ImageCategoryTypes3["IMAGE_BACKGROUND"] = "IMAGE_BACKGROUND";
})(ImageCategoryTypes2 || (ImageCategoryTypes2 = {}));
var VectorArtCategoryTypes2;
(function(VectorArtCategoryTypes3) {
  VectorArtCategoryTypes3["UNKNOWN_VectorArtCategoryTypes"] = "UNKNOWN_VectorArtCategoryTypes";
  VectorArtCategoryTypes3["SHAPE_ALL"] = "SHAPE_ALL";
  VectorArtCategoryTypes3["SHAPE_BASIC"] = "SHAPE_BASIC";
  VectorArtCategoryTypes3["SHAPE_ART"] = "SHAPE_ART";
  VectorArtCategoryTypes3["ICON_SOCIAL"] = "ICON_SOCIAL";
  VectorArtCategoryTypes3["SHAPE_DIVIDERS"] = "SHAPE_DIVIDERS";
  VectorArtCategoryTypes3["SHAPE_LOCATION"] = "SHAPE_LOCATION";
})(VectorArtCategoryTypes2 || (VectorArtCategoryTypes2 = {}));
var CssDataTypeEnumCssDataType2;
(function(CssDataTypeEnumCssDataType3) {
  CssDataTypeEnumCssDataType3["UNKNOWN_CssDataType"] = "UNKNOWN_CssDataType";
  CssDataTypeEnumCssDataType3["number"] = "number";
  CssDataTypeEnumCssDataType3["string"] = "string";
  CssDataTypeEnumCssDataType3["angle"] = "angle";
  CssDataTypeEnumCssDataType3["color"] = "color";
  CssDataTypeEnumCssDataType3["length"] = "length";
  CssDataTypeEnumCssDataType3["percentage"] = "percentage";
  CssDataTypeEnumCssDataType3["lengthPercentage"] = "lengthPercentage";
  CssDataTypeEnumCssDataType3["blendMode"] = "blendMode";
  CssDataTypeEnumCssDataType3["customEnum"] = "customEnum";
  CssDataTypeEnumCssDataType3["time"] = "time";
})(CssDataTypeEnumCssDataType2 || (CssDataTypeEnumCssDataType2 = {}));
var DataType2;
(function(DataType3) {
  DataType3["UNKNOWN_DataType"] = "UNKNOWN_DataType";
  DataType3["text"] = "text";
  DataType3["textEnum"] = "textEnum";
  DataType3["number"] = "number";
  DataType3["booleanValue"] = "booleanValue";
  DataType3["a11y"] = "a11y";
  DataType3["link"] = "link";
  DataType3["image"] = "image";
  DataType3["video"] = "video";
  DataType3["vectorArt"] = "vectorArt";
  DataType3["audio"] = "audio";
  DataType3["schema"] = "schema";
  DataType3["localDate"] = "localDate";
  DataType3["localTime"] = "localTime";
  DataType3["localDateTime"] = "localDateTime";
  DataType3["webUrl"] = "webUrl";
  DataType3["email"] = "email";
  DataType3["phone"] = "phone";
  DataType3["hostname"] = "hostname";
  DataType3["regex"] = "regex";
  DataType3["guid"] = "guid";
  DataType3["richText"] = "richText";
  DataType3["container"] = "container";
  DataType3["arrayItems"] = "arrayItems";
  DataType3["direction"] = "direction";
  DataType3["menuItems"] = "menuItems";
  DataType3["data"] = "data";
})(DataType2 || (DataType2 = {}));
var A11yAttributes2;
(function(A11yAttributes3) {
  A11yAttributes3["Unknown_AriaAttributes"] = "Unknown_AriaAttributes";
  A11yAttributes3["tabIndex"] = "tabIndex";
  A11yAttributes3["ariaLevel"] = "ariaLevel";
  A11yAttributes3["ariaExpanded"] = "ariaExpanded";
  A11yAttributes3["ariaDisabled"] = "ariaDisabled";
  A11yAttributes3["ariaAtomic"] = "ariaAtomic";
  A11yAttributes3["ariaHidden"] = "ariaHidden";
  A11yAttributes3["ariaBusy"] = "ariaBusy";
  A11yAttributes3["multiline"] = "multiline";
  A11yAttributes3["ariaAutocomplete"] = "ariaAutocomplete";
  A11yAttributes3["ariaPressed"] = "ariaPressed";
  A11yAttributes3["ariaHaspopup"] = "ariaHaspopup";
  A11yAttributes3["ariaRelevant"] = "ariaRelevant";
  A11yAttributes3["role"] = "role";
  A11yAttributes3["ariaLive"] = "ariaLive";
  A11yAttributes3["ariaCurrent"] = "ariaCurrent";
  A11yAttributes3["ariaLabel"] = "ariaLabel";
  A11yAttributes3["ariaRoledescription"] = "ariaRoledescription";
  A11yAttributes3["ariaDescribedby"] = "ariaDescribedby";
  A11yAttributes3["ariaLabelledby"] = "ariaLabelledby";
  A11yAttributes3["ariaErrormessage"] = "ariaErrormessage";
  A11yAttributes3["ariaOwns"] = "ariaOwns";
  A11yAttributes3["ariaControls"] = "ariaControls";
  A11yAttributes3["tag"] = "tag";
  A11yAttributes3["ariaMultiline"] = "ariaMultiline";
  A11yAttributes3["ariaInvalid"] = "ariaInvalid";
})(A11yAttributes2 || (A11yAttributes2 = {}));
var LinkType2;
(function(LinkType3) {
  LinkType3["UNKNOWN_LinkType"] = "UNKNOWN_LinkType";
  LinkType3["externalLink"] = "externalLink";
  LinkType3["anchorLink"] = "anchorLink";
  LinkType3["emailLink"] = "emailLink";
  LinkType3["phoneLink"] = "phoneLink";
  LinkType3["dynamicPageLink"] = "dynamicPageLink";
  LinkType3["pageLink"] = "pageLink";
  LinkType3["whatsAppLink"] = "whatsAppLink";
  LinkType3["documentLink"] = "documentLink";
  LinkType3["popupLink"] = "popupLink";
  LinkType3["addressLink"] = "addressLink";
  LinkType3["edgeAnchorLinks"] = "edgeAnchorLinks";
  LinkType3["loginToWixLink"] = "loginToWixLink";
})(LinkType2 || (LinkType2 = {}));
var ContainerType2;
(function(ContainerType3) {
  ContainerType3["UNKNOWN_CONTAINER_TYPE"] = "UNKNOWN_CONTAINER_TYPE";
  ContainerType3["simple"] = "simple";
  ContainerType3["slot"] = "slot";
  ContainerType3["placeholder"] = "placeholder";
  ContainerType3["template"] = "template";
})(ContainerType2 || (ContainerType2 = {}));
var ResizeDirection2;
(function(ResizeDirection3) {
  ResizeDirection3["UNKNOWN_ResizeDirection"] = "UNKNOWN_ResizeDirection";
  ResizeDirection3["horizontal"] = "horizontal";
  ResizeDirection3["vertical"] = "vertical";
  ResizeDirection3["horizontalAndVertical"] = "horizontalAndVertical";
  ResizeDirection3["aspectRatio"] = "aspectRatio";
  ResizeDirection3["none"] = "none";
})(ResizeDirection2 || (ResizeDirection2 = {}));
var RichTextAbilities2;
(function(RichTextAbilities3) {
  RichTextAbilities3["UNKNOWN_RichTextAbilities"] = "UNKNOWN_RichTextAbilities";
  RichTextAbilities3["font"] = "font";
  RichTextAbilities3["fontFamily"] = "fontFamily";
  RichTextAbilities3["fontSize"] = "fontSize";
  RichTextAbilities3["fontStyle"] = "fontStyle";
  RichTextAbilities3["fontWeight"] = "fontWeight";
  RichTextAbilities3["textDecoration"] = "textDecoration";
  RichTextAbilities3["color"] = "color";
  RichTextAbilities3["backgroundColor"] = "backgroundColor";
  RichTextAbilities3["letterSpacing"] = "letterSpacing";
  RichTextAbilities3["textAlign"] = "textAlign";
  RichTextAbilities3["direction"] = "direction";
  RichTextAbilities3["marginStart"] = "marginStart";
  RichTextAbilities3["marginEnd"] = "marginEnd";
  RichTextAbilities3["bulletedList"] = "bulletedList";
  RichTextAbilities3["numberedList"] = "numberedList";
  RichTextAbilities3["seoTag"] = "seoTag";
})(RichTextAbilities2 || (RichTextAbilities2 = {}));
var VideoCategoryTypes2;
(function(VideoCategoryTypes3) {
  VideoCategoryTypes3["UNKNOWN_VideoCategoryTypes"] = "UNKNOWN_VideoCategoryTypes";
  VideoCategoryTypes3["VIDEO"] = "VIDEO";
  VideoCategoryTypes3["VIDEO_TRANSPARENT"] = "VIDEO_TRANSPARENT";
  VideoCategoryTypes3["VIDEO_OPAQUE"] = "VIDEO_OPAQUE";
})(VideoCategoryTypes2 || (VideoCategoryTypes2 = {}));
var ElementTypeEnumElementType2;
(function(ElementTypeEnumElementType3) {
  ElementTypeEnumElementType3["UNKNOWN_ElementType"] = "UNKNOWN_ElementType";
  ElementTypeEnumElementType3["inlineElement"] = "inlineElement";
  ElementTypeEnumElementType3["refElement"] = "refElement";
})(ElementTypeEnumElementType2 || (ElementTypeEnumElementType2 = {}));
var ActionType2;
(function(ActionType3) {
  ActionType3["UNKNOWN_ActionType"] = "UNKNOWN_ActionType";
  ActionType3["data"] = "data";
  ActionType3["event"] = "event";
  ActionType3["panel"] = "panel";
  ActionType3["forward"] = "forward";
  ActionType3["style"] = "style";
  ActionType3["displayGroup"] = "displayGroup";
  ActionType3["cssProperty"] = "cssProperty";
  ActionType3["cssCustomProperty"] = "cssCustomProperty";
})(ActionType2 || (ActionType2 = {}));
var PanelType2;
(function(PanelType3) {
  PanelType3["UNKNOWN_PanelType"] = "UNKNOWN_PanelType";
  PanelType3["panelId"] = "panelId";
  PanelType3["inline"] = "inline";
})(PanelType2 || (PanelType2 = {}));
var ActionName2;
(function(ActionName3) {
  ActionName3["UNKNOWN_ActionName"] = "UNKNOWN_ActionName";
  ActionName3["settings"] = "settings";
  ActionName3["design"] = "design";
  ActionName3["media"] = "media";
  ActionName3["manageItems"] = "manageItems";
  ActionName3["dashboard"] = "dashboard";
  ActionName3["custom"] = "custom";
  ActionName3["manageMenu"] = "manageMenu";
  ActionName3["container"] = "container";
})(ActionName2 || (ActionName2 = {}));
var SizingType2;
(function(SizingType3) {
  SizingType3["UNKNOWN_SizingType"] = "UNKNOWN_SizingType";
  SizingType3["content"] = "content";
  SizingType3["stretched"] = "stretched";
  SizingType3["pixels"] = "pixels";
})(SizingType2 || (SizingType2 = {}));
var BreakpointEnumBreakpoint2;
(function(BreakpointEnumBreakpoint3) {
  BreakpointEnumBreakpoint3["UNKNOWN_Breakpoint"] = "UNKNOWN_Breakpoint";
  BreakpointEnumBreakpoint3["small"] = "small";
  BreakpointEnumBreakpoint3["large"] = "large";
})(BreakpointEnumBreakpoint2 || (BreakpointEnumBreakpoint2 = {}));
var ContentResizeDirection2;
(function(ContentResizeDirection3) {
  ContentResizeDirection3["UNKNOWN_ContentResizeDirection"] = "UNKNOWN_ContentResizeDirection";
  ContentResizeDirection3["horizontal"] = "horizontal";
  ContentResizeDirection3["vertical"] = "vertical";
  ContentResizeDirection3["horizontalAndVertical"] = "horizontalAndVertical";
  ContentResizeDirection3["none"] = "none";
})(ContentResizeDirection2 || (ContentResizeDirection2 = {}));
var Archetype2;
(function(Archetype3) {
  Archetype3["UNKNOWN_Archetype"] = "UNKNOWN_Archetype";
  Archetype3["Button"] = "Button";
  Archetype3["LoginButton"] = "LoginButton";
  Archetype3["Image"] = "Image";
  Archetype3["Gallery"] = "Gallery";
  Archetype3["Video"] = "Video";
  Archetype3["Audio"] = "Audio";
  Archetype3["Text"] = "Text";
  Archetype3["TextInput"] = "TextInput";
  Archetype3["RichTextEditor"] = "RichTextEditor";
  Archetype3["SignatureInput"] = "SignatureInput";
  Archetype3["Checkbox"] = "Checkbox";
  Archetype3["RadioGroup"] = "RadioGroup";
  Archetype3["Switch"] = "Switch";
  Archetype3["Dropdown"] = "Dropdown";
  Archetype3["DatePicker"] = "DatePicker";
  Archetype3["TimePicker"] = "TimePicker";
  Archetype3["Ratings"] = "Ratings";
  Archetype3["RatingInput"] = "RatingInput";
  Archetype3["Menu"] = "Menu";
  Archetype3["Pagination"] = "Pagination";
  Archetype3["Slider"] = "Slider";
  Archetype3["Container"] = "Container";
  Archetype3["Carousel"] = "Carousel";
  Archetype3["Accordion"] = "Accordion";
  Archetype3["Tabs"] = "Tabs";
  Archetype3["ProgressBar"] = "ProgressBar";
  Archetype3["Upload"] = "Upload";
  Archetype3["Social"] = "Social";
  Archetype3["Breadcrumbs"] = "Breadcrumbs";
  Archetype3["SearchBox"] = "SearchBox";
  Archetype3["Map"] = "Map";
  Archetype3["Line"] = "Line";
  Archetype3["Logo"] = "Logo";
  Archetype3["Avatar"] = "Avatar";
  Archetype3["Captcha"] = "Captcha";
  Archetype3["VectorArt"] = "VectorArt";
  Archetype3["AnimatedGraphic"] = "AnimatedGraphic";
  Archetype3["Cart"] = "Cart";
  Archetype3["ContactForm"] = "ContactForm";
  Archetype3["Frame"] = "Frame";
  Archetype3["Divider"] = "Divider";
})(Archetype2 || (Archetype2 = {}));
var NativeStateType2;
(function(NativeStateType3) {
  NativeStateType3["UNKNOWN_NativeStateType"] = "UNKNOWN_NativeStateType";
  NativeStateType3["hover"] = "hover";
  NativeStateType3["focus"] = "focus";
  NativeStateType3["disabled"] = "disabled";
  NativeStateType3["invalid"] = "invalid";
})(NativeStateType2 || (NativeStateType2 = {}));
var GroupType2;
(function(GroupType3) {
  GroupType3["UNKNOWN_GroupType"] = "UNKNOWN_GroupType";
  GroupType3["cssDataType"] = "cssDataType";
  GroupType3["dataType"] = "dataType";
  GroupType3["preset"] = "preset";
  GroupType3["data"] = "data";
  GroupType3["presets"] = "presets";
  GroupType3["cssCustomProperties"] = "cssCustomProperties";
  GroupType3["displayGroups"] = "displayGroups";
  GroupType3["background"] = "background";
  GroupType3["margin"] = "margin";
  GroupType3["padding"] = "padding";
  GroupType3["border"] = "border";
  GroupType3["borderTop"] = "borderTop";
  GroupType3["borderRight"] = "borderRight";
  GroupType3["borderBottom"] = "borderBottom";
  GroupType3["borderLeft"] = "borderLeft";
  GroupType3["borderRadius"] = "borderRadius";
  GroupType3["borderInlineStart"] = "borderInlineStart";
  GroupType3["borderInlineEnd"] = "borderInlineEnd";
  GroupType3["font"] = "font";
  GroupType3["textDecoration"] = "textDecoration";
  GroupType3["gap"] = "gap";
  GroupType3["text"] = "text";
  GroupType3["arrayItems"] = "arrayItems";
  GroupType3["arrayItem"] = "arrayItem";
  GroupType3["listItem"] = "listItem";
})(GroupType2 || (GroupType2 = {}));
var CssPropertyEnumCssPropertyType2;
(function(CssPropertyEnumCssPropertyType3) {
  CssPropertyEnumCssPropertyType3["UNKNOWN_CssPropertyType"] = "UNKNOWN_CssPropertyType";
  CssPropertyEnumCssPropertyType3["number"] = "number";
  CssPropertyEnumCssPropertyType3["string"] = "string";
  CssPropertyEnumCssPropertyType3["angle"] = "angle";
  CssPropertyEnumCssPropertyType3["length"] = "length";
  CssPropertyEnumCssPropertyType3["percentage"] = "percentage";
  CssPropertyEnumCssPropertyType3["lengthPercentage"] = "lengthPercentage";
  CssPropertyEnumCssPropertyType3["blendMode"] = "blendMode";
  CssPropertyEnumCssPropertyType3["customEnum"] = "customEnum";
  CssPropertyEnumCssPropertyType3["time"] = "time";
  CssPropertyEnumCssPropertyType3["background"] = "background";
  CssPropertyEnumCssPropertyType3["backgroundSize"] = "backgroundSize";
  CssPropertyEnumCssPropertyType3["backgroundColor"] = "backgroundColor";
  CssPropertyEnumCssPropertyType3["backgroundImage"] = "backgroundImage";
  CssPropertyEnumCssPropertyType3["backgroundClip"] = "backgroundClip";
  CssPropertyEnumCssPropertyType3["backgroundOrigin"] = "backgroundOrigin";
  CssPropertyEnumCssPropertyType3["backgroundPosition"] = "backgroundPosition";
  CssPropertyEnumCssPropertyType3["backgroundRepeat"] = "backgroundRepeat";
  CssPropertyEnumCssPropertyType3["backgroundAttachment"] = "backgroundAttachment";
  CssPropertyEnumCssPropertyType3["margin"] = "margin";
  CssPropertyEnumCssPropertyType3["marginTop"] = "marginTop";
  CssPropertyEnumCssPropertyType3["marginRight"] = "marginRight";
  CssPropertyEnumCssPropertyType3["marginBottom"] = "marginBottom";
  CssPropertyEnumCssPropertyType3["marginLeft"] = "marginLeft";
  CssPropertyEnumCssPropertyType3["marginInlineStart"] = "marginInlineStart";
  CssPropertyEnumCssPropertyType3["marginInlineEnd"] = "marginInlineEnd";
  CssPropertyEnumCssPropertyType3["padding"] = "padding";
  CssPropertyEnumCssPropertyType3["paddingTop"] = "paddingTop";
  CssPropertyEnumCssPropertyType3["paddingRight"] = "paddingRight";
  CssPropertyEnumCssPropertyType3["paddingBottom"] = "paddingBottom";
  CssPropertyEnumCssPropertyType3["paddingLeft"] = "paddingLeft";
  CssPropertyEnumCssPropertyType3["paddingInlineStart"] = "paddingInlineStart";
  CssPropertyEnumCssPropertyType3["paddingInlineEnd"] = "paddingInlineEnd";
  CssPropertyEnumCssPropertyType3["border"] = "border";
  CssPropertyEnumCssPropertyType3["borderWidth"] = "borderWidth";
  CssPropertyEnumCssPropertyType3["borderStyle"] = "borderStyle";
  CssPropertyEnumCssPropertyType3["borderColor"] = "borderColor";
  CssPropertyEnumCssPropertyType3["borderTop"] = "borderTop";
  CssPropertyEnumCssPropertyType3["borderTopColor"] = "borderTopColor";
  CssPropertyEnumCssPropertyType3["borderTopWidth"] = "borderTopWidth";
  CssPropertyEnumCssPropertyType3["borderTopStyle"] = "borderTopStyle";
  CssPropertyEnumCssPropertyType3["borderRight"] = "borderRight";
  CssPropertyEnumCssPropertyType3["borderRightColor"] = "borderRightColor";
  CssPropertyEnumCssPropertyType3["borderRightWidth"] = "borderRightWidth";
  CssPropertyEnumCssPropertyType3["borderRightStyle"] = "borderRightStyle";
  CssPropertyEnumCssPropertyType3["borderBottom"] = "borderBottom";
  CssPropertyEnumCssPropertyType3["borderBottomColor"] = "borderBottomColor";
  CssPropertyEnumCssPropertyType3["borderBottomWidth"] = "borderBottomWidth";
  CssPropertyEnumCssPropertyType3["borderBottomStyle"] = "borderBottomStyle";
  CssPropertyEnumCssPropertyType3["borderLeft"] = "borderLeft";
  CssPropertyEnumCssPropertyType3["borderLeftColor"] = "borderLeftColor";
  CssPropertyEnumCssPropertyType3["borderLeftWidth"] = "borderLeftWidth";
  CssPropertyEnumCssPropertyType3["borderLeftStyle"] = "borderLeftStyle";
  CssPropertyEnumCssPropertyType3["borderInlineStart"] = "borderInlineStart";
  CssPropertyEnumCssPropertyType3["borderInlineStartColor"] = "borderInlineStartColor";
  CssPropertyEnumCssPropertyType3["borderInlineStartWidth"] = "borderInlineStartWidth";
  CssPropertyEnumCssPropertyType3["borderInlineStartStyle"] = "borderInlineStartStyle";
  CssPropertyEnumCssPropertyType3["borderInlineEnd"] = "borderInlineEnd";
  CssPropertyEnumCssPropertyType3["borderInlineEndColor"] = "borderInlineEndColor";
  CssPropertyEnumCssPropertyType3["borderInlineEndWidth"] = "borderInlineEndWidth";
  CssPropertyEnumCssPropertyType3["borderInlineEndStyle"] = "borderInlineEndStyle";
  CssPropertyEnumCssPropertyType3["borderRadius"] = "borderRadius";
  CssPropertyEnumCssPropertyType3["borderTopLeftRadius"] = "borderTopLeftRadius";
  CssPropertyEnumCssPropertyType3["borderTopRightRadius"] = "borderTopRightRadius";
  CssPropertyEnumCssPropertyType3["borderBottomRightRadius"] = "borderBottomRightRadius";
  CssPropertyEnumCssPropertyType3["borderBottomLeftRadius"] = "borderBottomLeftRadius";
  CssPropertyEnumCssPropertyType3["borderStartStartRadius"] = "borderStartStartRadius";
  CssPropertyEnumCssPropertyType3["borderStartEndRadius"] = "borderStartEndRadius";
  CssPropertyEnumCssPropertyType3["borderEndStartRadius"] = "borderEndStartRadius";
  CssPropertyEnumCssPropertyType3["borderEndEndRadius"] = "borderEndEndRadius";
  CssPropertyEnumCssPropertyType3["font"] = "font";
  CssPropertyEnumCssPropertyType3["fontFamily"] = "fontFamily";
  CssPropertyEnumCssPropertyType3["fontSize"] = "fontSize";
  CssPropertyEnumCssPropertyType3["fontStretch"] = "fontStretch";
  CssPropertyEnumCssPropertyType3["fontStyle"] = "fontStyle";
  CssPropertyEnumCssPropertyType3["fontVariant"] = "fontVariant";
  CssPropertyEnumCssPropertyType3["fontWeight"] = "fontWeight";
  CssPropertyEnumCssPropertyType3["lineHeight"] = "lineHeight";
  CssPropertyEnumCssPropertyType3["color"] = "color";
  CssPropertyEnumCssPropertyType3["letterSpacing"] = "letterSpacing";
  CssPropertyEnumCssPropertyType3["writingMode"] = "writingMode";
  CssPropertyEnumCssPropertyType3["textAlign"] = "textAlign";
  CssPropertyEnumCssPropertyType3["textTransform"] = "textTransform";
  CssPropertyEnumCssPropertyType3["textShadow"] = "textShadow";
  CssPropertyEnumCssPropertyType3["textOverflow"] = "textOverflow";
  CssPropertyEnumCssPropertyType3["textIndent"] = "textIndent";
  CssPropertyEnumCssPropertyType3["textDecoration"] = "textDecoration";
  CssPropertyEnumCssPropertyType3["textDecorationColor"] = "textDecorationColor";
  CssPropertyEnumCssPropertyType3["textDecorationLine"] = "textDecorationLine";
  CssPropertyEnumCssPropertyType3["textDecorationStyle"] = "textDecorationStyle";
  CssPropertyEnumCssPropertyType3["textDecorationThickness"] = "textDecorationThickness";
  CssPropertyEnumCssPropertyType3["boxShadow"] = "boxShadow";
  CssPropertyEnumCssPropertyType3["opacity"] = "opacity";
  CssPropertyEnumCssPropertyType3["overflow"] = "overflow";
  CssPropertyEnumCssPropertyType3["display"] = "display";
  CssPropertyEnumCssPropertyType3["alignSelf"] = "alignSelf";
  CssPropertyEnumCssPropertyType3["justifyContent"] = "justifyContent";
  CssPropertyEnumCssPropertyType3["alignItems"] = "alignItems";
  CssPropertyEnumCssPropertyType3["flexDirection"] = "flexDirection";
  CssPropertyEnumCssPropertyType3["height"] = "height";
  CssPropertyEnumCssPropertyType3["width"] = "width";
  CssPropertyEnumCssPropertyType3["gap"] = "gap";
  CssPropertyEnumCssPropertyType3["columnGap"] = "columnGap";
  CssPropertyEnumCssPropertyType3["rowGap"] = "rowGap";
  CssPropertyEnumCssPropertyType3["filter"] = "filter";
  CssPropertyEnumCssPropertyType3["backdropFilter"] = "backdropFilter";
  CssPropertyEnumCssPropertyType3["objectFit"] = "objectFit";
  CssPropertyEnumCssPropertyType3["objectPosition"] = "objectPosition";
  CssPropertyEnumCssPropertyType3["mixBlendMode"] = "mixBlendMode";
  CssPropertyEnumCssPropertyType3["isolation"] = "isolation";
  CssPropertyEnumCssPropertyType3["stroke"] = "stroke";
  CssPropertyEnumCssPropertyType3["strokeWidth"] = "strokeWidth";
  CssPropertyEnumCssPropertyType3["strokeOpacity"] = "strokeOpacity";
  CssPropertyEnumCssPropertyType3["fill"] = "fill";
  CssPropertyEnumCssPropertyType3["fillOpacity"] = "fillOpacity";
})(CssPropertyEnumCssPropertyType2 || (CssPropertyEnumCssPropertyType2 = {}));
var InteractionsTrigger2;
(function(InteractionsTrigger3) {
  InteractionsTrigger3["UNKNOWN_TRIGGER"] = "UNKNOWN_TRIGGER";
  InteractionsTrigger3["hover"] = "hover";
  InteractionsTrigger3["click"] = "click";
  InteractionsTrigger3["viewEnter"] = "viewEnter";
  InteractionsTrigger3["pageVisible"] = "pageVisible";
  InteractionsTrigger3["viewProgress"] = "viewProgress";
  InteractionsTrigger3["pointerMove"] = "pointerMove";
  InteractionsTrigger3["animationEnd"] = "animationEnd";
})(InteractionsTrigger2 || (InteractionsTrigger2 = {}));
var EffectGroup2;
(function(EffectGroup3) {
  EffectGroup3["UNKNOWN_EFFECT_GROUP"] = "UNKNOWN_EFFECT_GROUP";
  EffectGroup3["background"] = "background";
})(EffectGroup2 || (EffectGroup2 = {}));
var RestrictionLevel2;
(function(RestrictionLevel3) {
  RestrictionLevel3["UNKNOWN_RESTRICTION_TYPE"] = "UNKNOWN_RESTRICTION_TYPE";
  RestrictionLevel3["WARNING"] = "WARNING";
  RestrictionLevel3["LOCKED"] = "LOCKED";
})(RestrictionLevel2 || (RestrictionLevel2 = {}));
var ElementDisplayOption2;
(function(ElementDisplayOption3) {
  ElementDisplayOption3["UNKNOWN_OPTION"] = "UNKNOWN_OPTION";
  ElementDisplayOption3["REMOVE"] = "REMOVE";
  ElementDisplayOption3["CUSTOMIZED"] = "CUSTOMIZED";
})(ElementDisplayOption2 || (ElementDisplayOption2 = {}));
var SidebarDataType2;
(function(SidebarDataType3) {
  SidebarDataType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  SidebarDataType3["CATEGORY"] = "CATEGORY";
  SidebarDataType3["PAGE"] = "PAGE";
  SidebarDataType3["SEPARATOR"] = "SEPARATOR";
})(SidebarDataType2 || (SidebarDataType2 = {}));
var SidebarEntityType2;
(function(SidebarEntityType3) {
  SidebarEntityType3["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  SidebarEntityType3["CATEGORY"] = "CATEGORY";
  SidebarEntityType3["PAGE"] = "PAGE";
  SidebarEntityType3["APP"] = "APP";
})(SidebarEntityType2 || (SidebarEntityType2 = {}));
var OperatorEnumOperator2;
(function(OperatorEnumOperator3) {
  OperatorEnumOperator3["UNKNOWN_OPERATOR"] = "UNKNOWN_OPERATOR";
  OperatorEnumOperator3["EQ"] = "EQ";
  OperatorEnumOperator3["NEQ"] = "NEQ";
  OperatorEnumOperator3["GT"] = "GT";
  OperatorEnumOperator3["GTE"] = "GTE";
  OperatorEnumOperator3["LT"] = "LT";
  OperatorEnumOperator3["LTE"] = "LTE";
  OperatorEnumOperator3["BETWEEN"] = "BETWEEN";
  OperatorEnumOperator3["IN"] = "IN";
  OperatorEnumOperator3["NIN"] = "NIN";
  OperatorEnumOperator3["EMPTY"] = "EMPTY";
  OperatorEnumOperator3["NOT_EMPTY"] = "NOT_EMPTY";
  OperatorEnumOperator3["STARTS_WITH"] = "STARTS_WITH";
  OperatorEnumOperator3["HAS_ALL"] = "HAS_ALL";
  OperatorEnumOperator3["HAS_SOME"] = "HAS_SOME";
  OperatorEnumOperator3["ANY"] = "ANY";
})(OperatorEnumOperator2 || (OperatorEnumOperator2 = {}));
var ParameterType2;
(function(ParameterType3) {
  ParameterType3["UNKNOWN_PARAMETER_TYPE"] = "UNKNOWN_PARAMETER_TYPE";
  ParameterType3["STRING"] = "STRING";
  ParameterType3["INT"] = "INT";
  ParameterType3["DECIMAL"] = "DECIMAL";
  ParameterType3["BOOL"] = "BOOL";
  ParameterType3["CURRENCY"] = "CURRENCY";
  ParameterType3["COUNTRY_SUBDIVISION"] = "COUNTRY_SUBDIVISION";
  ParameterType3["LANGUAGE"] = "LANGUAGE";
})(ParameterType2 || (ParameterType2 = {}));
var FilterValueDefinitionMode2;
(function(FilterValueDefinitionMode3) {
  FilterValueDefinitionMode3["UNKNOWN_FILTER_VALUE_DEFINITION_MODE"] = "UNKNOWN_FILTER_VALUE_DEFINITION_MODE";
  FilterValueDefinitionMode3["ANY_VALUE_OF_SPECIFIED_TYPE"] = "ANY_VALUE_OF_SPECIFIED_TYPE";
  FilterValueDefinitionMode3["ITEM_SELECTION"] = "ITEM_SELECTION";
  FilterValueDefinitionMode3["STRING_LIST"] = "STRING_LIST";
  FilterValueDefinitionMode3["INT_LIST"] = "INT_LIST";
  FilterValueDefinitionMode3["DECIMAL_LIST"] = "DECIMAL_LIST";
  FilterValueDefinitionMode3["BOOL_LIST"] = "BOOL_LIST";
  FilterValueDefinitionMode3["CURRENCY_LIST"] = "CURRENCY_LIST";
  FilterValueDefinitionMode3["COUNTRY_SUBDIVISION_LIST"] = "COUNTRY_SUBDIVISION_LIST";
  FilterValueDefinitionMode3["LANGUAGE_TAG_LIST"] = "LANGUAGE_TAG_LIST";
})(FilterValueDefinitionMode2 || (FilterValueDefinitionMode2 = {}));
var TimeConstraintType2;
(function(TimeConstraintType3) {
  TimeConstraintType3["UNKNOWN_TIME_CONSTRAINT_TYPE"] = "UNKNOWN_TIME_CONSTRAINT_TYPE";
  TimeConstraintType3["LAST_DAYS"] = "LAST_DAYS";
  TimeConstraintType3["LAST_HOURS"] = "LAST_HOURS";
  TimeConstraintType3["NEXT_DAYS"] = "NEXT_DAYS";
  TimeConstraintType3["NEXT_HOURS"] = "NEXT_HOURS";
  TimeConstraintType3["BETWEEN"] = "BETWEEN";
  TimeConstraintType3["TODAY"] = "TODAY";
  TimeConstraintType3["THIS_MONTH"] = "THIS_MONTH";
})(TimeConstraintType2 || (TimeConstraintType2 = {}));
var ValueConstraintType2;
(function(ValueConstraintType3) {
  ValueConstraintType3["UNKNOWN_VALUE_CONSTRAINT_TYPE"] = "UNKNOWN_VALUE_CONSTRAINT_TYPE";
  ValueConstraintType3["NONE"] = "NONE";
  ValueConstraintType3["PREDEFINED_VALUES"] = "PREDEFINED_VALUES";
  ValueConstraintType3["MIN_MAX_RANGE"] = "MIN_MAX_RANGE";
  ValueConstraintType3["RANGE"] = "RANGE";
})(ValueConstraintType2 || (ValueConstraintType2 = {}));
var RegionScopeScope2;
(function(RegionScopeScope3) {
  RegionScopeScope3["SPECIFIC_REGIONS"] = "SPECIFIC_REGIONS";
  RegionScopeScope3["WORLDWIDE"] = "WORLDWIDE";
})(RegionScopeScope2 || (RegionScopeScope2 = {}));
var VibeActionType2;
(function(VibeActionType3) {
  VibeActionType3["UNKNOWN_ActionType"] = "UNKNOWN_ActionType";
  VibeActionType3["OPEN_DASHBOARD"] = "OPEN_DASHBOARD";
  VibeActionType3["OPEN_CUSTOM_PANEL"] = "OPEN_CUSTOM_PANEL";
})(VibeActionType2 || (VibeActionType2 = {}));
var AssetType2;
(function(AssetType3) {
  AssetType3["UNKNOWN"] = "UNKNOWN";
  AssetType3["IMAGE"] = "IMAGE";
  AssetType3["VIDEO"] = "VIDEO";
  AssetType3["LOGO"] = "LOGO";
  AssetType3["EVENT"] = "EVENT";
  AssetType3["FORM"] = "FORM";
  AssetType3["PDF"] = "PDF";
})(AssetType2 || (AssetType2 = {}));
var SaleType;
(function(SaleType2) {
  SaleType2["UNKNOWN_SALE_TYPE"] = "UNKNOWN_SALE_TYPE";
  SaleType2["CYBER_MONDAY"] = "CYBER_MONDAY";
  SaleType2["NOVEMBER_SALE"] = "NOVEMBER_SALE";
  SaleType2["BLACK_FRIDAY"] = "BLACK_FRIDAY";
  SaleType2["DEVELOPER_SALE"] = "DEVELOPER_SALE";
})(SaleType || (SaleType = {}));
var DiscountType;
(function(DiscountType2) {
  DiscountType2["UNKNOWN_DISCOUNT_TYPE"] = "UNKNOWN_DISCOUNT_TYPE";
  DiscountType2["FIXED_AMOUNT"] = "FIXED_AMOUNT";
  DiscountType2["PERCENTAGE"] = "PERCENTAGE";
})(DiscountType || (DiscountType = {}));

// ../../node_modules/@wix/ambassador-devcenter-apps-v1-app-permission/build/es/http.impl.js
init_esm_shims();
var _appPermission = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
var _createAppPermissionRequest = { appPermission: "_appPermission" };
var _createAppPermissionResponse = { appPermission: "_appPermission" };
function resolveWixDevcenterAppsPermissionsV1AppPermissionsServiceUrl(opts) {
  var domainToMappings = {
    "dev._base_domain_": [
      {
        srcPath: "/app-permissions-service",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/app-permissions-service",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/app-permissions-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/apps/v1/app-permissions",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/app-permissions-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/app-permissions-service",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function createAppPermission(payload) {
  var _a = serializer(_createAppPermissionRequest, { _appPermission }), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_createAppPermissionResponse, {
    _appPermission
  }).fromJSON;
  function __createAppPermission(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.apps.v1.app_permission",
      method: "POST",
      methodFqn: "wix.devcenter.apps.permissions.v1.AppPermissionsService.CreateAppPermission",
      migrationOptions: {
        optInTransformResponse: true
      },
      url: resolveWixDevcenterAppsPermissionsV1AppPermissionsServiceUrl({
        protoPath: "/v1/app-permissions",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __createAppPermission.fromReq = fromReq;
  __createAppPermission.__isAmbassador = true;
  return __createAppPermission;
}

// ../../node_modules/@wix/ambassador-devcenter-v1-share-url/build/es/http.impl.js
init_esm_shims();
var _createShareUrlRequest = { shareUrl: "_shareUrl" };
var _createShareUrlResponse = { shareUrl: "_shareUrl" };
var _listShareUrlsRequest = {};
var _listShareUrlsResponse = { shareUrls: "_shareUrl" };
var _shareUrl = {
  createdDate: "google.protobuf.Timestamp",
  updatedDate: "google.protobuf.Timestamp"
};
function resolveWixDevcenterV1AppShareUrlServiceUrl(opts) {
  var domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/app-share-url-service",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_api/app-share-url-service",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/app-share-url-service",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function createShareUrl(payload) {
  var _a = serializer(_createShareUrlRequest, { _shareUrl }), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_createShareUrlResponse, {
    _shareUrl
  }).fromJSON;
  function __createShareUrl(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.v1.share_url",
      method: "POST",
      methodFqn: "wix.devcenter.v1.AppShareUrlService.CreateShareUrl",
      url: resolveWixDevcenterV1AppShareUrlServiceUrl({
        protoPath: "/v1/share-url",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: fromRes
    };
    return metadata;
  }
  __createShareUrl.fromReq = fromReq;
  __createShareUrl.__isAmbassador = true;
  return __createShareUrl;
}
function listShareUrls(payload) {
  var _a = serializer(_listShareUrlsRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
  var fromRes = serializer(_listShareUrlsResponse, {
    _shareUrl
  }).fromJSON;
  function __listShareUrls(_a2) {
    var host = _a2.host;
    var serializedData = toReq(payload);
    var metadata = {
      entityFqdn: "wix.devcenter.v1.share_url",
      method: "GET",
      methodFqn: "wix.devcenter.v1.AppShareUrlService.ListShareUrls",
      url: resolveWixDevcenterV1AppShareUrlServiceUrl({
        protoPath: "/v1/share-urls",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: fromRes
    };
    return metadata;
  }
  __listShareUrls.fromReq = fromReq;
  __listShareUrls.__isAmbassador = true;
  return __listShareUrls;
}

// ../../node_modules/@wix/ambassador-devcenter-v1-share-url/build/es/types.impl.js
init_esm_shims();
var ActivationStatus;
(function(ActivationStatus2) {
  ActivationStatus2["ENABLED"] = "ENABLED";
  ActivationStatus2["DISABLED"] = "DISABLED";
})(ActivationStatus || (ActivationStatus = {}));
var VersionType;
(function(VersionType2) {
  VersionType2["BEST_VERSION"] = "BEST_VERSION";
  VersionType2["LATEST_VERSION"] = "LATEST_VERSION";
  VersionType2["DEV_VERSION"] = "DEV_VERSION";
})(VersionType || (VersionType = {}));
var WebhookIdentityType2;
(function(WebhookIdentityType3) {
  WebhookIdentityType3["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType3["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType3["MEMBER"] = "MEMBER";
  WebhookIdentityType3["WIX_USER"] = "WIX_USER";
  WebhookIdentityType3["APP"] = "APP";
})(WebhookIdentityType2 || (WebhookIdentityType2 = {}));

// ../dev-center-client/src/schemas.ts
init_esm_shims();

// ../../node_modules/@wix/ambassador-devcenter-apps-v1-app-template/build/es/types.impl.js
init_esm_shims();
var DevelopmentTool;
(function(DevelopmentTool2) {
  DevelopmentTool2["UNKNOWN_TEMPLATE_TYPE"] = "UNKNOWN_TEMPLATE_TYPE";
  DevelopmentTool2["DEV_CENTER"] = "DEV_CENTER";
  DevelopmentTool2["BLOCKS"] = "BLOCKS";
  DevelopmentTool2["CLI"] = "CLI";
})(DevelopmentTool || (DevelopmentTool = {}));
var PackageManager;
(function(PackageManager2) {
  PackageManager2["UNKNOWN_PACKAGE_MANAGER"] = "UNKNOWN_PACKAGE_MANAGER";
  PackageManager2["NPM"] = "NPM";
  PackageManager2["YARN"] = "YARN";
})(PackageManager || (PackageManager = {}));
var DeploymentHostType;
(function(DeploymentHostType2) {
  DeploymentHostType2["UNKNOWN_DEPLOYMENT_HOST_TYPE"] = "UNKNOWN_DEPLOYMENT_HOST_TYPE";
  DeploymentHostType2["VERCEL"] = "VERCEL";
  DeploymentHostType2["NETLIFY"] = "NETLIFY";
})(DeploymentHostType || (DeploymentHostType = {}));
var NamespaceType;
(function(NamespaceType2) {
  NamespaceType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  NamespaceType2["ACCOUNT"] = "ACCOUNT";
  NamespaceType2["COMPANY"] = "COMPANY";
})(NamespaceType || (NamespaceType = {}));
var Status3;
(function(Status4) {
  Status4["ACTIVE"] = "ACTIVE";
  Status4["DEPRECATED"] = "DEPRECATED";
  Status4["ARCHIVED"] = "ARCHIVED";
})(Status3 || (Status3 = {}));
var AppType3;
(function(AppType4) {
  AppType4["SITE_APP"] = "SITE_APP";
  AppType4["API_KEY"] = "API_KEY";
  AppType4["VELO_APP"] = "VELO_APP";
  AppType4["PRIVATE_APP"] = "PRIVATE_APP";
  AppType4["HEADLESS"] = "HEADLESS";
  AppType4["FUNCTION_ACTIVATION_APP"] = "FUNCTION_ACTIVATION_APP";
})(AppType3 || (AppType3 = {}));
var CreatedByType;
(function(CreatedByType2) {
  CreatedByType2["USER"] = "USER";
  CreatedByType2["APP"] = "APP";
})(CreatedByType || (CreatedByType = {}));
var ShowConsentBehaviour;
(function(ShowConsentBehaviour2) {
  ShowConsentBehaviour2["DEFAULT_BEHAVIOUR"] = "DEFAULT_BEHAVIOUR";
  ShowConsentBehaviour2["SHOW_CONSENT"] = "SHOW_CONSENT";
  ShowConsentBehaviour2["SKIP_CONSENT"] = "SKIP_CONSENT";
})(ShowConsentBehaviour || (ShowConsentBehaviour = {}));
var RedirectTarget;
(function(RedirectTarget2) {
  RedirectTarget2["UNKNOWN_REDIRECT_TARGET"] = "UNKNOWN_REDIRECT_TARGET";
  RedirectTarget2["DASHBOARD"] = "DASHBOARD";
  RedirectTarget2["EDITOR"] = "EDITOR";
})(RedirectTarget || (RedirectTarget = {}));
var OpenButtonAction;
(function(OpenButtonAction2) {
  OpenButtonAction2["UNKNOWN_ACTION"] = "UNKNOWN_ACTION";
  OpenButtonAction2["OPEN_COMPONENT_ID"] = "OPEN_COMPONENT_ID";
})(OpenButtonAction || (OpenButtonAction = {}));

// ../dev-center-client/src/schemas.ts
var createAppSchema = external_exports.object({
  app: external_exports.object({
    id: external_exports.string()
  })
});
var createOAuthAppSchema = external_exports.object({
  oAuthApp: external_exports.object({
    id: external_exports.string()
  })
});
var topologySchema = external_exports.object({
  compId: external_exports.string(),
  compName: external_exports.string(),
  compType: external_exports.literal(ComponentType.TOPOLOGY),
  compData: external_exports.object({
    topology: external_exports.object({
      topology: external_exports.object({
        backendApiUrl: external_exports.string().min(1)
      })
    })
  })
}).passthrough();
var componentsSchema = external_exports.array(
  external_exports.discriminatedUnion("compType", [
    topologySchema,
    ...Object.values(ComponentType).filter((type) => type !== ComponentType.TOPOLOGY).map((type) => {
      return external_exports.object({
        compId: external_exports.string(),
        compName: external_exports.string().optional(),
        compData: external_exports.unknown(),
        compType: external_exports.literal(type)
      }).passthrough();
    })
  ])
);
var appByVersionSchema = external_exports.object({
  appId: external_exports.string(),
  data: external_exports.object({
    components: componentsSchema
  })
});
var appSecretsSchema = external_exports.object({
  appSecret: external_exports.string(),
  webhookPublicKey: external_exports.string()
});
var appSchema = external_exports.object({
  app: external_exports.object({
    appSecrets: appSecretsSchema
  })
});
var developmentSiteSchema = external_exports.object({
  id: external_exports.string(),
  siteName: external_exports.string()
}).transform(({ id, siteName }) => ({
  id,
  displayName: siteName.replaceAll("-", " "),
  viewUrl: ""
}));
var createDevelopmentSiteSchema = external_exports.object({
  developmentSite: developmentSiteSchema
});
var getDevelopmentSitesSchema = external_exports.object({
  developmentSites: external_exports.array(developmentSiteSchema)
});
var getDevelopmentSitesLimitSchema = external_exports.object({
  limit: external_exports.number()
});
var developerAppSchema = external_exports.object({
  id: external_exports.string(),
  appData: external_exports.object({
    appName: external_exports.string()
  })
});
var getDeveloperAppsSchema = external_exports.object({
  myApps: external_exports.array(developerAppSchema)
});
var requiredApp = external_exports.object({ id: external_exports.string(), name: external_exports.string() });
var queryAppSchema = external_exports.object({
  apps: external_exports.array(requiredApp)
});
var marketListingSchema = external_exports.object({
  id: external_exports.string(),
  appId: external_exports.string(),
  revision: external_exports.string(),
  languageCode: external_exports.string(),
  installationRequirement: external_exports.object({
    requiredApps: external_exports.array(
      external_exports.object({
        id: external_exports.string(),
        slug: external_exports.string()
      })
    )
  }).optional()
});
var managedAppsSchema = external_exports.object({
  managedApps: external_exports.array(
    external_exports.object({
      appId: external_exports.string(),
      installationDetails: external_exports.object({
        group: external_exports.nativeEnum(AppGroup),
        incompleteSetupReason: external_exports.nativeEnum(IncompleteSetupReason)
      })
    })
  )
});
var cliCLoneDataSchema = external_exports.object({
  repositoryUrl: external_exports.string(),
  pathInRepository: external_exports.string().optional()
});
var appTemplateSchema = external_exports.object({
  id: external_exports.string(),
  title: external_exports.string(),
  subtitle: external_exports.string(),
  developmentTools: external_exports.array(external_exports.nativeEnum(DevelopmentTool)),
  cliCloneData: cliCLoneDataSchema.optional()
});
var queryAppTemplateSchema = external_exports.object({
  appTemplates: external_exports.array(appTemplateSchema)
});
var cliAppTemplateSchema = appTemplateSchema.extend({
  cliCloneData: cliCLoneDataSchema
});
var shareUrlSchema = external_exports.object({
  versionType: external_exports.nativeEnum(VersionType),
  installationUrl: external_exports.string().url(),
  tinyInstallationUrl: external_exports.string().url().optional()
});
var createShareUrlSchema = external_exports.object({
  shareUrl: shareUrlSchema
});
var listShareUrlsSchema = external_exports.object({
  shareUrls: external_exports.array(shareUrlSchema)
});

// ../dev-center-client/src/dev-center-client.ts
var EMPTY_SITE_TEMPLATE = "24bafe8a-7c80-4b63-8a71-08752062f246";
var DevCenterClient = class {
  constructor(httpClient) {
    this.httpClient = httpClient;
    const { minRetryTimeout } = getTestOverrides();
    this.retryOptions = {
      retries: 3,
      minTimeout: minRetryTimeout,
      maxTimeout: 3 * 1e3
    };
  }
  retryOptions;
  addPermission = async ({
    appId,
    permissionId
  }) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(
          createAppPermission({
            appPermission: {
              appId,
              permission: {
                permissionId
              }
            }
          })
        ),
        this.retryOptions
      );
      return data;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToAddPermission(),
        cause: e
      });
    }
  };
  createApp = async (app) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(createApp({ app })),
        this.retryOptions
      );
      return createAppSchema.parse(data).app;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToCreateDevCenterApp(),
        cause: e
      });
    }
  };
  createOAuthApp = async (oAuthApp) => {
    try {
      const { data } = await this.httpClient.request(
        createOAuthApp({ oAuthApp })
      );
      return createOAuthAppSchema.parse(data).oAuthApp;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToCreateDevCenterOAuthApp(),
        cause: e
      });
    }
  };
  updateOAuthApp = async (oAuthApp) => {
    try {
      const { data } = await this.httpClient.request(
        updateOAuthApp({
          oAuthApp,
          mask: ["allowedDomains", "allowedRedirectUris"]
        })
      );
      return createOAuthAppSchema.parse(data).oAuthApp;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToUpdateDevCenterOAuthApp(),
        cause: e
      });
    }
  };
  getAppSecret = async (req) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(
          getApp({
            withSecrets: true,
            ...req
          })
        ),
        this.retryOptions
      );
      return appSchema.parse(data).app.appSecrets;
    } catch (e) {
      if (isHttpError(e) && e.response?.status === 403 && isHttpApplicationError(e) && e.response.data.details.applicationError.code === "PERMISSION_DENIED") {
        throw new CliError({
          code: CliErrorCode.DeniedPermissionToGetAppSecret(),
          cause: e
        });
      }
      throw new CliError({
        code: CliErrorCode.FailedToGetAppSecret(),
        cause: e
      });
    }
  };
  /**
   * This method is deprecated.
   */
  getAppByVersion = async ({
    appId,
    version = "latest"
  }) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(getAppByVersion({ appId, version })),
        this.retryOptions
      );
      return appByVersionSchema.parse(data);
    } catch (cause) {
      if (isHttpError(cause) && cause.response?.status === 404) {
        throw new CliError({
          code: CliErrorCode.AppForVersionNotFound({
            version
          }),
          cause
        });
      }
      throw new CliError({
        code: CliErrorCode.FailedToFetchAppForVersion(),
        cause
      });
    }
  };
  createDevSite = async () => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(
          createDevelopmentSite({
            templateId: EMPTY_SITE_TEMPLATE
          })
        ),
        this.retryOptions
      );
      return createDevelopmentSiteSchema.parse(data).developmentSite;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToCreateDevelopmentSite(),
        cause: e
      });
    }
  };
  getDevSites = async () => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(getDevelopmentSites({})),
        this.retryOptions
      );
      return getDevelopmentSitesSchema.parse(data).developmentSites;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToGetDevelopmentSites(),
        cause: e
      });
    }
  };
  getDevSitesCount = async () => {
    const developmentSites = await this.getDevSites();
    return developmentSites.length;
  };
  getDevSite = async (id) => {
    const developmentSites = await this.getDevSites();
    return developmentSites.find((site) => site.id === id) ?? null;
  };
  getDeveloperApps = async () => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(
          queryMyApps({
            query: {
              paging: {
                limit: 500
              }
            }
          })
        ),
        this.retryOptions
      );
      return getDeveloperAppsSchema.parse(data).myApps;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToGetDeveloperApps(),
        cause: e
      });
    }
  };
  getDevSitesLimit = async () => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(getDevelopmentSitesLimit({})),
        this.retryOptions
      );
      return getDevelopmentSitesLimitSchema.parse(data).limit;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToGetDevelopmentSitesLimit(),
        cause: e
      });
    }
  };
  getMarketListing = async (appId) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(
          queryMarketListing({
            query: {
              filter: {
                appId,
                languageCode: "en"
              }
            }
          })
        ),
        this.retryOptions
      );
      return data.marketListing?.[0] ? marketListingSchema.parse(data.marketListing[0]) : void 0;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToGetMarketListing(),
        cause: e
      });
    }
  };
  getRequiredAppIds = async (appId) => {
    try {
      const marketListing = await this.getMarketListing(appId);
      return marketListing?.installationRequirement?.requiredApps.map(
        ({ id }) => id
      ) ?? [];
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToGetRequiredApps(),
        cause: e
      });
    }
  };
  getRequiredApps = async (appId) => {
    const requiredAppIds = await this.getRequiredAppIds(appId);
    if (requiredAppIds.length === 0) {
      return [];
    }
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(
          queryApp({
            query: {
              filter: {
                id: {
                  $in: requiredAppIds
                }
              }
            }
          })
        ),
        this.retryOptions
      );
      return queryAppSchema.parse(data).apps;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToQueryApps(),
        cause: e
      });
    }
  };
  addRequiredApp = async ({
    appId,
    appIdToRequire
  }) => {
    try {
      const marketListing = await this.getMarketListing(appId);
      const appAlreadyRequired = marketListing?.installationRequirement?.requiredApps.some(
        (requiredApp2) => requiredApp2.id === appIdToRequire
      );
      if (marketListing && !appAlreadyRequired) {
        const newRequiredApps = [
          ...marketListing.installationRequirement?.requiredApps ?? [],
          {
            id: appIdToRequire,
            slug: appIdToRequire
          }
        ];
        await pRetry(
          () => this.httpClient.request(
            updateMarketListing({
              marketListing: {
                ...marketListing,
                appId,
                installationRequirement: {
                  requiredApps: newRequiredApps
                }
              },
              mask: ["installationRequirement.requiredApps"]
            })
          ),
          this.retryOptions
        );
      }
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToAddRequiredApp(),
        cause: e
      });
    }
  };
  queryCliAppTemplates = async () => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(listAppTemplates({})),
        this.retryOptions
      );
      const { appTemplates } = queryAppTemplateSchema.parse(data);
      return appTemplates.filter(
        (template) => template.developmentTools.includes(DevelopmentTool.CLI)
      ).map((template) => cliAppTemplateSchema.parse(template));
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToQueryCliAppTemplates(),
        cause: e
      });
    }
  };
  getCliAppTemplate = async (id) => {
    const cliAppTemplates = await this.queryCliAppTemplates();
    return cliAppTemplates.find((template) => template.id === id) ?? null;
  };
  createAppFromTemplate = async ({ templateId, name }, template) => {
    try {
      const { data } = await pRetry(() => {
        const createFromTemplate = template.developmentTools.includes(
          DevelopmentTool.BLOCKS
        ) ? createBlocksAppFromTemplate : createAppFromTemplate;
        return this.httpClient.request(
          createFromTemplate({
            templateId,
            templateConfig: { appInfo: { name } }
          })
        );
      }, this.retryOptions);
      return createAppSchema.parse(data).app;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToCreateDevCenterAppFromTemplate(),
        cause: e,
        info: { templateId }
      });
    }
  };
  getAppInstallationDetails = async (appId) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(managedApps({})),
        this.retryOptions
      );
      return managedAppsSchema.parse(data).managedApps.find((app) => app.appId === appId)?.installationDetails;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToGetAppInstallationDetails({ appId }),
        cause: e
      });
    }
  };
  isAppInstalled = async (appId) => {
    const installationDetails = await this.getAppInstallationDetails(appId);
    return installationDetails?.group === AppGroup.PENDING || installationDetails?.group === AppGroup.INSTALLED;
  };
  isAppInstalledInEditor = async (appId) => {
    const installationDetails = await this.getAppInstallationDetails(appId);
    return installationDetails?.group === AppGroup.INSTALLED && installationDetails.incompleteSetupReason !== IncompleteSetupReason.PENDING_EDITOR;
  };
  createShareUrl = async (shareUrl) => {
    try {
      const { data } = await this.httpClient.request(
        createShareUrl({
          shareUrl,
          disableExistingWithSameType: true,
          shareUrlIdParameter: ":shareUrlId",
          urlTemplate: "https://wix.com/app-market/test/:shareUrlId"
        })
      );
      return createShareUrlSchema.parse(data).shareUrl;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToCreateShareUrl(),
        cause: e
      });
    }
  };
  listShareUrls = async (appId) => {
    try {
      const { data } = await pRetry(
        () => this.httpClient.request(listShareUrls({ appId })),
        this.retryOptions
      );
      return listShareUrlsSchema.parse(data).shareUrls;
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToListShareUrls(),
        cause: e
      });
    }
  };
  resolveDevVersionShareUrl = async (appId) => {
    const shareUrls = await this.listShareUrls(appId);
    const devVersionShareUrl = shareUrls.find(
      (shareUrl) => shareUrl.versionType === VersionType.DEV_VERSION
    );
    if (devVersionShareUrl) {
      return devVersionShareUrl;
    }
    return this.createShareUrl({ appId, versionType: VersionType.DEV_VERSION });
  };
};

// ../dev-center-client/src/useDevCenterClient.ts
init_esm_shims();
var import_react14 = __toESM(require_react(), 1);
function useDevCenterClient() {
  const httpClient = useHttpClient({ type: "backoffice" });
  const client = (0, import_react14.useMemo)(() => new DevCenterClient(httpClient), [httpClient]);
  return usePanoramaMethodLogger(client);
}

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboard-plugin/generate.ts
init_esm_shims();
import path4 from "node:path";
import { randomUUID as randomUUID4 } from "node:crypto";
var DASHBOARD_PLUGIN_TEMPLATE = path4.resolve(
  __dirname,
  "../templates/astro/dashboard-plugin"
);
async function generateDashboardPlugin(projectFolder, extended, folder, title, importData) {
  const component = {
    compId: randomUUID4(),
    compType: ComponentType.BACK_OFFICE_EXTENSION_WIDGET,
    compName: title,
    compData: {
      backOfficeExtensionWidget: {
        hostingPlatform: BackOfficeHostingPlatforms.BUSINESS_MANAGER,
        extends: extended,
        title
      }
    }
  };
  const cwd = getExtensionPath(projectFolder, folder);
  const pluginConfigJSON = toJsonString(component, { spaces: 2 });
  return await componentGenerator({
    template: DASHBOARD_PLUGIN_TEMPLATE,
    projectFolder,
    cwd,
    data: {
      pluginConfigJSON,
      importData
    },
    importData
  });
}

// ../cli-astro-commands/src/components/GenerateCommand/MultipleAppRequirement.tsx
init_esm_shims();
var import_react15 = __toESM(require_react(), 1);
var import_variant5 = __toESM(require_lib(), 1);
var MultipleAppRequirement = ({
  requiredApps,
  onSubmit
}) => {
  const { status } = useAsync(async () => {
    onSubmit([]);
  }, []);
  return /* @__PURE__ */ import_react15.default.createElement(import_react15.default.Fragment, null, (0, import_variant5.match)(status, {
    Loading: () => null,
    Error: () => null,
    Success: () => {
      if (requiredApps.length === 0) {
        return null;
      }
      return /* @__PURE__ */ import_react15.default.createElement(Box_default, { marginBottom: 1 }, /* @__PURE__ */ import_react15.default.createElement(Notification, null, /* @__PURE__ */ import_react15.default.createElement(Box_default, { flexDirection: "column", gap: 1 }, /* @__PURE__ */ import_react15.default.createElement(Text, null, "Please verify that the following application is installed to enable use of the selected extension/plugin."), /* @__PURE__ */ import_react15.default.createElement(UnorderedList, { paddingLeft: 2 }, requiredApps.map((app) => /* @__PURE__ */ import_react15.default.createElement(UnorderedList.Item, { key: app.id }, /* @__PURE__ */ import_react15.default.createElement(Text, null, app.name)))))));
    }
  }));
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboard-plugin/DashboardPluginGeneratedNote.tsx
init_esm_shims();
var import_react16 = __toESM(require_react(), 1);
var DashboardPluginGeneratedNote = ({ generatedFiles }) => {
  return /* @__PURE__ */ import_react16.default.createElement(
    GenerationSuccessMessage,
    {
      extensionType: "dashboard plugin",
      generatedFiles,
      learnMoreUrl: "https://dev.wix.com/docs/go-headless"
    }
  );
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboard-plugin/DashboardPluginWizard.tsx
var docsLink = (externalId) => new URL(
  `?portalSlug=sdk&externalId=${externalId}&fallbackUri=/build-apps/develop-your-app/extensions/dashboard-extensions/dashboard-plugins/supported-wix-app-dashboard-pages/about-dashboard-page-slots&platform=CLI`,
  "https://dev.wix.com/_api/docs-redirect/by-external-id"
).href;
var DashboardPluginWizard = ({ slotsApp, pluginsMap }) => {
  const bi = useWixCliAstroBi();
  const { model } = useProjectModel();
  const { addRequiredApp } = useDevCenterClient();
  const { reportError } = useErrorReporter();
  const { getSdkSlotData: getSdkSlotData2 } = useExtensionDataClient();
  const [backofficeExtensionWidget, setBackofficeExtensionWidget] = (0, import_react17.useState)();
  const [folder, setFolder] = (0, import_react17.useState)();
  const [title, setTitle] = (0, import_react17.useState)();
  const [requireAppsIds, setRequireAppsIds] = (0, import_react17.useState)();
  const [finishedInstallation, setFinishedInstallation] = (0, import_react17.useState)(false);
  const defaultFolderName = (0, import_lodash3.kebabCase)(title);
  const validatePluginFolder = useValidation(
    createDashboardPluginValidation(model.projectFolder)
  );
  const generationTask = useGenerationTask(async () => {
    if (backofficeExtensionWidget && folder && title && requireAppsIds) {
      const requireAppId = requireAppsIds.at(0);
      if (requireAppId) {
        await addRequiredApp({
          appId: model.config.appId,
          appIdToRequire: requireAppId
        });
      }
      const sdkSlotData = await getSdkSlotData2({
        slotId: backofficeExtensionWidget.component.componentId,
        appId: slotsApp.appId
      }).catch((error) => {
        reportError(error);
      });
      return generateDashboardPlugin(
        model.projectFolder,
        backofficeExtensionWidget.component.componentId,
        folder,
        title,
        sdkSlotData?.importData
      );
    }
  }, [
    backofficeExtensionWidget?.component.componentId,
    folder,
    title,
    requireAppsIds
  ]);
  const { status } = useAsync(async () => {
    const backofficeExtensionWidgets = Object.values(
      slotsApp.backofficePages.reduce((extensionsByApps, backofficePage) => {
        extensionsByApps[backofficePage.component.componentId] ??= {
          title: backofficePage.component.data.backOfficePage.metaData?.title ?? backofficePage.component.name,
          items: []
        };
        for (const slotId of backofficePage.component.data.backOfficePage.slotIds) {
          const backofficeExtensionWidget2 = pluginsMap[slotId];
          if (backofficeExtensionWidget2) {
            extensionsByApps[backofficePage.component.componentId]?.items.push({
              title: backofficeExtensionWidget2.component.data.backOfficeExtensionContainer.slotData?.displayName ?? backofficeExtensionWidget2.component.name,
              description: backofficeExtensionWidget2.component.externalId ? /* @__PURE__ */ import_react17.default.createElement(Text, null, /* @__PURE__ */ import_react17.default.createElement(
                Link,
                {
                  url: docsLink(
                    backofficeExtensionWidget2.component.externalId
                  )
                },
                "read more"
              )) : null,
              key: backofficeExtensionWidget2.component.componentId,
              value: backofficeExtensionWidget2
            });
          }
        }
        return extensionsByApps;
      }, {})
    );
    for (const backofficeExtensionWidget2 of backofficeExtensionWidgets) {
      backofficeExtensionWidget2.items.sort(
        (a, b) => a.title.localeCompare(b.title)
      );
    }
    backofficeExtensionWidgets.sort((a, b) => a.title.localeCompare(b.title));
    return backofficeExtensionWidgets;
  }, []);
  const task = (0, import_react17.useMemo)(
    () => (0, import_variant6.match)(generationTask, {
      Success: ({ hasUpdatedDependencies, newFiles }) => {
        if (!hasUpdatedDependencies) {
          setFinishedInstallation(true);
        }
        return /* @__PURE__ */ import_react17.default.createElement(import_react17.default.Fragment, null, hasUpdatedDependencies && /* @__PURE__ */ import_react17.default.createElement(
          InstallDependencies,
          {
            onFinish: () => setFinishedInstallation(true)
          }
        ), finishedInstallation && backofficeExtensionWidget && /* @__PURE__ */ import_react17.default.createElement(
          DashboardPluginGeneratedNote,
          {
            backofficeExtensionWidget,
            generatedFiles: newFiles
          }
        ));
      },
      Loading: () => /* @__PURE__ */ import_react17.default.createElement(Spinner, { text: `Generating dashboard plugin...` }),
      Error: () => null,
      NotRequested: () => null
    }),
    [generationTask, finishedInstallation, backofficeExtensionWidget]
  );
  return (0, import_variant6.match)(status, {
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react17.default.createElement(Spinner, { text: "Loading..." }),
    Success: ({ result: backofficeExtensionWidgets }) => /* @__PURE__ */ import_react17.default.createElement(import_react17.default.Fragment, null, /* @__PURE__ */ import_react17.default.createElement(
      SelectGroupsInput,
      {
        label: "What would you like to extend?",
        info: /* @__PURE__ */ import_react17.default.createElement(Text, null, "Plugins let you extend Wix apps by embedding your UI inside dedicated slots within a dashboard page (", /* @__PURE__ */ import_react17.default.createElement(Link, { url: "https://wix.to/ZeCt07g" }, "read more"), ")"),
        hideScroll: true,
        groups: backofficeExtensionWidgets,
        onSubmit: (option) => {
          bi.cliFlowStepAnswered({
            question: "What would you like to extend?",
            questionKey: "generate_command.dashboard_plugin.what_to_extend",
            answer: option.title,
            additionalInfo: { extensionType: "dashboard plugin" }
          });
          setBackofficeExtensionWidget(option.value);
        }
      }
    ), backofficeExtensionWidget && /* @__PURE__ */ import_react17.default.createElement(
      MultipleAppRequirement,
      {
        appId: model.config.appId,
        requiredApps: slotsApp.requiredApps.map((requiredApp2) => ({
          id: requiredApp2.appId,
          name: requiredApp2.appName
        })),
        onSubmit: setRequireAppsIds
      }
    ), requireAppsIds && /* @__PURE__ */ import_react17.default.createElement(
      TextInput,
      {
        label: "Plugin title",
        placeholder: "My Plugin",
        onSubmit: (value) => {
          bi.cliFlowStepAnswered({
            question: "Plugin title",
            questionKey: "generate_command.dashboard_plugin.choose_title",
            answer: value,
            additionalInfo: { extensionType: "dashboard plugin" }
          });
          setTitle(value);
        }
      }
    ), title && /* @__PURE__ */ import_react17.default.createElement(
      TextInput,
      {
        label: "Plugin folder",
        placeholder: defaultFolderName,
        onSubmit: (folder2) => {
          bi.cliFlowStepAnswered({
            question: "Plugin folder",
            questionKey: "generate_command.dashboard_plugin.choose_folder",
            answer: folder2,
            additionalInfo: { extensionType: "dashboard plugin" }
          });
          setFolder(folder2);
        },
        validate: validatePluginFolder
      }
    ), task)
  });
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboad-menu-plugin/DashboardMenuPluginWizard.tsx
init_esm_shims();
var import_react22 = __toESM(require_react(), 1);
var import_variant9 = __toESM(require_lib(), 1);
var import_lodash4 = __toESM(require_lodash(), 1);

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboad-menu-plugin/generate.ts
init_esm_shims();
import path5 from "node:path";
import { randomUUID as randomUUID5 } from "node:crypto";
var DASHBOARD_MENU_PLUGIN_TEMPLATE = path5.resolve(
  __dirname,
  "../templates/astro/dashboard-menu-plugin"
);
async function generateDashboardMenuPlugin(projectFolder, extended, action, folder, title) {
  const component = {
    compId: randomUUID5(),
    compType: ComponentType.BACK_OFFICE_EXTENSION_MENU_ITEM,
    compName: folder,
    compData: {
      backOfficeExtensionMenuItem: {
        hostingPlatform: BackOfficeHostingPlatforms.BUSINESS_MANAGER,
        title,
        iconKey: "Sparkles",
        extends: extended,
        action
      }
    }
  };
  const cwd = getExtensionPath(projectFolder, folder);
  const menuPluginConfigJSON = toJsonString(component, { spaces: 2 });
  return await componentGenerator({
    template: DASHBOARD_MENU_PLUGIN_TEMPLATE,
    projectFolder,
    cwd,
    data: {
      menuPluginConfigJSON
    }
  });
}

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboad-menu-plugin/NavigateToPage.tsx
init_esm_shims();
var import_react19 = __toESM(require_react(), 1);
var import_variant7 = __toESM(require_lib(), 1);

// ../cli-astro-commands/src/components/extensions/useExtensions.tsx
init_esm_shims();
var import_react18 = __toESM(require_react(), 1);
function useExtensions() {
  const { model } = useProjectModel();
  const getExtensions = (0, import_react18.useCallback)(
    (extensionType) => model.components.filter(
      (component) => component.compType === extensionType
    ),
    [model.components]
  );
  return {
    getExtensions
  };
}

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboad-menu-plugin/NavigateToPage.tsx
var NavigateToPageOption = (0, import_variant7.variant)({
  Page: (0, import_variant7.fields)(),
  Other: {}
});
var NavigateToPage = ({ onActionSelected }) => {
  const bi = useWixCliAstroBi();
  const [pageId, setPageId] = (0, import_react19.useState)();
  const [shouldUseCustomPageId, setShouldUseCustomPageId] = (0, import_react19.useState)(false);
  const { getExtensions } = useExtensions();
  const dashboardPages = getExtensions(ComponentType.BACK_OFFICE_PAGE);
  const validatePageId = useValidation(
    composeValidations([
      [uuidValidation, "Page id has to be in the format of a uuid"]
    ])
  );
  (0, import_react19.useEffect)(() => {
    if (pageId) {
      onActionSelected({
        navigateToPage: {
          pageId
        }
      });
    }
  }, [pageId, onActionSelected]);
  return /* @__PURE__ */ import_react19.default.createElement(import_react19.default.Fragment, null, /* @__PURE__ */ import_react19.default.createElement(
    SelectInput,
    {
      label: "Choose a page the menu item will navigate to:",
      info: "Choose from a list of available pages in your project or manually add a page from a different app",
      options: [
        ...dashboardPages.map(({ compId, compData }) => ({
          key: compId,
          title: compData.backOfficePage.title,
          value: NavigateToPageOption.Page({ pageId: compId })
        })),
        {
          key: "other",
          title: "Use a page from a different app",
          value: NavigateToPageOption.Other()
        }
      ],
      onSubmit: (option) => {
        bi.cliFlowStepAnswered({
          question: "Choose a page the menu item will navigate to:",
          questionKey: "generate_command.dashboard_menu_plugin.what_to_do.navigate_to_page.choose_page",
          answer: option.title
        });
        return (0, import_variant7.match)(option.value, {
          Page: ({ pageId: pageId2 }) => setPageId(pageId2),
          Other: () => setShouldUseCustomPageId(true)
        });
      }
    }
  ), shouldUseCustomPageId && /* @__PURE__ */ import_react19.default.createElement(
    TextInput,
    {
      label: "What is the unique id of the page?",
      onSubmit: (pageId2) => {
        bi.cliFlowStepAnswered({
          question: "What is the unique id of the page?",
          questionKey: "generate_command.dashboard_menu_plugin.what_to_do.navigate_to_page.choose_page.other.choose_page_id",
          answer: pageId2
        });
        setPageId(pageId2);
      },
      validate: validatePageId
    }
  ));
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboad-menu-plugin/OpenModal.tsx
init_esm_shims();
var import_react20 = __toESM(require_react(), 1);
var import_variant8 = __toESM(require_lib(), 1);
var OpenModalOption = (0, import_variant8.variant)({
  Component: (0, import_variant8.fields)(),
  Other: {}
});
var OpenModal = ({ onActionSelected }) => {
  const bi = useWixCliAstroBi();
  const { getExtensions } = useExtensions();
  const [componentId, setComponentId] = (0, import_react20.useState)();
  const [shouldUseCustomComponentId, setShouldUseCustomComponentId] = (0, import_react20.useState)(false);
  const dashboardModals = getExtensions(ComponentType.BACK_OFFICE_MODAL);
  const validateComponentId = useValidation(
    composeValidations([
      [uuidValidation, "Modal id has to be in the format of a uuid"]
    ])
  );
  (0, import_react20.useEffect)(() => {
    if (componentId) {
      onActionSelected({
        openModal: {
          componentId
        }
      });
    }
  }, [componentId, onActionSelected]);
  return /* @__PURE__ */ import_react20.default.createElement(import_react20.default.Fragment, null, /* @__PURE__ */ import_react20.default.createElement(
    SelectInput,
    {
      label: "Choose the modal to open:",
      info: "Choose from a list of available modals in your project or manually add a modal from a different app",
      options: [
        ...dashboardModals.map(({ compId, compData }) => ({
          key: compId,
          title: compData.backOfficeModal.title ?? "",
          value: OpenModalOption.Component({ componentId: compId })
        })),
        {
          key: "other",
          title: "Use a modal from a different app",
          value: OpenModalOption.Other()
        }
      ],
      onSubmit: (option) => {
        bi.cliFlowStepAnswered({
          question: "Choose the modal to open:",
          questionKey: "generate_command.dashboard_menu_plugin.what_to_do.open_modal.choose_component",
          answer: option.title
        });
        return (0, import_variant8.match)(option.value, {
          Component: ({ componentId: componentId2 }) => setComponentId(componentId2),
          Other: () => setShouldUseCustomComponentId(true)
        });
      }
    }
  ), shouldUseCustomComponentId && /* @__PURE__ */ import_react20.default.createElement(
    TextInput,
    {
      label: "What is the unique id of the modal?",
      onSubmit: (componentId2) => {
        bi.cliFlowStepAnswered({
          question: "What is the unique id of the modal?",
          questionKey: "generate_command.dashboard_menu_plugin.what_to_do.navigate_to_page.choose_page.other.choose_page_id",
          answer: componentId2
        });
        setComponentId(componentId2);
      },
      validate: validateComponentId
    }
  ));
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboad-menu-plugin/DashboardMenuPluginGeneratedNote.tsx
init_esm_shims();
var import_react21 = __toESM(require_react(), 1);
var DashboardMenuPluginGeneratedNote = ({ generatedFiles }) => {
  return /* @__PURE__ */ import_react21.default.createElement(Box_default, { flexDirection: "column" }, /* @__PURE__ */ import_react21.default.createElement(
    GenerationSuccessMessage,
    {
      extensionType: "dashboard menu plugin",
      generatedFiles,
      learnMoreUrl: "https://dev.wix.com/docs/go-headless"
    }
  ));
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/dashboad-menu-plugin/DashboardMenuPluginWizard.tsx
var DashboardMenuPluginAction = (0, import_variant9.variant)({
  NavigateToPage: {},
  OpenModal: {}
});
var docsLink2 = (externalId) => new URL(
  `?portalSlug=sdk&externalId=${externalId}&fallbackUri=/build-apps/develop-your-app/extensions/dashboard-extensions/dashboard-plugins/dashboard-menu-plugins/dashboard-menu-plugin-extensions&platform=CLI`,
  "https://dev.wix.com/_api/docs-redirect/by-external-id"
).href;
var DashboardMenuPluginWizard = ({ slotsApp, pluginsMap }) => {
  const bi = useWixCliAstroBi();
  const { model } = useProjectModel();
  const { addRequiredApp } = useDevCenterClient();
  const [backofficeMenuItem, setBackofficeMenuItem] = (0, import_react22.useState)();
  const [actionType, setActionType] = (0, import_react22.useState)();
  const [requireAppsIds, setRequireAppsIds] = (0, import_react22.useState)();
  const [action, setAction] = (0, import_react22.useState)();
  const [folder, setFolder] = (0, import_react22.useState)();
  const [title, setTitle] = (0, import_react22.useState)();
  const [finishedInstallation, setFinishedInstallation] = (0, import_react22.useState)(false);
  const defaultFolderName = (0, import_lodash4.kebabCase)(title);
  const [additionalInfo, setAdditionalInfo] = (0, import_react22.useState)();
  const validateMenuPluginFolder = useValidation(
    createDashboardMenuPluginValidation(model.projectFolder)
  );
  const generationTask = useGenerationTask(async () => {
    if (backofficeMenuItem && action && folder && title && requireAppsIds) {
      const requireAppId = requireAppsIds.at(0);
      if (requireAppId) {
        await addRequiredApp({
          appId: model.config.appId,
          appIdToRequire: requireAppId
        });
      }
      return generateDashboardMenuPlugin(
        model.projectFolder,
        backofficeMenuItem.component.componentId,
        action,
        folder,
        title
      );
    }
  }, [backofficeMenuItem, action, folder, title]);
  const handleActionSelected = (0, import_react22.useCallback)(
    (action2) => setAction(action2),
    []
  );
  const { status } = useAsync(async () => {
    const backofficeExtensionWidgets = Object.values(
      slotsApp.backofficePages.reduce((extensionsByPages, backofficePage) => {
        extensionsByPages[backofficePage.component.componentId] ??= {
          title: backofficePage.component.data.backOfficePage.metaData?.title ?? backofficePage.component.name,
          items: []
        };
        for (const slotId of backofficePage.component.data.backOfficePage.slotIds) {
          const backofficeMenuItem2 = pluginsMap[slotId];
          if (backofficeMenuItem2) {
            extensionsByPages[backofficePage.component.componentId]?.items.push(
              {
                title: backofficeMenuItem2.component.data.backOfficeExtensionContainer.slotData?.displayName ?? backofficeMenuItem2.component.name,
                description: backofficeMenuItem2.component.externalId ? /* @__PURE__ */ import_react22.default.createElement(Text, null, /* @__PURE__ */ import_react22.default.createElement(
                  Link,
                  {
                    url: docsLink2(backofficeMenuItem2.component.externalId)
                  },
                  "read more"
                )) : null,
                key: backofficeMenuItem2.component.componentId,
                value: backofficeMenuItem2
              }
            );
          }
        }
        return extensionsByPages;
      }, {})
    );
    for (const backofficeExtensionWidget of backofficeExtensionWidgets) {
      backofficeExtensionWidget.items.sort(
        (a, b) => a.title.localeCompare(b.title)
      );
    }
    backofficeExtensionWidgets.sort((a, b) => a.title.localeCompare(b.title));
    return backofficeExtensionWidgets;
  }, []);
  const task = (0, import_react22.useMemo)(
    () => (0, import_variant9.match)(generationTask, {
      Success: ({ hasUpdatedDependencies, newFiles }) => {
        if (!hasUpdatedDependencies) {
          setFinishedInstallation(true);
        }
        return /* @__PURE__ */ import_react22.default.createElement(import_react22.default.Fragment, null, hasUpdatedDependencies && /* @__PURE__ */ import_react22.default.createElement(
          InstallDependencies,
          {
            onFinish: () => setFinishedInstallation(true)
          }
        ), finishedInstallation && backofficeMenuItem && /* @__PURE__ */ import_react22.default.createElement(
          DashboardMenuPluginGeneratedNote,
          {
            backofficeMenuItem,
            generatedFiles: newFiles
          }
        ));
      },
      Loading: () => /* @__PURE__ */ import_react22.default.createElement(Spinner, { text: `Generating dashboard menu plugin...` }),
      Error: () => null,
      NotRequested: () => null
    }),
    [
      generationTask,
      setFinishedInstallation,
      finishedInstallation,
      backofficeMenuItem
    ]
  );
  return (0, import_variant9.match)(status, {
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react22.default.createElement(Spinner, { text: "Loading..." }),
    Success: ({ result: menuItemsGroups }) => /* @__PURE__ */ import_react22.default.createElement(import_react22.default.Fragment, null, /* @__PURE__ */ import_react22.default.createElement(
      SelectGroupsInput,
      {
        label: "What would you like to extend?",
        hideScroll: true,
        info: /* @__PURE__ */ import_react22.default.createElement(Text, null, "Menu Plugins let you extend Wix apps by adding a menu item in a pre-defined slot in a menu on a dashboard page (", /* @__PURE__ */ import_react22.default.createElement(Link, { url: "https://wix.to/h8AJ7f5" }, "read more"), ")"),
        groups: menuItemsGroups,
        onSubmit: (item) => {
          const additionalInfoOfSelectedItem = {
            category: slotsApp.appName,
            extensionName: item.value.component.name,
            extensionType: "dashboard menu plugin"
          };
          bi.cliFlowStepAnswered({
            question: "What would you like to extend?",
            questionKey: "generate_command.dashboard_menu_plugin.what_to_extend",
            answer: item.title,
            additionalInfo: additionalInfoOfSelectedItem
          });
          setAdditionalInfo(additionalInfoOfSelectedItem);
          setBackofficeMenuItem(item.value);
        }
      }
    ), backofficeMenuItem && /* @__PURE__ */ import_react22.default.createElement(
      MultipleAppRequirement,
      {
        appId: model.config.appId,
        requiredApps: slotsApp.requiredApps.map((requiredApp2) => ({
          id: requiredApp2.appId,
          name: requiredApp2.appName
        })),
        onSubmit: setRequireAppsIds
      }
    ), requireAppsIds && /* @__PURE__ */ import_react22.default.createElement(
      SelectInput,
      {
        label: "What action will happen after clicking on the menu item?",
        options: [
          {
            key: "navigate-to-page",
            title: "Navigate to a page",
            value: DashboardMenuPluginAction.NavigateToPage()
          },
          {
            key: "open-modal",
            title: "Open a modal",
            value: DashboardMenuPluginAction.OpenModal()
          }
        ],
        onSubmit: (action2) => {
          bi.cliFlowStepAnswered({
            question: "What action will happen after clicking on the menu item?",
            questionKey: "generate_command.dashboard_menu_plugin.what_to_do",
            answer: action2.title,
            additionalInfo
          });
          setActionType(action2.value);
        }
      }
    ), actionType && (0, import_variant9.match)(actionType, {
      NavigateToPage: () => /* @__PURE__ */ import_react22.default.createElement(NavigateToPage, { onActionSelected: handleActionSelected }),
      OpenModal: () => /* @__PURE__ */ import_react22.default.createElement(OpenModal, { onActionSelected: handleActionSelected })
    }), action && /* @__PURE__ */ import_react22.default.createElement(
      TextInput,
      {
        label: "Menu Plugin title",
        placeholder: "My Plugin",
        onSubmit: (value) => {
          bi.cliFlowStepAnswered({
            question: "Menu Plugin title",
            questionKey: "generate_command.dashboard_menu_plugin.choose_title",
            answer: value,
            additionalInfo
          });
          setTitle(value);
        }
      }
    ), title && /* @__PURE__ */ import_react22.default.createElement(
      TextInput,
      {
        label: "Menu Plugin folder",
        placeholder: defaultFolderName,
        onSubmit: (folder2) => {
          bi.cliFlowStepAnswered({
            question: "Menu Plugin folder",
            questionKey: "generate_command.dashboard_menu_plugin.choose_folder",
            answer: folder2,
            additionalInfo
          });
          setFolder(folder2);
        },
        validate: validateMenuPluginFolder
      }
    ), task)
  });
};

// ../cli-astro-commands/src/components/GenerateCommand/plugins/DashboardPlugin.tsx
var DashboardPlugin = ({ flow }) => {
  const bi = useWixCliAstroBi();
  const {
    getBackofficePages,
    getBackofficeExtensionWidgets,
    getBackofficeMenuItems
  } = useExtensionDataClient();
  const [slotsApp, setSlotsApp] = (0, import_react23.useState)();
  const { status } = useAsync(async () => {
    const [ecomRequiredApps2, backofficePages, backofficeExtensionContainers] = await Promise.all([
      getEcomRequiredApps(),
      getBackofficePages(),
      (0, import_variant10.match)(
        flow,
        (0, import_variant10.partial)({
          DashboardPlugin: () => getBackofficeExtensionWidgets(),
          DashboardMenuPlugin: () => getBackofficeMenuItems(),
          default: () => []
        })
      )
    ]);
    const pluginsMap = backofficeExtensionContainers.reduce((extensionContainersMap, backofficeExtensionContainer) => {
      extensionContainersMap[backofficeExtensionContainer.component.componentId] = backofficeExtensionContainer;
      return extensionContainersMap;
    }, {});
    const supportedAppsMap = backofficePages.reduce((acc, backofficePage) => {
      const shouldAddBackofficePage = backofficePage.component.data.backOfficePage.slotIds.some(
        (slotId) => !!pluginsMap[slotId]
      );
      if (shouldAddBackofficePage) {
        const requiredApps = ecomRequiredApps2.appId === backofficePage.appId ? ecomRequiredApps2.requiredApps : [
          {
            appId: backofficePage.appId,
            appName: backofficePage.appName
          }
        ];
        acc[backofficePage.appId] ??= {
          key: backofficePage.appId,
          title: backofficePage.appName,
          value: {
            requiredApps,
            backofficePages: [],
            appName: backofficePage.appName,
            appId: backofficePage.appId
          }
        };
        acc[backofficePage.appId]?.value.backofficePages.push(backofficePage);
      }
      return acc;
    }, {});
    const supportedApps = Object.values(supportedAppsMap).sort(
      (a, b) => a.title.localeCompare(b.title)
    );
    return {
      supportedApps,
      pluginsMap
    };
  }, []);
  return (0, import_variant10.match)(status, {
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react23.default.createElement(Spinner, { text: "Loading..." }),
    Success: ({ result: { supportedApps, pluginsMap } }) => /* @__PURE__ */ import_react23.default.createElement(import_react23.default.Fragment, null, /* @__PURE__ */ import_react23.default.createElement(
      SelectInput,
      {
        label: "Select a Wix app to view its plugin slots",
        info: /* @__PURE__ */ import_react23.default.createElement(Text, null, "(", /* @__PURE__ */ import_react23.default.createElement(Link, { url: "https://wix.to/QUp5DLl" }, "read more"), ")"),
        options: supportedApps,
        onSubmit: (option) => {
          bi.cliFlowStepAnswered({
            question: "Select a Wix app to view its plugin slots",
            questionKey: "generate_command.dashboard.plugin_app",
            answer: option.title,
            additionalInfo: {
              appId: option.value.appId,
              appName: option.value.appName
            }
          });
          setSlotsApp(option.value);
        }
      }
    ), slotsApp && (0, import_variant10.match)(
      flow,
      (0, import_variant10.partial)({
        DashboardPlugin: () => /* @__PURE__ */ import_react23.default.createElement(
          DashboardPluginWizard,
          {
            slotsApp,
            pluginsMap: Object.fromEntries(
              Object.entries(pluginsMap).filter(
                ([, plugin]) => plugin.appId === slotsApp.appId
              )
            )
          }
        ),
        DashboardMenuPlugin: () => /* @__PURE__ */ import_react23.default.createElement(
          DashboardMenuPluginWizard,
          {
            slotsApp,
            pluginsMap: Object.fromEntries(
              Object.entries(pluginsMap).filter(
                ([, plugin]) => plugin.appId === slotsApp.appId
              )
            )
          }
        ),
        default: () => null
      })
    ))
  });
};

// ../cli-astro-commands/src/components/GenerateCommand/event/Event.tsx
init_esm_shims();
var import_react25 = __toESM(require_react(), 1);

// ../cli-astro-commands/src/components/GenerateCommand/event/generate.ts
init_esm_shims();
import path6 from "node:path";
import { randomUUID as randomUUID6 } from "node:crypto";
var EVENT_TEMPLATE = path6.resolve(__dirname, "../templates/astro/event");
async function generateEvent(projectFolder, folderName) {
  const component = {
    compName: "wix.contacts.v4.contact_created",
    compId: randomUUID6(),
    compType: ComponentType.WEBHOOK,
    compData: {
      webhook: {
        webhookSlug: "wix.contacts.v4.contact_created"
      }
    }
  };
  const eventConfigJSON = toJsonString(component, { spaces: 2 });
  const cwd = getExtensionPath(projectFolder, folderName);
  return await componentGenerator({
    template: EVENT_TEMPLATE,
    cwd,
    projectFolder,
    data: {
      eventConfigJSON
    }
  });
}

// ../cli-astro-commands/src/components/GenerateCommand/event/steps.tsx
init_esm_shims();
var import_react24 = __toESM(require_react(), 1);
var ChooseFolderStep2 = ({ onSubmit, eventFolder }) => {
  const { model } = useProjectModel();
  const bi = useWixCliAstroBi();
  const { isActive, goToNextStep } = useWizardStep();
  const validateEventFolder = useValidation(
    composeValidations([
      [
        pathValidation,
        "Event name must be unique, can not include special characters or spaces, and must be shorter than 20 characters"
      ],
      [
        pathAvailableValidation(model.projectFolder),
        "Event name must be unique, can not include special characters or spaces, and must be shorter than 20 characters"
      ]
    ])
  );
  return /* @__PURE__ */ import_react24.default.createElement(
    TextInput,
    {
      isActive,
      label: "Event folder:",
      placeholder: eventFolder ?? "my-event",
      onSubmit: (value) => {
        bi.cliFlowStepAnswered({
          question: "Event folder:",
          questionKey: "generate_command.event.choose_folder",
          answer: value
        });
        onSubmit(value);
        goToNextStep();
      },
      validate: validateEventFolder
    }
  );
};

// ../cli-astro-commands/src/components/GenerateCommand/event/Event.tsx
var useGenerateEvent = () => {
  const { model } = useProjectModel();
  const [eventFolder, setEventFolder] = (0, import_react25.useState)();
  const generationTask = useGenerationTask(async () => {
    if (eventFolder) {
      return generateEvent(model.projectFolder, eventFolder);
    }
  }, [model.projectFolder, eventFolder]);
  return [
    /* @__PURE__ */ import_react25.default.createElement(ChooseFolderStep2, { onSubmit: setEventFolder, eventFolder }),
    /* @__PURE__ */ import_react25.default.createElement(
      CompleteGeneration,
      {
        generationTask,
        extensionType: "event",
        successMessage: CompleteGenerationMessage.SuccessMessage({
          learnMoreUrl: "https://dev.wix.com/docs/go-headless"
        }),
        route: eventFolder
      }
    )
  ];
};

// ../cli-astro-commands/src/components/GenerateCommand/GenerateCommand.tsx
var DevCenterGenerateFlow = (0, import_variant11.variant)({
  DashboardPage: {},
  DashboardPlugin: {},
  DashboardMenuPlugin: {},
  DashboardModal: {},
  Event: {},
  ServicePlugin: {}
});
var FlowSelector = ({ onSubmit, generateFlow, generateFlows }) => {
  const bi = useWixCliAstroBi();
  const { goToNextStep, isActive } = useWizardStep();
  const selectFlow = (0, import_react26.useCallback)(
    (selectedType) => {
      bi.cliFlowStepAnswered({
        question: "What kind of extension would you like to generate?",
        questionKey: "generate_command.flow.choose_flow",
        answer: selectedType.title
      });
      onSubmit(selectedType);
      goToNextStep();
    },
    [bi, onSubmit, goToNextStep]
  );
  (0, import_react26.useEffect)(() => {
    goToNextStep();
  }, []);
  return /* @__PURE__ */ import_react26.default.createElement(
    SelectGroupsInput,
    {
      value: !isActive ? InputState.Submitted(generateFlow) : InputState.NotSubmitted(generateFlow),
      label: "What kind of extension would you like to generate?",
      groups: generateFlows,
      onSubmit: selectFlow,
      maxHeight: 15
    }
  );
};
var GenerateCommand = () => {
  const bi = useWixCliAstroBi();
  const dashboardPageSteps = useGenerateDashboardPage();
  const dashboardModalSteps = useGenerateDashboardModal();
  const generateEventsSteps = useGenerateEvent();
  const generateServicePluginSteps = useGenerateServicePlugin();
  const [generateFlow, setGenerateFlow] = (0, import_react26.useState)();
  const generateFlows = (0, import_react26.useMemo)(
    () => [
      {
        title: "Dashboard",
        items: [
          {
            key: "dashboard-page",
            title: "Dashboard Page",
            value: DevCenterGenerateFlow.DashboardPage()
          },
          {
            key: "dashboard-modal",
            title: "Dashboard Modal",
            value: DevCenterGenerateFlow.DashboardModal()
          },
          {
            key: "dashboard-plugin",
            title: "Dashboard Plugin",
            value: DevCenterGenerateFlow.DashboardPlugin()
          },
          {
            key: "dashboard-menu-plugin",
            title: "Dashboard Menu Plugin",
            value: DevCenterGenerateFlow.DashboardMenuPlugin()
          }
        ]
      },
      {
        title: "Backend",
        items: [
          {
            key: "event",
            title: "Event",
            value: DevCenterGenerateFlow.Event()
          },
          {
            key: "service-plugin",
            title: "Service Plugin",
            value: DevCenterGenerateFlow.ServicePlugin()
          }
        ]
      }
    ],
    []
  );
  const selectFlow = (0, import_react26.useCallback)(
    (selectedType) => {
      bi.cliFlowStepAnswered({
        question: "What kind of extension would you like to generate?",
        questionKey: "generate_command.flow.choose_flow",
        answer: selectedType.title
      });
      setGenerateFlow(selectedType);
    },
    [bi]
  );
  const shouldEditFlow = (0, import_variant11.isType)(generateFlow?.value, "DashboardPage") || (0, import_variant11.isType)(generateFlow?.value, "DashboardModal") || (0, import_variant11.isType)(generateFlow?.value, "ServicePlugin") || (0, import_variant11.isType)(generateFlow?.value, "Event");
  return /* @__PURE__ */ import_react26.default.createElement(Box_default, { flexDirection: "column", paddingTop: 1 }, !shouldEditFlow && /* @__PURE__ */ import_react26.default.createElement(
    SelectGroupsInput,
    {
      value: generateFlow ? InputState.Submitted(generateFlow) : InputState.NotSubmitted(generateFlow),
      label: "What kind of extension would you like to generate?",
      groups: generateFlows,
      onSubmit: selectFlow,
      maxHeight: 15
    }
  ), generateFlow && (0, import_variant11.match)(
    generateFlow.value,
    (0, import_variant11.partial)({
      DashboardPage: () => /* @__PURE__ */ import_react26.default.createElement(
        Wizard,
        {
          name: generateFlow.value.type,
          steps: [
            /* @__PURE__ */ import_react26.default.createElement(
              FlowSelector,
              {
                generateFlows,
                generateFlow,
                onSubmit: setGenerateFlow
              }
            ),
            ...dashboardPageSteps
          ]
        }
      ),
      DashboardModal: () => /* @__PURE__ */ import_react26.default.createElement(
        Wizard,
        {
          name: generateFlow.value.type,
          steps: [
            /* @__PURE__ */ import_react26.default.createElement(
              FlowSelector,
              {
                generateFlows,
                generateFlow,
                onSubmit: setGenerateFlow
              }
            ),
            ...dashboardModalSteps
          ]
        }
      ),
      ServicePlugin: () => /* @__PURE__ */ import_react26.default.createElement(
        Wizard,
        {
          name: generateFlow.value.type,
          steps: [
            /* @__PURE__ */ import_react26.default.createElement(
              FlowSelector,
              {
                generateFlows,
                generateFlow,
                onSubmit: setGenerateFlow
              }
            ),
            ...generateServicePluginSteps
          ]
        }
      ),
      Event: () => /* @__PURE__ */ import_react26.default.createElement(
        Wizard,
        {
          name: generateFlow.value.type,
          steps: [
            /* @__PURE__ */ import_react26.default.createElement(
              FlowSelector,
              {
                generateFlows,
                generateFlow,
                onSubmit: setGenerateFlow
              }
            ),
            ...generateEventsSteps
          ]
        }
      ),
      DashboardPlugin: () => /* @__PURE__ */ import_react26.default.createElement(DashboardPlugin, { flow: generateFlow.value }),
      DashboardMenuPlugin: () => /* @__PURE__ */ import_react26.default.createElement(DashboardPlugin, { flow: generateFlow.value }),
      default: () => null
    })
  ));
};
export {
  GenerateCommand
};
/*! Bundled license information:

ejs/lib/ejs.js:
  (**
   * @file Embedded JavaScript templating engine. {@link http://ejs.co}
   * @author Matthew Eernisse <mde@fleegix.org>
   * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
   * @project EJS
   * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
   *)
*/
//# sourceMappingURL=GenerateCommand-JRBHRQ57.js.map