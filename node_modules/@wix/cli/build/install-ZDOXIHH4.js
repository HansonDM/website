import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  migrateToAnyNpmIfNeeded,
  resolveNpmDependencies,
  resolvePackageManager
} from "./chunk-46UBNWDE.js";
import "./chunk-H7756NJ6.js";
import {
  createLogger
} from "./chunk-73MIX2O2.js";
import "./chunk-R5RJYQCX.js";
import {
  createI18nT
} from "./chunk-E3K64ZZV.js";
import {
  authenticate
} from "./chunk-DR4RSQZ7.js";
import "./chunk-HEANTKSX.js";
import "./chunk-6EJNAOBP.js";
import "./chunk-7LCZ57SO.js";
import "./chunk-E7EAMFQD.js";
import "./chunk-MB2DJ4WP.js";
import "./chunk-ZW47BBFN.js";
import "./chunk-RWTQFIPN.js";
import "./chunk-W54PG6O5.js";
import "./chunk-CPSZ7QTC.js";
import "./chunk-KONVQLDI.js";
import "./chunk-WZOSCHKD.js";
import "./chunk-N2KKXUSW.js";
import "./chunk-KJ37XZQA.js";
import "./chunk-AHOU27PT.js";
import "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-Z4MHKCET.js";
import "./chunk-C4SUTB4O.js";
import "./chunk-IWQIW4GL.js";
import "./chunk-II7O6SCF.js";
import "./chunk-RL7RA2JG.js";
import "./chunk-ZUSQSFTR.js";
import "./chunk-F43XHKVL.js";
import "./chunk-EW4XNYNT.js";
import {
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-site-old/src/install/index.ts
init_esm_shims();

// ../cli-site-old/src/install/install.ts
init_esm_shims();
async function install(model, { biLogger, errorReporter }, options, initialPackageName) {
  const authState = await authenticate({
    metaSiteId: model.metaSiteId,
    biLogger,
    errorReporter
  });
  const t = createI18nT();
  const logger = createLogger({ t });
  const packageName = initialPackageName?.trim() ?? null;
  await migrateToAnyNpmIfNeeded(model.projectFolder, logger);
  const logInstalled = packageName ? logger.logDependencyInstalling(packageName) : logger.logAllDependenciesInstalling();
  try {
    const packageManager = await resolvePackageManager(
      model.projectFolder,
      options
    );
    if (packageName) {
      await packageManager.runInstallPackage(model.projectFolder, packageName);
    } else {
      await packageManager.runInstall(model.projectFolder);
    }
    await resolveNpmDependencies(model.projectFolder, { authState });
    logInstalled.success();
  } catch (error) {
    logInstalled.fail();
    throw error;
  }
}
export {
  install
};
//# sourceMappingURL=install-ZDOXIHH4.js.map