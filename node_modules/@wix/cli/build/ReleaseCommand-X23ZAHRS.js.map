{"version":3,"sources":["../../cli-astro-commands/src/components/ReleaseCommand/index.ts","../../cli-astro-commands/src/components/ReleaseCommand/ReleaseCommand.tsx","../../cli-astro-commands/src/components/ReleaseCommand/Release.tsx","../../cli-astro-commands/src/components/ReleaseCommand/Steps/CreatePreview.tsx","../../cli-astro-commands/src/components/ReleaseCommand/ReleaseOnlyTag.tsx"],"sourcesContent":["export { ReleaseCommand } from './ReleaseCommand.js';\n","import React from 'react';\nimport type { FC } from 'react';\nimport { match } from 'variant';\nimport { useAsync, Spinner, Text } from '@wix/cli-ui-kit';\nimport { useProjectModel } from '../../model.js';\nimport { assertBuildOutputExists } from '../../files/assert-build-output-exists.js';\nimport { Release } from './Release.js';\nimport { ReleaseOnlyTag } from './ReleaseOnlyTag.js';\n\ninterface ReleaseCommandProps {\n  baseUrl?: string;\n  label?: string;\n  previewId?: string;\n}\n\nexport const ReleaseCommand: FC<ReleaseCommandProps> = (props) => {\n  const {\n    model: { projectFolder },\n  } = useProjectModel();\n\n  const { previewId } = props;\n\n  const { status } = useAsync(async () => {\n    if (previewId == null) {\n      await assertBuildOutputExists(projectFolder);\n    }\n  }, []);\n\n  return match(status, {\n    Error: () => null,\n    Loading: () => (\n      <Spinner text={<Text>Loading application details...</Text>} />\n    ),\n    Success: () => {\n      return previewId == null ? (\n        <Release {...props} />\n      ) : (\n        <ReleaseOnlyTag previewId={previewId} />\n      );\n    },\n  });\n};\n","import React from 'react';\nimport type { FC } from 'react';\nimport { match } from 'variant';\nimport { Box, Text, Alert, Spinner, useAsyncCallback } from '@wix/cli-ui-kit';\nimport { useARMClient } from '@wix/arm-client';\nimport { useProjectModel } from '../../model.js';\nimport { CreatePreview } from './Steps/CreatePreview.js';\n\ninterface ReleaseProps {\n  baseUrl?: string;\n  label?: string;\n}\n\nexport const Release: FC<ReleaseProps> = ({ baseUrl, label }) => {\n  const {\n    model: {\n      config: { appId },\n    },\n  } = useProjectModel();\n\n  const { release } = useARMClient();\n\n  const releaseAction = useAsyncCallback(async (_, tag: string) => {\n    const baseUrl = await release(appId, tag);\n\n    return {\n      baseUrl,\n    };\n  });\n\n  function onPreviewCreated({ previewId }: { previewId: string }) {\n    return releaseAction.execute(previewId);\n  }\n\n  return (\n    <>\n      <CreatePreview\n        baseUrl={baseUrl}\n        label={label}\n        onCreated={({ previewId }) => onPreviewCreated({ previewId })}\n      />\n      {match(releaseAction.status, {\n        NotRequested: () => null,\n        Error: () => null,\n        Loading: () => <Spinner text={<Text>Releasing...</Text>} />,\n        Success: ({ result: { baseUrl } }) => (\n          <Box flexDirection=\"column\" gap={1}>\n            <Alert type=\"success\">\n              <Text bold>Site published on {baseUrl}</Text>\n            </Alert>\n          </Box>\n        ),\n      })}\n    </>\n  );\n};\n","import React from 'react';\nimport type { FC } from 'react';\nimport { Box, Text } from '@wix/cli-ui-kit';\nimport { PreviewCommand } from '../../PreviewCommand/index.js';\n\ninterface CreatePreviewProps {\n  baseUrl?: string;\n  label?: string;\n  onCreated: (args: { previewId: string; previewUrl: string }) => void;\n}\n\nexport const CreatePreview: FC<CreatePreviewProps> = (props) => {\n  const { baseUrl, label, onCreated } = props;\n\n  return (\n    <Box flexDirection=\"column\" gap={1}>\n      <Text>\n        Before creating a new version, let's create a preview of your app\n      </Text>\n      <Box flexDirection=\"column\">\n        <PreviewCommand\n          baseUrl={baseUrl}\n          label={label}\n          onPreviewCreated={onCreated}\n          environment=\"production\"\n        />\n      </Box>\n    </Box>\n  );\n};\n","import React from 'react';\nimport type { FC } from 'react';\nimport { match } from 'variant';\nimport { Box, Text, Alert, Spinner, useAsync } from '@wix/cli-ui-kit';\nimport { useARMClient } from '@wix/arm-client';\nimport { useProjectModel } from '../../model.js';\n\ninterface ReleaseProps {\n  previewId: string;\n}\n\nexport const ReleaseOnlyTag: FC<ReleaseProps> = ({ previewId }) => {\n  const {\n    model: {\n      config: { appId },\n    },\n  } = useProjectModel();\n\n  const { release } = useARMClient();\n\n  const { status } = useAsync(async () => {\n    const baseUrl = await release(appId, previewId);\n\n    return {\n      baseUrl,\n    };\n  }, []);\n\n  return (\n    <>\n      {match(status, {\n        NotRequested: () => null,\n        Error: () => null,\n        Loading: () => <Spinner text={<Text>Releasing...</Text>} />,\n        Success: ({ result: { baseUrl } }) => (\n          <Box flexDirection=\"column\" gap={1}>\n            <Alert type=\"success\">\n              <Text bold>Site published on {baseUrl}</Text>\n            </Alert>\n          </Box>\n        ),\n      })}\n    </>\n  );\n};\n"],"mappings":"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","names":["import_react","import_variant","import_react","React","baseUrl","React","import_react","import_variant","React","React"]}