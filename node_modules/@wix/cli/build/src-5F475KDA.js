import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  renderCommand,
  runCommand
} from "./chunk-726LL6JB.js";
import "./chunk-UD7IBXRB.js";
import "./chunk-OHMQSHHI.js";
import {
  NO_TTY_JSON_OUTPUT_OPTION
} from "./chunk-AWPJTA2S.js";
import {
  InvalidArgumentError,
  Option,
  createCommand
} from "./chunk-J2EPR7DO.js";
import "./chunk-IUJ26DW6.js";
import "./chunk-CPSZ7QTC.js";
import "./chunk-KONVQLDI.js";
import "./chunk-WZOSCHKD.js";
import "./chunk-N2KKXUSW.js";
import "./chunk-KJ37XZQA.js";
import "./chunk-AHOU27PT.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-Z4MHKCET.js";
import "./chunk-C4SUTB4O.js";
import "./chunk-IWQIW4GL.js";
import "./chunk-II7O6SCF.js";
import "./chunk-RL7RA2JG.js";
import "./chunk-ZUSQSFTR.js";
import {
  external_exports
} from "./chunk-F43XHKVL.js";
import "./chunk-EW4XNYNT.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-astro-commands/src/index.ts
init_esm_shims();

// ../cli-astro-commands/src/commands/root-command.ts
init_esm_shims();

// ../cli-astro-commands/src/commands/build.ts
init_esm_shims();
var buildCommand = (services, cliVersion) => createCommand("build").description(
  "Invoke the astro build process, forwarding all command-line arguments."
).allowExcessArguments(true).allowUnknownOption(true).passThroughOptions(true).action(async (_, command) => {
  const { execa } = await import("./execa-4CVWA4D5.js");
  const { getRepoType, createPackageManager } = await import("./src-DKZYL2FY.js");
  const { runCommand: runCommand2 } = await import("./render-command-DCPQETAV.js");
  await runCommand2(command, services, cliVersion, async (model) => {
    const repoType = await getRepoType(model.projectFolder);
    const packageManager = await createPackageManager(repoType);
    const { file, args } = packageManager.getRunBinaryCmd(
      ["astro", "build"].concat(command.args)
    );
    await execa(file, args, {
      cwd: model.projectFolder,
      stdio: "inherit"
    });
  });
});

// ../cli-astro-commands/src/commands/env.ts
init_esm_shims();

// ../cli-astro-commands/src/commands/env-pull.tsx
init_esm_shims();
var import_react = __toESM(require_react(), 1);
var envPullCommand = (services, cliVersion) => {
  return createCommand("pull").description(
    "Pulls environment variables and merge them into .env.local file"
  ).addOption(
    new Option(NO_TTY_JSON_OUTPUT_OPTION, "Output in JSON format").hideHelp()
  ).action(async (opts, command) => {
    if (opts.json) {
      return runCommand(command, services, cliVersion, async (model) => {
        const { nonInteractiveEnvPull } = await import("./env-pull-3ZQSRNUH.js");
        return nonInteractiveEnvPull(services, model);
      });
    }
    const { EnvPullCommand } = await import("./EnvPullCommand-ODAOSFNY.js");
    await renderCommand(command, services, cliVersion, /* @__PURE__ */ import_react.default.createElement(EnvPullCommand, null));
  });
};

// ../cli-astro-commands/src/commands/env-set.tsx
init_esm_shims();
var import_react2 = __toESM(require_react(), 1);
var envSetCommand = (services, cliVersion) => {
  return createCommand("set").description("Sets environment variable").requiredOption("--key <key>", "Name of the variable").requiredOption("--value <value>", "Value of the variable").action(async (opts, command) => {
    const { EnvSetCommand } = await import("./EnvSetCommand-FT2XLNDB.js");
    const variable = { key: opts.key, value: opts.value };
    await renderCommand(
      command,
      services,
      cliVersion,
      /* @__PURE__ */ import_react2.default.createElement(EnvSetCommand, { variable })
    );
  });
};

// ../cli-astro-commands/src/commands/env-remove.tsx
init_esm_shims();
var import_react3 = __toESM(require_react(), 1);
var envRemoveCommand = (services, cliVersion) => {
  return createCommand("remove").description("Removes an environment variable").requiredOption("--key <key>", "Name of the variable").action(async (opts, command) => {
    const { EnvRemoveCommand } = await import("./EnvRemoveCommand-BZSR6QDV.js");
    await renderCommand(
      command,
      services,
      cliVersion,
      /* @__PURE__ */ import_react3.default.createElement(EnvRemoveCommand, { variableKey: opts.key })
    );
  });
};

// ../cli-astro-commands/src/commands/env.ts
var envCommand = (services, cliVersion) => {
  return createCommand("env").description("Work with environment variables").addCommand(envPullCommand(services, cliVersion)).addCommand(envSetCommand(services, cliVersion)).addCommand(envRemoveCommand(services, cliVersion));
};

// ../cli-astro-commands/src/commands/preview.tsx
init_esm_shims();
var import_react4 = __toESM(require_react(), 1);

// ../cli-astro-commands/src/commands/validations.ts
init_esm_shims();
function validateBase(value) {
  const parsed = external_exports.string().url().safeParse(value);
  if (parsed.success) {
    return parsed.data;
  }
  throw new InvalidArgumentError("Value must be a valid URL");
}
var LABEL_MAX_LENGTH = 200;
function validateLabel(value) {
  const parsed = external_exports.string().max(LABEL_MAX_LENGTH).safeParse(value);
  if (parsed.success) {
    return parsed.data;
  }
  throw new InvalidArgumentError(
    `Value must be up to ${LABEL_MAX_LENGTH} characters`
  );
}

// ../cli-astro-commands/src/commands/preview.tsx
var previewCommand = (services, cliVersion) => {
  return createCommand("preview").addOption(
    new Option(
      "--base-url <url>",
      "The base url for when static files have been uploaded to an external cdn"
    ).argParser(validateBase).hideHelp()
  ).addOption(
    new Option("-l, --label <label>", "A custom label for this preview").argParser(validateLabel).hideHelp()
  ).addOption(
    new Option(NO_TTY_JSON_OUTPUT_OPTION, "Output in JSON format").hideHelp()
  ).action(async (options, command) => {
    const { baseUrl, json, label } = options;
    const { renderCommand: renderCommand2, runCommand: runCommand2 } = await import("./render-command-DCPQETAV.js");
    if (json) {
      return runCommand2(command, services, cliVersion, async (model) => {
        const { nonInteractivePreview } = await import("./preview-HURWRYHS.js");
        return nonInteractivePreview(services, model, { baseUrl, label });
      });
    }
    const { PreviewCommand } = await import("./PreviewCommand-ZM4AEALO.js");
    await renderCommand2(
      command,
      services,
      cliVersion,
      /* @__PURE__ */ import_react4.default.createElement(PreviewCommand, { baseUrl, label, environment: "preview" })
    );
  });
};

// ../cli-astro-commands/src/commands/release.tsx
init_esm_shims();
var import_react5 = __toESM(require_react(), 1);
var releaseCommand = (services, cliVersion) => {
  return createCommand("release").description("Release a new version of your application").addOption(
    new Option(
      "--base-url <url>",
      "The base url for when static files have been uploaded to an external cdn"
    ).argParser(validateBase).hideHelp()
  ).addOption(
    new Option("-l, --label <label>", "A custom label for this preview").argParser(validateLabel).hideHelp()
  ).addOption(
    new Option(
      "--preview-id <preview-id>",
      "ID for the preview version to be released"
    ).conflicts(["baseUrl", "label"]).hideHelp()
  ).action(async (options, command) => {
    const { renderCommand: renderCommand2 } = await import("./render-command-DCPQETAV.js");
    const { ReleaseCommand } = await import("./ReleaseCommand-X23ZAHRS.js");
    const { baseUrl, label, previewId } = options;
    await renderCommand2(
      command,
      services,
      cliVersion,
      /* @__PURE__ */ import_react5.default.createElement(ReleaseCommand, { baseUrl, label, previewId })
    );
  });
};

// ../cli-astro-commands/src/commands/dev.tsx
init_esm_shims();
var import_react6 = __toESM(require_react(), 1);
var devCommand = (services, cliVersion) => {
  return createCommand("dev").option(
    "--port <port>",
    "Specify which port to run on. Defaults to 4321.",
    (value) => {
      return parseInt(value, 10);
    }
  ).option(
    "--allowed-hosts <allowedHosts>",
    "Specify a comma-separated list of allowed hosts or allow any hostname."
  ).addOption(
    new Option(
      "--base-url <url>",
      "The base url for when static files have been uploaded to an external cdn"
    ).argParser(validateBase).hideHelp()
  ).action(async (options, command) => {
    const { DevCommand } = await import("./DevCommand-2MEXMT5M.js");
    const { renderCommand: renderCommand2 } = await import("./render-command-DCPQETAV.js");
    await renderCommand2(
      command,
      services,
      cliVersion,
      /* @__PURE__ */ import_react6.default.createElement(
        DevCommand,
        {
          port: options.port,
          allowedHosts: options.allowedHosts,
          serverExposedUrl: options.baseUrl
        }
      )
    );
  });
};

// ../cli-astro-commands/src/commands/generate.tsx
init_esm_shims();
var import_react7 = __toESM(require_react(), 1);
var generateCommand = (services, cliVersion) => {
  return createCommand("generate").description("Generate a new extension for your project").action(async (options, command) => {
    const { GenerateCommand } = await import("./GenerateCommand-JRBHRQ57.js");
    const { renderCommand: renderCommand2 } = await import("./render-command-DCPQETAV.js");
    await renderCommand2(command, services, cliVersion, /* @__PURE__ */ import_react7.default.createElement(GenerateCommand, null));
  });
};

// ../cli-astro-commands/src/commands/root-command.ts
var getRootCommand = async (services, cliVersion) => {
  return createCommand("astro").enablePositionalOptions(true).addCommand(buildCommand(services, cliVersion)).addCommand(envCommand(services, cliVersion)).addCommand(previewCommand(services, cliVersion)).addCommand(releaseCommand(services, cliVersion)).addCommand(devCommand(services, cliVersion)).addCommand(generateCommand(services, cliVersion));
};
export {
  getRootCommand
};
//# sourceMappingURL=src-5F475KDA.js.map