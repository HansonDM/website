import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  DeploymentSource,
  getDefaultBranch,
  getDeploymentSourceData
} from "./chunk-CM2XSGSM.js";
import "./chunk-Z2CMHMLR.js";
import "./chunk-H7756NJ6.js";
import "./chunk-R5RJYQCX.js";
import {
  useProjectModel
} from "./chunk-B5WA4Z63.js";
import "./chunk-6EJNAOBP.js";
import "./chunk-V23RKBE2.js";
import {
  DeploymentStatus,
  useDocumentManagementClient
} from "./chunk-6OV37XZP.js";
import "./chunk-TXS6FIYJ.js";
import "./chunk-7LCZ57SO.js";
import {
  useVeloClient
} from "./chunk-AV2QWD2T.js";
import "./chunk-JEYKAALI.js";
import "./chunk-Y7PQOTYY.js";
import "./chunk-MVBGFP6D.js";
import "./chunk-E7EAMFQD.js";
import "./chunk-RWTQFIPN.js";
import "./chunk-W54PG6O5.js";
import "./chunk-OHMQSHHI.js";
import "./chunk-IUJ26DW6.js";
import {
  ErrorViewer,
  writeCrashReport
} from "./chunk-KONVQLDI.js";
import "./chunk-WZOSCHKD.js";
import {
  Trans,
  useTranslation
} from "./chunk-N2KKXUSW.js";
import "./chunk-KJ37XZQA.js";
import {
  Alert,
  Box_default,
  Link,
  SelectInput,
  Spinner,
  useAsync,
  useAsyncCallback
} from "./chunk-AHOU27PT.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-Z4MHKCET.js";
import "./chunk-C4SUTB4O.js";
import {
  getDebugLogFilePath
} from "./chunk-IWQIW4GL.js";
import "./chunk-II7O6SCF.js";
import "./chunk-RL7RA2JG.js";
import "./chunk-ZUSQSFTR.js";
import "./chunk-F43XHKVL.js";
import {
  require_lib
} from "./chunk-EW4XNYNT.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-site-old/src/preview/PreviewCommand.tsx
init_esm_shims();
var import_react3 = __toESM(require_react(), 1);
var import_variant2 = __toESM(require_lib(), 1);

// ../cli-site-old/src/preview/SelectPreviewSource.tsx
init_esm_shims();
var import_react = __toESM(require_react(), 1);
var import_variant = __toESM(require_lib(), 1);
var SelectPreviewSource = ({
  projectFolder,
  onSubmit
}) => {
  const { t } = useTranslation();
  const { status } = useAsync(
    () => getDefaultBranch(
      (e) => writeCrashReport(getDebugLogFilePath(projectFolder), e, /* @__PURE__ */ new Date())
    ),
    []
  );
  return (0, import_variant.match)(status, {
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react.default.createElement(Spinner, null),
    Success: ({ result: defaultBranchName }) => /* @__PURE__ */ import_react.default.createElement(
      SelectInput,
      {
        label: t("preview_command.prompt_what_to_preview"),
        options: [
          {
            key: "remote",
            value: DeploymentSource.remote(),
            title: defaultBranchName ? t("preview_command.prompt_what_to_preview_choice_latest", {
              branchName: defaultBranchName
            }) : t(
              "preview_command.prompt_what_to_preview_choice_latest_fallback"
            )
          },
          {
            key: "local",
            value: DeploymentSource.local(),
            title: t("preview_command.prompt_what_to_preview_choice_local")
          }
        ],
        onSubmit
      }
    )
  });
};

// ../cli-site-old/src/preview/useCreatePreview.ts
init_esm_shims();
var import_react2 = __toESM(require_react(), 1);
function useCreatePreview() {
  const { model } = useProjectModel();
  const veloClient = useVeloClient();
  const dmClient = useDocumentManagementClient();
  return (0, import_react2.useCallback)(
    async (previewSource) => {
      const deploymentSourceData = await getDeploymentSourceData(
        model,
        previewSource === "local" ? DeploymentSource.local() : DeploymentSource.remote()
      );
      const preview = await veloClient.deploySitePreview(deploymentSourceData);
      return {
        deploymentId: preview.deploymentId,
        previewUrl: preview.deploymentShortUrl ?? preview.deploymentUrl,
        deploymentStatus: preview.isPublishPipelineDeployment ? await dmClient.getDeploymentDetails(preview.deploymentId) : DeploymentStatus.Success()
      };
    },
    [dmClient, model, veloClient]
  );
}

// ../cli-site-old/src/preview/PreviewCommand.tsx
var PreviewCommand = (options) => {
  const { t } = useTranslation();
  const { model } = useProjectModel();
  const createPreview = useCreatePreview();
  const { status, execute: handleCreatingPreview } = useAsyncCallback(
    async (_, previewSource) => {
      const { previewUrl, deploymentStatus } = await createPreview(previewSource);
      if (!options.force && (0, import_variant2.isType)(deploymentStatus, DeploymentStatus.Error)) {
        throw deploymentStatus.deploymentError;
      }
      return { previewUrl, deploymentStatus };
    }
  );
  useAsync(async () => {
    if (options.source) {
      void handleCreatingPreview(options.source);
    }
  }, []);
  return /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, !options.source && /* @__PURE__ */ import_react3.default.createElement(
    SelectPreviewSource,
    {
      projectFolder: model.projectFolder,
      onSubmit: ({ value }) => handleCreatingPreview(value.type)
    }
  ), (0, import_variant2.match)(status, {
    NotRequested: () => null,
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react3.default.createElement(Spinner, { text: t("preview_command.creating_preview") }),
    Success: ({ result: { previewUrl, deploymentStatus } }) => /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, (0, import_variant2.isType)(deploymentStatus, DeploymentStatus.Error) ? /* @__PURE__ */ import_react3.default.createElement(Box_default, { marginBottom: 1, flexDirection: "column" }, /* @__PURE__ */ import_react3.default.createElement(ErrorViewer, { error: deploymentStatus.deploymentError })) : null, /* @__PURE__ */ import_react3.default.createElement(Alert, { type: "success" }, /* @__PURE__ */ import_react3.default.createElement(
      Trans,
      {
        i18nKey: "preview_command.preview_created",
        components: [/* @__PURE__ */ import_react3.default.createElement(Link, { url: previewUrl })]
      }
    )))
  }));
};
export {
  PreviewCommand
};
//# sourceMappingURL=PreviewCommand-LIUZ4V3Q.js.map