{"version":3,"sources":["../../../node_modules/@babel/runtime/helpers/typeof.js","../../../node_modules/@babel/runtime/helpers/toPrimitive.js","../../../node_modules/@babel/runtime/helpers/toPropertyKey.js","../../../node_modules/@babel/runtime/helpers/defineProperty.js","../../cli-panorama/src/PanoramaContext.tsx","../../cli-panorama/src/createPanorama.ts","../../../node_modules/@wix/panorama-client-node/src/index.ts","../../../node_modules/@wix/panorama-client-node/src/panorama-client-node.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/index.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/src/types/index.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/src/types/enum-types.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/dist/esm/types/data-types.js","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/dist/esm/types/interface-types.js","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common/src/global-config/index.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common/src/global-config/global-config.ts","../../../node_modules/uuid/dist/esm-node/index.js","../../../node_modules/uuid/dist/esm-node/rng.js","../../../node_modules/uuid/dist/esm-node/stringify.js","../../../node_modules/uuid/dist/esm-node/v4.js","../../../node_modules/uuid/dist/esm-node/native.js","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common/src/duration-tracker/index.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common/src/duration-tracker/duration-tracker.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common/src/utils/index.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common/src/utils/class-utils.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/utils/general-utils.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-error-monitor.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-logger.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-transaction.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/src/utils/index.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/src/utils/transaction-utils.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/src/utils/platform-utils.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/src/utils/guid.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-client-component.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/plugins/hooks-manager.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-phase.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-client.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/lib/payload-builder.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/utils/error-utils.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/lib/payload-sanitizer.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/constants.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-client-base.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/lib/scope.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-client/src/panorama-client-factory.ts","../../../node_modules/@wix/panorama-client-node/node_modules/@wix/panorama-common-shared/src/constants.ts","../../../node_modules/@wix/panorama-client-node/src/reporter.ts","../../cli-panorama/src/index.ts","../../cli-panorama/src/usePanoramaMethodLogger.ts"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import React, { createContext } from 'react';\nimport type { FC, ReactNode } from 'react';\n\nimport type { Panorama } from './createPanorama.js';\n\nexport const PanoramaContext = createContext<Panorama | undefined>(undefined);\n\ninterface PanoramaProviderProps {\n  children: ReactNode;\n  value: Panorama;\n}\n\nexport const PanoramaProvider: FC<PanoramaProviderProps> = (props) => {\n  const { value, children } = props;\n  return (\n    <PanoramaContext.Provider value={value}>\n      {children}\n    </PanoramaContext.Provider>\n  );\n};\n","import type { PanoramaFactory } from '@wix/panorama-client-node';\nimport {\n  createGlobalConfig,\n  panoramaClientFactory,\n  PanoramaPlatform,\n  nodeReporter,\n} from '@wix/panorama-client-node';\nimport { readUserConfig } from '@wix/cli-user-config';\nimport { getTestOverrides } from '@wix/cli-test-overrides';\n\n// https://dev.wix.com/docs/fed-guild/articles/infra/panorama/client/for-standalone-projects#factory-initialization\nconst globalConfig = createGlobalConfig();\n\nconst overrides = getTestOverrides();\nif (overrides.panoramaReporterUrl) {\n  globalConfig.setReporter(\n    nodeReporter(overrides.panoramaReporterUrl, { silent: true })\n  );\n}\n\nexport type Panorama = PanoramaFactory;\n\ninterface PanoramaOptions {\n  version: string;\n  artifact: {\n    groupId: string;\n    artifactId: string;\n  };\n  userId?: string;\n}\n\nexport async function createPanorama(options: PanoramaOptions) {\n  const { version, artifact, userId } = options;\n\n  const userConfig = await readUserConfig();\n\n  const factory = panoramaClientFactory({\n    baseParams: {\n      platform: PanoramaPlatform.Standalone,\n      fullArtifactId: `${artifact.groupId}.${artifact.artifactId}`,\n      componentId: 'app', // This property is mandatory, there is validation on server side\n      artifactVersion: version,\n      uuid: userId,\n    },\n    reporterOptions: {\n      silent: true,\n    },\n  })\n    .withGlobalConfig(globalConfig)\n    .setMuted(!userConfig.telemetry);\n\n  return factory;\n}\n","export {\n  type Factory as PanoramaFactory,\n  panoramaClientFactory,\n} from './panorama-client-node';\n\nexport {\n  type PanoramaClient,\n  type PanoramaClientForComponent,\n  type GlobalConfig,\n  createGlobalConfig,\n  ExceptionType as PanoramaExceptionType,\n  ErrorSeverity as PanoramaErrorSeverity,\n  type PanoramaLogger,\n  Platform as PanoramaPlatform,\n} from '@wix/panorama-client';\n\nexport type { EventPayload } from '@wix/panorama-common-shared/types';\n\nexport { nodeReporter } from './reporter';\n","import {\n  panoramaClient,\n  type PanoramaClientFactory,\n  type PluginParams,\n} from '@wix/panorama-client';\nimport type {\n  EventPayload,\n  BaseParams,\n  UserParams,\n} from '@wix/panorama-common-shared/types';\nimport { CLICKHOUSE_REPORT_URL } from '@wix/panorama-common-shared/constants';\nimport { nodeReporter } from './reporter';\nimport type { ReporterOptions } from './types';\n\ninterface FactoryOptions {\n  baseParams?: BaseParams;\n  data?: UserParams['data'];\n  pluginParams?: PluginParams;\n  reporterOptions?: ReporterOptions;\n}\n\nexport type Factory = Omit<PanoramaClientFactory, 'use'>;\n\nexport const panoramaClientFactory = (options: FactoryOptions): Factory => {\n  const { baseParams, reporterOptions, data } = options;\n\n  const factory = panoramaClient<EventPayload>({\n    baseParams,\n    data,\n  }).withReporter(nodeReporter(CLICKHOUSE_REPORT_URL, reporterOptions));\n\n  // @ts-expect-error\n  factory.use = undefined;\n\n  return factory;\n};\n","export { Platform, ErrorSeverity } from '@wix/panorama-common-shared/types';\n\nexport {\n  type GlobalConfig,\n  createGlobalConfig,\n} from '@wix/panorama-common/global-config';\n\nexport {\n  panoramaClient,\n  type PanoramaClientFactory,\n} from './panorama-client-factory';\n\nexport type { PanoramaClient } from './panorama-client';\nexport type { PanoramaClientForComponent } from './panorama-client-component';\nexport type { PluginParams } from './plugins';\nexport { ExceptionType } from './types';\nexport type { PanoramaLogger } from './panorama-logger';\n",null,null,"export {};\n//# sourceMappingURL=data-types.js.map","export {};\n//# sourceMappingURL=interface-types.js.map",null,null,"export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};",null,null,null,null,"export const last = (arr?: any[]) =>\n  Array.isArray(arr) ? arr[arr.length - 1] : undefined;\n\nexport const union = <T>(...args: T[][]) => [...new Set(args.flat()).values()];\n\n/**\n * The reason spread operator is not used here is because of its behavior when passing an entry with undefined value explicitly:\n * const a = { hello: 'world' }\n * const b = {...a, hello: undefined }; // {hello: undefined}\n * We want to ignore the undefined value and use the defined value from the previous object instead.\n */\nexport const defaults = <T extends Record<string, any>>(\n  ...args: (T | undefined)[]\n) =>\n  args.reduce<T>(\n    (res, obj) =>\n      Object.entries(obj ?? {}).reduce((_res, [key, value]) => {\n        if (typeof _res[key] === 'undefined' && typeof value !== 'undefined') {\n          (_res as Record<string, any>)[key] = value;\n        }\n\n        return _res;\n      }, res),\n    {} as T,\n  );\n\nexport const deepDefaults = <T extends Record<string, any>>(\n  dest?: T,\n  ...rest: (T | undefined)[]\n): T | undefined => {\n  const keys = union<keyof T>(...rest.map((value) => Object.keys(value ?? {})));\n  const all = [dest, ...rest];\n\n  return keys.reduce<T | undefined>(\n    (res, key) => {\n      const values = all.map((value) => value?.[key]);\n      const merged = defaults(...(values as [T[keyof T]]));\n\n      const hasValues =\n        Object.values(merged).filter((value) => typeof value !== 'undefined')\n          .length > 0;\n\n      if (hasValues) {\n        res = res ?? ({} as T);\n        res[key] = merged;\n      } else {\n        delete res?.[key];\n      }\n\n      return res;\n    },\n    dest ? { ...dest } : dest,\n  );\n};\n","import { bindPrototypeMethodsToSelf } from '@wix/panorama-common/utils';\nimport type { ErrorUserData } from '@wix/panorama-common-shared/types';\nimport type { Breadcrumb, ErrorMonitorOptions } from './types';\nimport { BasePanoramaClient } from './panorama-client-base';\n\nexport interface PanoramaErrorMonitor<T extends ErrorUserData> {\n  reportError(error: Error, data?: T): void;\n\n  addBreadcrumb(breadcrumb: Breadcrumb): void;\n}\n\nexport class PanoramaErrorMonitorImpl<T extends ErrorUserData> {\n  constructor(\n    private readonly baseClient: BasePanoramaClient,\n    private readonly options?: ErrorMonitorOptions,\n  ) {\n    bindPrototypeMethodsToSelf(this);\n  }\n\n  reportError(error: Error, data?: T) {\n    this.baseClient.reportError(error, data, this.options);\n  }\n\n  addBreadcrumb(breadcrumb: Breadcrumb) {\n    this.baseClient.addBreadcrumb(breadcrumb);\n  }\n}\n","import { bindPrototypeMethodsToSelf } from '@wix/panorama-common/utils';\nimport { BasePanoramaClient } from './panorama-client-base';\nimport { LogLevel } from '@wix/panorama-common-shared/types';\n\nexport interface PanoramaLogger {\n  info(message: string, data?: Record<string, any>): void;\n\n  warn(message: string, data?: Record<string, any>): void;\n\n  error(message: string, data?: Record<string, any>): void;\n\n  debug(message: string, data?: Record<string, any>): void;\n}\n\nexport class PanoramaLoggerImpl implements PanoramaLogger {\n  constructor(private readonly baseClient: BasePanoramaClient) {\n    bindPrototypeMethodsToSelf(this);\n  }\n\n  public info(message: string, data?: Record<string, any>): void {\n    this.baseClient.log(LogLevel.Info, message, data);\n  }\n\n  public warn(message: string, data?: Record<string, any>): void {\n    this.baseClient.log(LogLevel.Warn, message, data);\n  }\n\n  public error(message: string, data?: Record<string, any>): void {\n    this.baseClient.log(LogLevel.Error, message, data);\n  }\n\n  public debug(message: string, data?: Record<string, any>): void {\n    this.baseClient.log(LogLevel.Debug, message, data);\n  }\n}\n","import { bindPrototypeMethodsToSelf } from '@wix/panorama-common/utils';\nimport type { TransactionUserData } from '@wix/panorama-common-shared/types';\nimport {\n  type CustomTransactionName,\n  isCustomTransactionName,\n} from '@wix/panorama-common-shared/utils';\nimport { type BasePanoramaClient } from './panorama-client-base';\nimport type { TransactionOptions } from './types';\nimport { defaults } from './utils/general-utils';\n\nexport interface PanoramaTransaction {\n  start: (data?: TransactionUserData, options?: TransactionOptions) => void;\n  finish: (data?: TransactionUserData, options?: TransactionOptions) => void;\n}\n\nexport class PanoramaTransactionImpl implements PanoramaTransaction {\n  constructor(\n    private readonly baseClient: BasePanoramaClient,\n    private readonly name: CustomTransactionName<string>,\n    private readonly options?: TransactionOptions,\n  ) {\n    if (!isCustomTransactionName(name)) {\n      throw new Error(`\"${name}\" is an internal transaction and can't be used`);\n    }\n\n    this.baseClient = baseClient;\n\n    bindPrototypeMethodsToSelf(this);\n  }\n\n  start(data?: TransactionUserData, options?: TransactionOptions) {\n    return this.baseClient.reportTransactionStart(\n      this.name,\n      defaults(options, this.options),\n      data,\n    );\n  }\n\n  finish(data?: TransactionUserData, options?: TransactionOptions) {\n    return this.baseClient.reportTransactionFinish(\n      this.name,\n      defaults(options, this.options),\n      data,\n    );\n  }\n}\n",null,null,null,null,"import { bindPrototypeMethodsToSelf } from '@wix/panorama-common/utils';\nimport { type CustomTransactionName } from '@wix/panorama-common-shared/utils';\nimport { type BasePanoramaClient } from './panorama-client-base';\nimport {\n  type PanoramaErrorMonitor,\n  PanoramaErrorMonitorImpl,\n} from './panorama-error-monitor';\nimport { type PanoramaLogger, PanoramaLoggerImpl } from './panorama-logger';\nimport type {\n  ErrorMonitorOptionsForComponent,\n  ErrorMonitorUserData,\n  TransactionOptions,\n} from './types';\nimport {\n  type PanoramaTransaction,\n  PanoramaTransactionImpl,\n} from './panorama-transaction';\n\ninterface Options {\n  baseClient: BasePanoramaClient;\n}\n\nexport interface PanoramaClientForComponent {\n  transaction<T extends string>(\n    name: CustomTransactionName<T>,\n    options?: TransactionOptions,\n  ): PanoramaTransaction;\n\n  errorMonitor(\n    options?: ErrorMonitorOptionsForComponent,\n  ): PanoramaErrorMonitor<ErrorMonitorUserData>;\n\n  logger(): PanoramaLogger;\n}\n\nexport class PanoramaClientForComponentImpl\n  implements PanoramaClientForComponent\n{\n  private baseClient: BasePanoramaClient;\n\n  constructor({ baseClient }: Options) {\n    this.baseClient = baseClient;\n\n    bindPrototypeMethodsToSelf(this);\n  }\n\n  transaction(\n    name: CustomTransactionName<string>,\n    options?: TransactionOptions,\n  ) {\n    return new PanoramaTransactionImpl(this.baseClient, name, options);\n  }\n\n  errorMonitor(\n    options?: ErrorMonitorOptionsForComponent,\n  ): PanoramaErrorMonitor<ErrorMonitorUserData> {\n    return new PanoramaErrorMonitorImpl(this.baseClient, options);\n  }\n\n  logger(): PanoramaLogger {\n    return new PanoramaLoggerImpl(this.baseClient);\n  }\n}\n","import type {\n  EventPayload,\n  ErrorUserData,\n  TransactionUserData,\n  PhaseUserData,\n} from '@wix/panorama-common-shared/types';\nimport { LogLevel } from '@wix/panorama-common-shared/types';\nimport type { PanoramaClientForComponent } from '../panorama-client-component';\nimport type { Breadcrumb, ErrorData, ErrorMonitorOptions } from '../types';\n\nexport enum Hook {\n  afterCreateClientForComponent,\n  beforeReport,\n  beforeReportTransactionStart,\n  afterReportTransactionStart,\n  beforeReportTransactionFinish,\n  afterReportTransactionFinish,\n  beforeReportPhaseStart,\n  afterReportPhaseStart,\n  beforeReportPhaseFinish,\n  afterReportPhaseFinish,\n  beforeReportError,\n  afterReportError,\n  beforeAddBreadcrumb,\n  afterAddBreadcrumb,\n  beforeReportLog,\n  afterReportLog,\n  beforeUnhandledError,\n}\n\ntype Subscriber<T extends any[]> = (...args: T) => false | void;\n\ntype ArgsByHook = {\n  [Hook.afterCreateClientForComponent]: [client: PanoramaClientForComponent];\n  [Hook.beforeReport]: [eventPayload: EventPayload];\n  [Hook.beforeReportTransactionStart]: [\n    transactionName: string,\n    data?: TransactionUserData,\n  ];\n  [Hook.beforeReportTransactionFinish]: [\n    transactionName: string,\n    data?: TransactionUserData,\n  ];\n  [Hook.afterReportTransactionStart]: [\n    transactionName: string,\n    eventPayload: EventPayload,\n  ];\n  [Hook.afterReportTransactionFinish]: [\n    transactionName: string,\n    eventPayload: EventPayload,\n  ];\n  [Hook.beforeReportPhaseStart]: [\n    transactionName: string,\n    data?: PhaseUserData,\n  ];\n  [Hook.beforeReportPhaseFinish]: [\n    transactionName: string,\n    data?: PhaseUserData,\n  ];\n  [Hook.afterReportPhaseStart]: [\n    transactionName: string,\n    eventPayload: EventPayload,\n  ];\n  [Hook.afterReportPhaseFinish]: [\n    transactionName: string,\n    eventPayload: EventPayload,\n  ];\n  [Hook.beforeReportError]: [\n    error: Error,\n    data?: ErrorData & ErrorUserData,\n    errorMonitorOptions?: ErrorMonitorOptions,\n  ];\n  [Hook.afterReportError]: [\n    error: Error,\n    data?: ErrorData & ErrorUserData,\n    errorMonitorOptions?: ErrorMonitorOptions,\n  ];\n  [Hook.beforeAddBreadcrumb]: [Breadcrumb];\n  [Hook.afterAddBreadcrumb]: [Breadcrumb];\n  [Hook.beforeReportLog]: [\n    logLevel: LogLevel,\n    message: string,\n    data?: Record<string, any>,\n  ];\n  [Hook.afterReportLog]: [\n    logLevel: LogLevel,\n    message: string,\n    data?: Record<string, any>,\n  ];\n  [Hook.beforeUnhandledError]: [error?: Error];\n};\n\ntype SubscribersByHook = {\n  [P in Hook]?: Subscriber<ArgsByHook[P]>[];\n};\n\nexport type SubscriberByHook = {\n  [P in Hook]: Subscriber<ArgsByHook[P]>;\n};\n\nexport class HooksManager {\n  private readonly subscribers: SubscribersByHook = {};\n\n  tap<T extends Hook>(hook: T, subscriber: Subscriber<ArgsByHook[T]>) {\n    this.subscribers[hook] = this.subscribers[hook] || [];\n    this.subscribers[hook]!.push(subscriber);\n  }\n\n  invoke<T extends Hook>(hook: T, ...args: ArgsByHook[T]): boolean {\n    const subscribers = this.subscribers[hook];\n\n    if (!subscribers) {\n      return true;\n    }\n\n    for (const subscriber of subscribers) {\n      if (subscriber(...args) === false) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { bindPrototypeMethodsToSelf } from '@wix/panorama-common/utils';\nimport {\n  PhaseName,\n  type TransactionUserData,\n} from '@wix/panorama-common-shared/types';\nimport { type BasePanoramaClient } from './panorama-client-base';\n\nexport interface PanoramaPhase {\n  start: (data?: TransactionUserData) => void;\n  finish: (data?: TransactionUserData) => void;\n}\n\nexport class PanoramaPhaseImpl implements PanoramaPhase {\n  constructor(\n    private readonly name: PhaseName,\n    private readonly baseClient: BasePanoramaClient,\n  ) {\n    this.baseClient = baseClient;\n\n    bindPrototypeMethodsToSelf(this);\n  }\n\n  start(data?: TransactionUserData) {\n    return this.baseClient.reportPhaseStart(this.name, data);\n  }\n\n  finish(data?: TransactionUserData) {\n    return this.baseClient.reportPhaseFinish(this.name, data);\n  }\n}\n","import { bindPrototypeMethodsToSelf } from '@wix/panorama-common/utils';\nimport {\n  InternalTransactions,\n  type PhaseName,\n  type TransactionUserData,\n} from '@wix/panorama-common-shared/types';\nimport { type CustomTransactionName } from '@wix/panorama-common-shared/utils';\nimport {\n  type PanoramaClientForComponent,\n  PanoramaClientForComponentImpl,\n} from './panorama-client-component';\nimport type { BasePanoramaClient } from './panorama-client-base';\nimport {\n  Hook,\n  type HooksManager,\n  type SubscriberByHook,\n} from './plugins/hooks-manager';\nimport {\n  type PanoramaErrorMonitor,\n  PanoramaErrorMonitorImpl,\n} from './panorama-error-monitor';\nimport { PanoramaLogger, PanoramaLoggerImpl } from './panorama-logger';\nimport type {\n  ErrorMonitorOptions,\n  ErrorMonitorUserData,\n  TransactionOptions,\n} from './types';\nimport {\n  type PanoramaTransaction,\n  PanoramaTransactionImpl,\n} from './panorama-transaction';\nimport { type PanoramaPhase, PanoramaPhaseImpl } from './panorama-phase';\n\ninterface Options {\n  hooksManager: HooksManager;\n  baseClient: BasePanoramaClient;\n}\n\nexport interface PanoramaClient {\n  onUnhandledError(\n    subscriber: SubscriberByHook[Hook.beforeUnhandledError],\n  ): void;\n\n  reportLoadStart(\n    data?: TransactionUserData,\n    options?: TransactionOptions,\n  ): void;\n\n  reportLoadFinish(\n    data?: TransactionUserData,\n    options?: TransactionOptions,\n  ): void;\n\n  phase(name: PhaseName): PanoramaPhase;\n\n  transaction<T extends string>(\n    name: CustomTransactionName<T>,\n    options?: TransactionOptions,\n  ): PanoramaTransaction;\n\n  errorMonitor(\n    options?: ErrorMonitorOptions,\n  ): PanoramaErrorMonitor<ErrorMonitorUserData>;\n\n  logger(): PanoramaLogger;\n\n  createClientForComponent(): PanoramaClientForComponent;\n}\n\nexport class PanoramaClientImpl implements PanoramaClient {\n  private baseClient: BasePanoramaClient;\n  private hooksManager: HooksManager;\n\n  constructor({ hooksManager, baseClient }: Options) {\n    this.baseClient = baseClient;\n    this.hooksManager = hooksManager;\n\n    bindPrototypeMethodsToSelf(this);\n  }\n\n  onUnhandledError(subscriber: SubscriberByHook[Hook.beforeUnhandledError]) {\n    this.hooksManager.tap(Hook.beforeUnhandledError, subscriber);\n  }\n\n  reportLoadStart(data?: TransactionUserData, options?: TransactionOptions) {\n    const { ComponentLoad } = InternalTransactions;\n\n    return this.baseClient.reportTransactionStart(ComponentLoad, options, data);\n  }\n\n  reportLoadFinish(data?: TransactionUserData, options?: TransactionOptions) {\n    const { ComponentLoad } = InternalTransactions;\n\n    return this.baseClient.reportTransactionFinish(\n      ComponentLoad,\n      options,\n      data,\n    );\n  }\n\n  phase(name: PhaseName) {\n    return new PanoramaPhaseImpl(name, this.baseClient);\n  }\n\n  transaction(\n    name: CustomTransactionName<string>,\n    options?: TransactionOptions,\n  ) {\n    return new PanoramaTransactionImpl(this.baseClient, name, options);\n  }\n\n  errorMonitor(\n    options?: ErrorMonitorOptions,\n  ): PanoramaErrorMonitor<ErrorMonitorUserData> {\n    return new PanoramaErrorMonitorImpl<ErrorMonitorUserData>(\n      this.baseClient,\n      options,\n    );\n  }\n\n  logger(): PanoramaLogger {\n    return new PanoramaLoggerImpl(this.baseClient);\n  }\n\n  createClientForComponent(): PanoramaClientForComponent {\n    const client = new PanoramaClientForComponentImpl({\n      baseClient: this.baseClient,\n    });\n\n    this.hooksManager.invoke(Hook.afterCreateClientForComponent, client);\n\n    return client;\n  }\n}\n","import {\n  InternalTransactions,\n  LogLevel,\n} from '@wix/panorama-common-shared/types';\nimport type {\n  BaseParams,\n  TransactionParams,\n  InternalParams,\n  ErrorUserData,\n  TransactionUserData,\n  EventPayload,\n  TransactionEventPayload,\n  ErrorEventPayload,\n  LoggerParams,\n  PhaseUserData,\n  PhaseParams,\n  PhaseEventPayload,\n} from '@wix/panorama-common-shared/types';\nimport type { GlobalConfig } from '@wix/panorama-common/global-config';\nimport { extractWixHttpErrorDetails } from '../utils/error-utils';\nimport { sanitizePayload } from './payload-sanitizer';\n\nconst getSessionParams = (\n  globalConfig: GlobalConfig,\n): Pick<InternalParams, 'sessionId' | 'sessionTime'> => {\n  const sessionId = globalConfig.getSessionId();\n  const sessionTime = Math.round(globalConfig.getSessionTime());\n\n  return { sessionId, sessionTime };\n};\n\nexport const buildTransactionPayload = (\n  globalConfig: GlobalConfig,\n  baseParams: BaseParams,\n  transactionParams: TransactionParams,\n  data?: TransactionUserData,\n): TransactionEventPayload => {\n  const { transactionName, transactionAction } = transactionParams;\n\n  const { sessionId, sessionTime } = getSessionParams(globalConfig);\n  const logLevel = LogLevel.Info;\n  const message = `Panorama ${transactionName} ${transactionAction}`;\n  const requestId = '';\n\n  return sanitizePayload({\n    ...baseParams,\n    ...transactionParams,\n    sessionId,\n    sessionTime,\n    logLevel,\n    requestId,\n    message,\n    data,\n  });\n};\n\nexport const buildPhasePayload = (\n  globalConfig: GlobalConfig,\n  baseParams: BaseParams,\n  phaseParams: PhaseParams,\n  data?: PhaseUserData,\n): PhaseEventPayload => {\n  const transactionName = InternalTransactions.ComponentPhase;\n  const { phaseName, transactionAction } = phaseParams;\n\n  const { sessionId, sessionTime } = getSessionParams(globalConfig);\n  const logLevel = LogLevel.Info;\n  const message = `Panorama ${phaseName} phase ${transactionAction}`;\n  const requestId = '';\n\n  return sanitizePayload({\n    ...baseParams,\n    ...phaseParams,\n    transactionName,\n    sessionId,\n    sessionTime,\n    logLevel,\n    requestId,\n    message,\n    data,\n  });\n};\n\nexport const buildErrorPayload = (\n  globalConfig: GlobalConfig,\n  baseParams: BaseParams,\n  error: Error,\n  data?: ErrorUserData,\n): ErrorEventPayload => {\n  const { sessionId, sessionTime } = getSessionParams(globalConfig);\n  const { constructor, message, stack = '' } = error;\n  const logLevel = LogLevel.Error;\n  const { requestId } = extractWixHttpErrorDetails(error);\n\n  return sanitizePayload({\n    ...baseParams,\n    sessionId,\n    sessionTime,\n    logLevel,\n    requestId,\n    data,\n    errorName: data?.errorName ?? constructor.name,\n    errorStack: stack,\n    message,\n  });\n};\n\nexport const buildLoggerPayload = (\n  globalConfig: GlobalConfig,\n  baseParams: BaseParams,\n  loggerParams: LoggerParams,\n): EventPayload => {\n  const { sessionId, sessionTime } = getSessionParams(globalConfig);\n  const requestId = '';\n\n  return sanitizePayload({\n    ...baseParams,\n    ...loggerParams,\n    sessionId,\n    sessionTime,\n    requestId,\n  });\n};\n","import type { Event } from '@sentry/browser';\nimport type { IHttpError } from '@wix/http-client';\nimport { WixHttpErrorDetails } from '../types';\nimport { defaults } from './general-utils';\n\nconst extractWixHttpErrorDetailsRec = (\n  error?: Error | IHttpError,\n): WixHttpErrorDetails => {\n  if (!(error instanceof Error)) {\n    return {};\n  }\n\n  const res = extractWixHttpErrorDetailsRec(error.cause as any);\n  const httpClientError = error as IHttpError;\n\n  return defaults<WixHttpErrorDetails>(res, {\n    isWixHttpError: httpClientError.isWixHttpError,\n    requestId:\n      httpClientError.response?.headers?.['x-wix-request-id'] ??\n      httpClientError.requestId,\n  });\n};\n\nexport const extractWixHttpErrorDetails = (\n  error?: Error | IHttpError,\n): WixHttpErrorDetails =>\n  defaults<WixHttpErrorDetails>(extractWixHttpErrorDetailsRec(error), {\n    isWixHttpError: false,\n    requestId: '',\n  });\n\nexport const normalizeError = (event: Event, error?: unknown): Error => {\n  if (!(error instanceof Error)) {\n    const err = new Error(typeof error === 'string' ? error : event.message);\n\n    delete err.stack;\n\n    return err;\n  }\n\n  return error;\n};\n\nexport const createUndedupableError = (error: Error) => {\n  const { message, stack, cause } = error;\n\n  const res = Object.assign(Object.create(Object.getPrototypeOf(error)), {\n    name: `${Date.now() + Math.random()}`,\n    message,\n    stack,\n    cause,\n  });\n\n  return res;\n};\n","import type { EventPayload } from '@wix/panorama-common-shared/types';\nimport { MAX_SESSION_TIME_MS, MAX_STACK_TRACE_SIZE_BYTES } from '../constants';\n\nexport const sanitizePayload = (payload: EventPayload) => {\n  const { errorStack, sessionTime } = payload;\n\n  if (errorStack && errorStack.length > MAX_STACK_TRACE_SIZE_BYTES) {\n    const truncationMessage = `...[truncated by Panorama client to ${\n      MAX_STACK_TRACE_SIZE_BYTES / 1024\n    }kb]`;\n\n    const truncatedErrorStack = errorStack.substring(\n      0,\n      MAX_STACK_TRACE_SIZE_BYTES - truncationMessage.length,\n    );\n\n    payload = {\n      ...payload,\n      errorStack: `${truncatedErrorStack}${truncationMessage}`,\n    };\n  }\n\n  if (sessionTime && sessionTime > MAX_SESSION_TIME_MS) {\n    payload = {\n      ...payload,\n      sessionTime: MAX_SESSION_TIME_MS,\n    };\n  }\n\n  return payload;\n};\n","export const MAX_STACK_TRACE_SIZE_BYTES = 32 * 1024;\nexport const MAX_SESSION_TIME_MS = 24 * 60 * 60 * 1000; // 1 day\n","// import type { IHttpError } from '@wix/http-client';\nimport type {\n  Reporter,\n  BaseParams,\n  LogLevel,\n  ErrorUserData,\n  TransactionUserData,\n  EventPayload,\n  UserParams,\n  PhaseUserData,\n} from '@wix/panorama-common-shared/types';\nimport { TransactionAction } from '@wix/panorama-common-shared/types';\nimport type { GlobalConfig } from '@wix/panorama-common/global-config';\nimport {\n  createDurationTracker,\n  type DurationTracker,\n} from '@wix/panorama-common/duration-tracker';\nimport {\n  buildErrorPayload,\n  buildLoggerPayload,\n  buildPhasePayload,\n  buildTransactionPayload,\n} from './lib/payload-builder';\nimport { Hook, type HooksManager } from './plugins/hooks-manager';\nimport type {\n  Breadcrumb,\n  ErrorMonitorOptions,\n  TransactionOptions,\n} from './types';\nimport type { Scope } from './lib/scope';\n\ninterface Options {\n  baseParams: BaseParams;\n  globalConfig: GlobalConfig;\n  reporter: Reporter;\n  hooksManager: HooksManager;\n  data: Scope<NonNullable<UserParams['data']>>;\n  isMuted: () => boolean;\n}\n\nexport class BasePanoramaClient {\n  private durationTracker: DurationTracker;\n  private readonly baseParams: BaseParams;\n  private readonly globalConfig: GlobalConfig;\n  private readonly reporter: Reporter;\n  private readonly hooksManager: HooksManager;\n  private readonly data: Scope<NonNullable<UserParams['data']>>;\n  private readonly isMuted: () => boolean;\n\n  constructor({\n    baseParams,\n    globalConfig,\n    reporter,\n    hooksManager,\n    data,\n    isMuted,\n  }: Options) {\n    this.baseParams = baseParams;\n    this.globalConfig = globalConfig;\n    this.reporter = reporter;\n    this.hooksManager = hooksManager;\n    this.data = data;\n    this.isMuted = isMuted;\n\n    // For backward compatibility in cases where GlobalConfig version is older than what we expect\n    this.durationTracker =\n      typeof globalConfig.getDurationTracker === 'function'\n        ? globalConfig.getDurationTracker()\n        : createDurationTracker();\n  }\n\n  private report(eventPayload: EventPayload) {\n    if (this.isMuted()) {\n      return;\n    }\n\n    const reporterOverride = this.globalConfig.getReporter();\n    const beforeReportHookResult = this.hooksManager.invoke(\n      Hook.beforeReport,\n      eventPayload,\n    );\n\n    if (typeof reporterOverride === 'function') {\n      reporterOverride(eventPayload);\n      return;\n    }\n\n    if (!beforeReportHookResult) {\n      return;\n    }\n\n    this.reporter(eventPayload);\n  }\n\n  getErrorMonitorDataWithDefaults = (\n    ...args: (ErrorUserData | undefined)[]\n  ) => {\n    return this.data.addDataScope(args).getData();\n  };\n\n  reportTransactionStart(\n    name: string,\n    options: TransactionOptions = {},\n    data?: TransactionUserData,\n  ) {\n    const { id } = options;\n    const dataWithDefault = this.data.addDataScope(data).getData();\n\n    if (\n      !this.hooksManager.invoke(\n        Hook.beforeReportTransactionStart,\n        name,\n        dataWithDefault,\n      )\n    ) {\n      return;\n    }\n\n    const { fullArtifactId, componentId } = this.baseParams;\n\n    this.durationTracker.markTransactionStart(\n      fullArtifactId!,\n      componentId!,\n      name,\n      id,\n    );\n\n    const payload = buildTransactionPayload(\n      this.globalConfig,\n      this.baseParams,\n      {\n        transactionName: name,\n        transactionAction: TransactionAction.Start,\n      },\n      dataWithDefault,\n    );\n\n    this.report(payload);\n\n    this.hooksManager.invoke(Hook.afterReportTransactionStart, name, payload);\n  }\n\n  reportTransactionFinish(\n    name: string,\n    options: TransactionOptions = {},\n    data?: TransactionUserData,\n  ) {\n    const { id } = options;\n    const dataWithDefault = this.data.addDataScope(data).getData();\n\n    if (\n      !this.hooksManager.invoke(\n        Hook.beforeReportTransactionFinish,\n        name,\n        dataWithDefault,\n      )\n    ) {\n      return;\n    }\n\n    const { fullArtifactId, componentId } = this.baseParams;\n\n    const duration = this.durationTracker.markTransactionFinish(\n      fullArtifactId!,\n      componentId!,\n      name,\n      id,\n    );\n\n    const payload = buildTransactionPayload(\n      this.globalConfig,\n      this.baseParams,\n      {\n        transactionName: name,\n        transactionAction: TransactionAction.Finish,\n        transactionDuration: duration,\n      },\n      dataWithDefault,\n    );\n\n    this.report(payload);\n\n    this.hooksManager.invoke(Hook.afterReportTransactionFinish, name, payload);\n  }\n\n  reportPhaseStart(name: string, data?: PhaseUserData) {\n    const dataWithDefault = this.data.addDataScope(data).getData();\n\n    if (\n      !this.hooksManager.invoke(\n        Hook.beforeReportPhaseStart,\n        name,\n        dataWithDefault,\n      )\n    ) {\n      return;\n    }\n\n    const { fullArtifactId, componentId } = this.baseParams;\n\n    this.durationTracker.markPhaseStart(fullArtifactId!, componentId!, name);\n\n    const payload = buildPhasePayload(\n      this.globalConfig,\n      this.baseParams,\n      {\n        phaseName: name,\n        transactionAction: TransactionAction.Start,\n      },\n      dataWithDefault,\n    );\n\n    this.report(payload);\n\n    this.hooksManager.invoke(Hook.afterReportPhaseStart, name, payload);\n  }\n\n  reportPhaseFinish(name: string, data?: TransactionUserData) {\n    const dataWithDefault = this.data.addDataScope(data).getData();\n\n    if (\n      !this.hooksManager.invoke(\n        Hook.beforeReportPhaseFinish,\n        name,\n        dataWithDefault,\n      )\n    ) {\n      return;\n    }\n\n    const { fullArtifactId, componentId } = this.baseParams;\n\n    const duration = this.durationTracker.markPhaseFinish(\n      fullArtifactId!,\n      componentId!,\n      name,\n    );\n\n    const payload = buildPhasePayload(\n      this.globalConfig,\n      this.baseParams,\n      {\n        phaseName: name,\n        transactionAction: TransactionAction.Finish,\n        transactionDuration: duration,\n      },\n      dataWithDefault,\n    );\n\n    this.report(payload);\n\n    this.hooksManager.invoke(Hook.afterReportPhaseFinish, name, payload);\n  }\n\n  reportError(\n    error: Error,\n    data?: ErrorUserData,\n    options?: ErrorMonitorOptions,\n  ) {\n    if (!(error instanceof Error)) {\n      return;\n    }\n\n    data = this.data.addDataScope([data, options?.data]).getData();\n\n    if (\n      !this.hooksManager.invoke(Hook.beforeReportError, error, data, options)\n    ) {\n      return;\n    }\n\n    const payload = buildErrorPayload(\n      this.globalConfig,\n      this.baseParams,\n      error,\n      data,\n    );\n\n    this.report(payload);\n\n    this.hooksManager.invoke(Hook.afterReportError, error, data, options);\n  }\n\n  addBreadcrumb(breadcrumb: Breadcrumb) {\n    if (!this.hooksManager.invoke(Hook.beforeAddBreadcrumb, breadcrumb)) {\n      return;\n    }\n\n    // Currently the default implementation does nothing, we only invoke hooks\n\n    this.hooksManager.invoke(Hook.afterAddBreadcrumb, breadcrumb);\n  }\n\n  log(logLevel: LogLevel, message: string, data?: Record<string, any>) {\n    if (!message) {\n      return;\n    }\n\n    const dataWithDefault = this.data.addDataScope(data).getData();\n\n    const loggerParams = {\n      message,\n      data: dataWithDefault,\n      logLevel,\n    };\n\n    if (\n      !this.hooksManager.invoke(\n        Hook.beforeReportLog,\n        logLevel,\n        message,\n        dataWithDefault,\n      )\n    ) {\n      return;\n    }\n\n    const payload = buildLoggerPayload(\n      this.globalConfig,\n      this.baseParams,\n      loggerParams,\n    );\n    this.report(payload);\n\n    this.hooksManager.invoke(\n      Hook.afterReportLog,\n      logLevel,\n      message,\n      dataWithDefault,\n    );\n  }\n}\n","import { defaults, deepDefaults } from '../utils/general-utils';\n\nexport class Scope<T extends Record<string, any>> {\n  private readonly data: T | undefined;\n  private static readonly KEYS_TO_DEEP_DEFAULTS = ['tags', 'context'];\n\n  constructor(data: T | undefined) {\n    this.data = data;\n  }\n\n  private getEntriesToDeepDefaults(data: T | undefined): T | undefined {\n    if (!data) {\n      return undefined;\n    }\n    return Object.fromEntries(\n      Object.entries(data).filter(([key]) =>\n        Scope.KEYS_TO_DEEP_DEFAULTS.includes(key),\n      ),\n    ) as unknown as T;\n  }\n\n  addDataScope(data: T | undefined | (T | undefined)[]): Scope<T> {\n    const outerDataArray = Array.isArray(data) ? data : [data];\n    const deepDefaultData = deepDefaults(\n      ...outerDataArray.map((_data) => this.getEntriesToDeepDefaults(_data)),\n      this.getEntriesToDeepDefaults(this.data),\n    );\n    return new Scope(defaults(deepDefaultData, ...outerDataArray, this.data));\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n","import { bindPrototypeMethodsToSelf } from '@wix/panorama-common/utils';\nimport type {\n  Reporter,\n  BaseParams,\n  EventPayload,\n} from '@wix/panorama-common-shared/types';\nimport {\n  createGlobalConfig,\n  type GlobalConfig,\n} from '@wix/panorama-common/global-config';\nimport { defaults } from './utils/general-utils';\nimport { type PanoramaClient, PanoramaClientImpl } from './panorama-client';\nimport type { PluginArgs, PluginFunction } from './plugins';\nimport type { ClientOptions, FactoryOptions } from './types';\nimport { HooksManager } from './plugins/hooks-manager';\nimport { BasePanoramaClient } from './panorama-client-base';\nimport { Scope } from './lib/scope';\n\nexport interface PanoramaClientFactory<Payload extends unknown = EventPayload> {\n  withGlobalConfig(\n    globalConfig: GlobalConfig<Payload>,\n  ): PanoramaClientFactory<Payload>;\n\n  withReporter(reporter: Reporter<Payload>): PanoramaClientFactory<Payload>;\n\n  setMuted(isMuted: boolean): PanoramaClientFactory<Payload>;\n\n  use(\n    plugin: (args: PluginArgs<Payload>) => void,\n  ): PanoramaClientFactory<Payload>;\n\n  client(options?: ClientOptions): PanoramaClient;\n}\n\nclass PanoramaClientFactoryImpl<Payload extends unknown = EventPayload>\n  implements PanoramaClientFactory<Payload>\n{\n  private globalConfig?: GlobalConfig<Payload>;\n  private reporter: Reporter<Payload> = () => true;\n  private plugins: PluginFunction<Payload>[] = [];\n  private isMuted: boolean = false;\n\n  constructor(private readonly options: FactoryOptions) {\n    bindPrototypeMethodsToSelf(this);\n  }\n\n  withGlobalConfig(globalConfig: GlobalConfig<Payload>) {\n    this.globalConfig = globalConfig;\n\n    return this;\n  }\n\n  withReporter(reporter: Reporter<Payload>) {\n    this.reporter = reporter;\n\n    return this;\n  }\n\n  setMuted(isMuted: boolean) {\n    this.isMuted = isMuted;\n\n    return this;\n  }\n\n  use(plugin: (args: PluginArgs<Payload>) => void) {\n    this.plugins.push(plugin);\n\n    return this;\n  }\n\n  client(options: ClientOptions = {}) {\n    const { pluginParams } = options;\n\n    const globalConfig = this.globalConfig ?? createGlobalConfig();\n    const reporter = this.reporter as any;\n    const hooksManager = new HooksManager();\n    const baseParams = defaults(\n      options.baseParams,\n      this.options.baseParams,\n    ) as Required<BaseParams>;\n    const data = new Scope(this.options.data).addDataScope(options.data);\n\n    const pluginClientParams = pluginParams ?? {};\n\n    const baseClient = new BasePanoramaClient({\n      baseParams,\n      globalConfig: globalConfig as unknown as GlobalConfig,\n      isMuted: () => this.isMuted,\n      reporter,\n      hooksManager,\n      data,\n    });\n\n    const client = new PanoramaClientImpl({\n      baseClient,\n      hooksManager,\n    });\n\n    this.plugins.forEach((plugin) =>\n      plugin({\n        hooksManager,\n        globalConfig,\n        reporter,\n        baseClient,\n        baseParams,\n        pluginParams: pluginClientParams,\n      }),\n    );\n\n    return client;\n  }\n}\n\nexport const panoramaClient = <Payload extends unknown = EventPayload>(\n  options: FactoryOptions = {},\n): PanoramaClientFactory<Payload> =>\n  new PanoramaClientFactoryImpl<Payload>(options);\n",null,"import { EventPayload } from '@wix/panorama-common-shared/types';\nimport { ReporterOptions } from './types';\n\nexport const nodeReporter =\n  (url: string, { silent = false }: ReporterOptions = { silent: false }) =>\n  (eventPayload: EventPayload): boolean => {\n    const body = JSON.stringify({ logMessage: eventPayload });\n\n    fetch(url, { method: 'POST', body })\n      .then((res) => {\n        if (res.ok || silent) {\n          return;\n        }\n\n        console.error('Panorama report failed', res.statusText);\n      })\n      .catch((e) => {\n        if (silent) {\n          return;\n        }\n\n        console.error('Panorama report failed', e);\n      });\n\n    return true;\n  };\n","export { PanoramaProvider } from './PanoramaContext.js';\nexport { usePanoramaMethodLogger } from './usePanoramaMethodLogger.js';\nexport { createPanorama } from './createPanorama.js';\nexport type { Panorama } from './createPanorama.js';\n","import { useContext, useMemo } from 'react';\n\nimport { PanoramaContext } from './PanoramaContext.js';\n\nexport function usePanoramaMethodLogger<T extends object>(target: T): T {\n  const factory = useContext(PanoramaContext);\n  if (factory == null) {\n    throw new Error(\n      'usePanoramaMethodLogger() cannot be used without a <PanoramaProvider />'\n    );\n  }\n\n  const componentId = target.constructor.name;\n  const clientOptions = useMemo(\n    () => ({ baseParams: { componentId } }),\n    [componentId]\n  );\n\n  const client = useMemo(() => {\n    return factory.client(clientOptions);\n  }, [factory, clientOptions]);\n\n  return useMemo(() => {\n    const cache = new Map();\n\n    return new Proxy(target, {\n      get(target, prop, receiver) {\n        const value = Reflect.get(target, prop, receiver);\n\n        const isAsyncMethod =\n          typeof value === 'function' &&\n          typeof prop === 'string' &&\n          Object.hasOwn(target, prop) &&\n          value.constructor.name === 'AsyncFunction';\n\n        if (!isAsyncMethod) {\n          return value;\n        }\n\n        // Cache is required, otherwise each time a method is accessed,\n        // the new reference is returned, which might break the react render cycles.\n        if (!cache.has(prop)) {\n          const wrapped = async function (...args: unknown[]) {\n            const transaction = client.transaction(prop);\n            transaction.start();\n\n            const result = await value.apply(target, args);\n\n            transaction.finish();\n            return result;\n          };\n\n          cache.set(prop, wrapped);\n        }\n\n        return cache.get(prop);\n      },\n    });\n  }, [target, client]);\n}\n"],"mappings":"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","names":["o","_defineProperty","React","AlertType","AlertStatus","LogLevel","TransactionAction","Platform","ErrorSeverity","crypto","union","_len","arguments","length","args","Array","_key","Set","flat","values","defaults","_len2","_key2","reduce","res","obj","Object","entries","_res","_ref","key","value","deepDefaults","dest","_len3","rest","_key3","keys","map","all","merged","hasValues","filter","_res2","PanoramaErrorMonitorImpl","constructor","baseClient","options","bindPrototypeMethodsToSelf","reportError","error","data","addBreadcrumb","breadcrumb","PanoramaLoggerImpl","constructor","baseClient","bindPrototypeMethodsToSelf","info","message","data","log","LogLevel","Info","warn","Warn","error","Error","debug","Debug","PanoramaTransactionImpl","constructor","baseClient","name","options","isCustomTransactionName","Error","bindPrototypeMethodsToSelf","start","data","reportTransactionStart","defaults","finish","reportTransactionFinish","PanoramaClientForComponentImpl","constructor","_ref","baseClient","_defineProperty","bindPrototypeMethodsToSelf","transaction","name","options","PanoramaTransactionImpl","errorMonitor","PanoramaErrorMonitorImpl","logger","PanoramaLoggerImpl","Hook","HooksManager","constructor","_defineProperty","tap","hook","subscriber","subscribers","push","invoke","_len","arguments","length","args","Array","_key","PanoramaPhaseImpl","constructor","name","baseClient","bindPrototypeMethodsToSelf","start","data","reportPhaseStart","finish","reportPhaseFinish","PanoramaClientImpl","constructor","_ref","hooksManager","baseClient","_defineProperty","bindPrototypeMethodsToSelf","onUnhandledError","subscriber","tap","Hook","beforeUnhandledError","reportLoadStart","data","options","ComponentLoad","InternalTransactions","reportTransactionStart","reportLoadFinish","reportTransactionFinish","phase","name","PanoramaPhaseImpl","transaction","PanoramaTransactionImpl","errorMonitor","PanoramaErrorMonitorImpl","logger","PanoramaLoggerImpl","createClientForComponent","client","PanoramaClientForComponentImpl","invoke","afterCreateClientForComponent","extractWixHttpErrorDetailsRec","error","_httpClientError$resp","Error","res","cause","httpClientError","defaults","isWixHttpError","requestId","response","headers","extractWixHttpErrorDetails","MAX_STACK_TRACE_SIZE_BYTES","MAX_SESSION_TIME_MS","sanitizePayload","payload","errorStack","sessionTime","length","MAX_STACK_TRACE_SIZE_BYTES","truncationMessage","truncatedErrorStack","substring","MAX_SESSION_TIME_MS","getSessionParams","globalConfig","sessionId","getSessionId","sessionTime","Math","round","getSessionTime","buildTransactionPayload","baseParams","transactionParams","data","transactionName","transactionAction","logLevel","LogLevel","Info","message","requestId","sanitizePayload","buildPhasePayload","phaseParams","InternalTransactions","ComponentPhase","phaseName","buildErrorPayload","error","constructor","stack","Error","extractWixHttpErrorDetails","errorName","name","errorStack","buildLoggerPayload","loggerParams","BasePanoramaClient","constructor","_ref","_this","baseParams","globalConfig","reporter","hooksManager","data","isMuted","_defineProperty","_len","arguments","length","args","Array","_key","addDataScope","getData","durationTracker","getDurationTracker","createDurationTracker","report","eventPayload","reporterOverride","getReporter","beforeReportHookResult","invoke","Hook","beforeReport","reportTransactionStart","name","options","id","dataWithDefault","beforeReportTransactionStart","fullArtifactId","componentId","markTransactionStart","payload","buildTransactionPayload","transactionName","transactionAction","TransactionAction","Start","afterReportTransactionStart","reportTransactionFinish","beforeReportTransactionFinish","duration","markTransactionFinish","Finish","transactionDuration","afterReportTransactionFinish","reportPhaseStart","beforeReportPhaseStart","markPhaseStart","buildPhasePayload","phaseName","afterReportPhaseStart","reportPhaseFinish","beforeReportPhaseFinish","markPhaseFinish","afterReportPhaseFinish","reportError","error","Error","beforeReportError","buildErrorPayload","afterReportError","addBreadcrumb","breadcrumb","beforeAddBreadcrumb","afterAddBreadcrumb","log","logLevel","message","loggerParams","beforeReportLog","buildLoggerPayload","afterReportLog","Scope","constructor","data","_defineProperty","getEntriesToDeepDefaults","undefined","Object","fromEntries","entries","filter","_ref","key","KEYS_TO_DEEP_DEFAULTS","includes","addDataScope","outerDataArray","Array","isArray","deepDefaultData","deepDefaults","map","_data","defaults","getData","PanoramaClientFactoryImpl","constructor","options","_defineProperty","bindPrototypeMethodsToSelf","withGlobalConfig","globalConfig","withReporter","reporter","setMuted","isMuted","use","plugin","plugins","push","client","pluginParams","createGlobalConfig","hooksManager","HooksManager","baseParams","defaults","data","Scope","addDataScope","pluginClientParams","baseClient","BasePanoramaClient","PanoramaClientImpl","forEach","panoramaClient","nodeReporter","url","_temp","silent","eventPayload","body","JSON","stringify","logMessage","fetch","method","then","res","ok","console","error","statusText","catch","e","panoramaClientFactory","options","baseParams","reporterOptions","data","factory","panoramaClient","withReporter","nodeReporter","CLICKHOUSE_REPORT_URL","use","undefined","import_react","target"]}