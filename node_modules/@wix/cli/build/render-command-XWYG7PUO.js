import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  ProjectModelProvider,
  loadProjectModel
} from "./chunk-O3R4SBGX.js";
import {
  messages_default
} from "./chunk-7S4TD3NR.js";
import {
  HttpClientProvider,
  buildHttpClientHeaders
} from "./chunk-OHMQSHHI.js";
import {
  PanoramaProvider
} from "./chunk-IUJ26DW6.js";
import {
  addUserFields,
  reportCommandStartEvent
} from "./chunk-CPSZ7QTC.js";
import {
  BiProvider,
  ErrorReporterProvider,
  SiteAuthProvider
} from "./chunk-KONVQLDI.js";
import "./chunk-WZOSCHKD.js";
import {
  I18nProvider
} from "./chunk-N2KKXUSW.js";
import "./chunk-KJ37XZQA.js";
import {
  render
} from "./chunk-AHOU27PT.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-Z4MHKCET.js";
import "./chunk-C4SUTB4O.js";
import "./chunk-IWQIW4GL.js";
import "./chunk-II7O6SCF.js";
import "./chunk-RL7RA2JG.js";
import "./chunk-ZUSQSFTR.js";
import "./chunk-F43XHKVL.js";
import "./chunk-EW4XNYNT.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-site-live/src/commands/render-command.tsx
init_esm_shims();
var import_react = __toESM(require_react(), 1);
import { cwd } from "node:process";
async function initServices({ metaSiteId }, { biLogger, errorReporter }) {
  errorReporter.setContext("Site Info", {
    "Site ID": metaSiteId
  });
  biLogger.updateDefaults({
    _msid: metaSiteId
  });
}
async function renderCommand(command, services, cliVersion, component) {
  await runCommand(command, services, cliVersion, async (model) => {
    const { biLogger, errorReporter, panorama } = services;
    const handleLogin = (userInfo) => {
      errorReporter.setUser({ id: userInfo.userId });
      addUserFields(biLogger, userInfo.userId);
    };
    const headers = buildHttpClientHeaders({
      flow: "Sites",
      command: command.name(),
      cliVersion
    });
    await render(
      /* @__PURE__ */ import_react.default.createElement(BiProvider, { value: biLogger }, /* @__PURE__ */ import_react.default.createElement(ErrorReporterProvider, { value: errorReporter }, /* @__PURE__ */ import_react.default.createElement(PanoramaProvider, { value: panorama }, /* @__PURE__ */ import_react.default.createElement(SiteAuthProvider, { siteId: model.metaSiteId, onLogin: handleLogin }, /* @__PURE__ */ import_react.default.createElement(HttpClientProvider, { headers }, /* @__PURE__ */ import_react.default.createElement(I18nProvider, { messages: messages_default }, /* @__PURE__ */ import_react.default.createElement(ProjectModelProvider, { model }, component)))))))
    );
  });
}
async function runCommand(command, services, cliVersion, commandFn) {
  const model = await loadProjectModel(cwd());
  await initServices(model, services);
  const commandStatus = reportCommandStartEvent({
    biLogger: services.biLogger,
    command,
    cliVersion,
    flow: "Sites_OpenGridApp"
  });
  try {
    await commandFn(model);
    commandStatus.succeed();
  } catch (e) {
    commandStatus.failed(e);
    throw e;
  }
}
export {
  renderCommand
};
//# sourceMappingURL=render-command-XWYG7PUO.js.map