import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  useProjectModel
} from "./chunk-O3R4SBGX.js";
import {
  syncLatestTypes
} from "./chunk-KNBTUAEM.js";
import {
  useVeloClient
} from "./chunk-AV2QWD2T.js";
import "./chunk-JEYKAALI.js";
import "./chunk-Y7PQOTYY.js";
import "./chunk-MVBGFP6D.js";
import "./chunk-E7EAMFQD.js";
import "./chunk-W54PG6O5.js";
import "./chunk-OHMQSHHI.js";
import {
  usePanoramaMethodLogger
} from "./chunk-IUJ26DW6.js";
import {
  pRetry,
  useAuth
} from "./chunk-KONVQLDI.js";
import "./chunk-WZOSCHKD.js";
import {
  Trans,
  useTranslation
} from "./chunk-N2KKXUSW.js";
import "./chunk-KJ37XZQA.js";
import {
  Spinner,
  useAsync
} from "./chunk-AHOU27PT.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-Z4MHKCET.js";
import "./chunk-C4SUTB4O.js";
import "./chunk-IWQIW4GL.js";
import "./chunk-II7O6SCF.js";
import {
  getTestOverrides
} from "./chunk-RL7RA2JG.js";
import {
  outputDir,
  outputFile
} from "./chunk-ZUSQSFTR.js";
import "./chunk-F43XHKVL.js";
import {
  CliError,
  CliErrorCode,
  require_lib
} from "./chunk-EW4XNYNT.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-site-live/src/components/DevCommand/DevCommand.tsx
init_esm_shims();
var import_react5 = __toESM(require_react(), 1);

// ../cli-site-live/src/components/DevCommand/InitializingState.tsx
init_esm_shims();
var import_react3 = __toESM(require_react(), 1);
var import_variant = __toESM(require_lib(), 1);

// ../cli-site-live/src/velo-types-sync-client/useVeloTypesSyncClient.ts
init_esm_shims();
var import_react = __toESM(require_react(), 1);

// ../cli-site-live/src/velo-types-sync-client/velo-types-sync-client.ts
init_esm_shims();
var VeloTypesSyncClient = class {
  constructor(projectFolder, getToken) {
    this.projectFolder = projectFolder;
    this.getToken = getToken;
    const { minRetryTimeout } = getTestOverrides();
    this.retryOptions = {
      retries: 3,
      minTimeout: minRetryTimeout,
      maxTimeout: 3 * 1e3
    };
  }
  retryOptions;
  syncLatestTypes = async () => {
    const token = await this.getToken();
    try {
      await pRetry(
        () => syncLatestTypes(this.projectFolder, {
          getAppToken: () => token
        }),
        this.retryOptions
      );
    } catch (e) {
      throw new CliError({
        code: CliErrorCode.FailedToSyncPagesTypes(),
        cause: e
      });
    }
  };
};

// ../cli-site-live/src/velo-types-sync-client/useVeloTypesSyncClient.ts
function useVeloTypesSyncClient(projectFolder) {
  const { getAccessToken } = useAuth();
  const client = (0, import_react.useMemo)(
    () => new VeloTypesSyncClient(projectFolder, getAccessToken),
    [projectFolder, getAccessToken]
  );
  return usePanoramaMethodLogger(client);
}

// ../cli-site-live/src/project-files-service/useProjectFilesService.ts
init_esm_shims();
var import_react2 = __toESM(require_react(), 1);

// ../cli-site-live/src/project-files-service/project-files-service.ts
init_esm_shims();
import { join } from "node:path";
var ProjectFilesService = class {
  constructor(projectFolder) {
    this.projectFolder = projectFolder;
  }
  addDir = async (file) => {
    const filePath = this.getFullPath(file);
    await outputDir(filePath);
  };
  saveFile = async (file) => {
    const filePath = this.getFullPath(file);
    await outputFile(filePath, file.content);
  };
  getFullPath = (file) => join(this.projectFolder, file.path);
};

// ../cli-site-live/src/project-files-service/useProjectFilesService.ts
var useProjectFilesService = () => {
  const { projectFolder } = useProjectModel();
  return (0, import_react2.useMemo)(() => new ProjectFilesService(projectFolder), [projectFolder]);
};

// ../cli-site-live/src/components/DevCommand/InitializingState.tsx
var InitializingState = ({ children }) => {
  const { t } = useTranslation();
  const veloClient = useVeloClient();
  const projectFilesService = useProjectFilesService();
  const { veloAppId, projectFolder } = useProjectModel();
  const veloTypeSyncer = useVeloTypesSyncClient(projectFolder);
  const { status } = useAsync(async () => {
    async function initProjectFiles() {
      const { files, directories } = await veloClient.listAppFiles(veloAppId);
      await Promise.all([
        ...directories.map(projectFilesService.addDir),
        ...files.map(projectFilesService.saveFile)
      ]);
    }
    await Promise.all([initProjectFiles(), veloTypeSyncer.syncLatestTypes()]);
  }, []);
  return (0, import_variant.match)(status, {
    Success: () => children,
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react3.default.createElement(Spinner, { text: t("dev_command.init.fetching_files") })
  });
};

// ../cli-site-live/src/components/DevCommand/ReadyState.tsx
init_esm_shims();
var import_react4 = __toESM(require_react(), 1);
var ReadyState = () => {
  return /* @__PURE__ */ import_react4.default.createElement(Trans, { i18nKey: "dev_command.welcome" });
};

// ../cli-site-live/src/components/DevCommand/DevCommand.tsx
var DevCommand = () => {
  return /* @__PURE__ */ import_react5.default.createElement(InitializingState, null, /* @__PURE__ */ import_react5.default.createElement(ReadyState, null));
};
export {
  DevCommand
};
//# sourceMappingURL=DevCommand-DJOVM34F.js.map